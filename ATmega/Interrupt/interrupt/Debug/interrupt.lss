
interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009d4  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000881  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036e  00000000  00000000  000014e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001850  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043f  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000210  00000000  00000000  00001d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001f6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	6c c0       	rjmp	.+216    	; 0xde <__vector_1>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	66 d0       	rcall	.+204    	; 0x166 <main>
  9a:	6f c0       	rjmp	.+222    	; 0x17a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <ledInit>:

#define LED_DDR		DDRC
#define LED_PORT	PORTC

void ledInit(){
	LED_DDR = 0xff;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	84 bb       	out	0x14, r24	; 20
  a2:	08 95       	ret

000000a4 <GPIO_Output>:
}

void GPIO_Output(uint8_t data){
	LED_PORT = data;
  a4:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	83 ed       	ldi	r24, 0xD3	; 211
  aa:	90 e3       	ldi	r25, 0x30	; 48
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <GPIO_Output+0x8>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <GPIO_Output+0x12>
  b6:	00 00       	nop
  b8:	08 95       	ret

000000ba <ledLeftShift>:
	_delay_ms(1000);
}

void ledLeftShift(uint8_t *data){
  ba:	fc 01       	movw	r30, r24
	*data = (*data) | (*data << 1);
  bc:	80 81       	ld	r24, Z
  be:	28 2f       	mov	r18, r24
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	82 2b       	or	r24, r18
  c8:	80 83       	st	Z, r24
	GPIO_Output(*data);
  ca:	ec cf       	rjmp	.-40     	; 0xa4 <GPIO_Output>
  cc:	08 95       	ret

000000ce <ledRightShift>:
}

void ledRightShift(uint8_t *data){
  ce:	fc 01       	movw	r30, r24
	*data = (*data >> 1) & (*data);
  d0:	90 81       	ld	r25, Z
  d2:	89 2f       	mov	r24, r25
  d4:	86 95       	lsr	r24
  d6:	89 23       	and	r24, r25
  d8:	80 83       	st	Z, r24
	GPIO_Output(*data);
  da:	e4 cf       	rjmp	.-56     	; 0xa4 <GPIO_Output>
  dc:	08 95       	ret

000000de <__vector_1>:
}

ISR(INT0_vect){
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	0b b6       	in	r0, 0x3b	; 59
  ea:	0f 92       	push	r0
  ec:	1f 93       	push	r17
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	1f 92       	push	r1
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
	ledInit();
 110:	c6 df       	rcall	.-116    	; 0x9e <ledInit>
	uint8_t ledData = 0x01;
 112:	81 e0       	ldi	r24, 0x01	; 1
	GPIO_Output(ledData);
 114:	89 83       	std	Y+1, r24	; 0x01
 116:	c6 df       	rcall	.-116    	; 0xa4 <GPIO_Output>
	
	for(uint8_t i=0; i<7; i++){
 118:	10 e0       	ldi	r17, 0x00	; 0
 11a:	04 c0       	rjmp	.+8      	; 0x124 <__vector_1+0x46>
		ledLeftShift(&ledData);
 11c:	ce 01       	movw	r24, r28
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	cc df       	rcall	.-104    	; 0xba <ledLeftShift>
ISR(INT0_vect){
	ledInit();
	uint8_t ledData = 0x01;
	GPIO_Output(ledData);
	
	for(uint8_t i=0; i<7; i++){
 122:	1f 5f       	subi	r17, 0xFF	; 255
 124:	17 30       	cpi	r17, 0x07	; 7
 126:	d0 f3       	brcs	.-12     	; 0x11c <__vector_1+0x3e>
 128:	10 e0       	ldi	r17, 0x00	; 0
		ledLeftShift(&ledData);
	}
	for(uint8_t i=0; i<7; i++){
		ledRightShift(&ledData);
 12a:	04 c0       	rjmp	.+8      	; 0x134 <__vector_1+0x56>
 12c:	ce 01       	movw	r24, r28
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	ce df       	rcall	.-100    	; 0xce <ledRightShift>
	GPIO_Output(ledData);
	
	for(uint8_t i=0; i<7; i++){
		ledLeftShift(&ledData);
	}
	for(uint8_t i=0; i<7; i++){
 132:	1f 5f       	subi	r17, 0xFF	; 255
 134:	17 30       	cpi	r17, 0x07	; 7
 136:	d0 f3       	brcs	.-12     	; 0x12c <__vector_1+0x4e>
		ledRightShift(&ledData);
	}
}
 138:	0f 90       	pop	r0
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	bf 91       	pop	r27
 144:	af 91       	pop	r26
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	7f 91       	pop	r23
 14c:	6f 91       	pop	r22
 14e:	5f 91       	pop	r21
 150:	4f 91       	pop	r20
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	1f 91       	pop	r17
 158:	0f 90       	pop	r0
 15a:	0b be       	out	0x3b, r0	; 59
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <main>:


int main(void)
{	
	DDRC = 0xff;	//set portc output
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	84 bb       	out	0x14, r24	; 20
	sei();			//enable interrupt
 16a:	78 94       	sei
	EICRA = 0x01;	//use int0 under edge
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 0x01;	//enable int0 interrupt
 172:	89 bf       	out	0x39, r24	; 57
	
	DDRD = 0x00;
 174:	11 ba       	out	0x11, r1	; 17
    /* Replace with your application code */
    while (1) 
    {
		PORTC = 0x00;
 176:	15 ba       	out	0x15, r1	; 21
 178:	fe cf       	rjmp	.-4      	; 0x176 <main+0x10>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
