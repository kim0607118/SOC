
4digit_FND.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000308  0000039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000308  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010a  0080010a  000003a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000093a  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000846  00000000  00000000  00000d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000347  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001908  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000443  00000000  00000000  0000194c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c3  00000000  00000000  00001d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001f52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e0       	ldi	r30, 0x08	; 8
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 30       	cpi	r26, 0x0B	; 11
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e7 d0       	rcall	.+462    	; 0x292 <main>
  c4:	1f c1       	rjmp	.+574    	; 0x304 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <FND_Display>:
#define	FND_DATA_DDR	DDRC
#define	FND_SELECT_DDR	DDRG
#define FND_DATA_PORT	PORTC
#define FND_SELECT_PORT	PORTG

void FND_Display(uint16_t data){
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	2a 97       	sbiw	r28, 0x0a	; 10
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
  dc:	9c 01       	movw	r18, r24
	static uint8_t position = 0;
	uint8_t fndData[]={0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x67};
  de:	8a e0       	ldi	r24, 0x0A	; 10
  e0:	e0 e0       	ldi	r30, 0x00	; 0
  e2:	f1 e0       	ldi	r31, 0x01	; 1
  e4:	de 01       	movw	r26, r28
  e6:	11 96       	adiw	r26, 0x01	; 1
  e8:	01 90       	ld	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	8a 95       	dec	r24
  ee:	e1 f7       	brne	.-8      	; 0xe8 <FND_Display+0x20>
		
	switch(position)
  f0:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__data_end>
  f4:	91 30       	cpi	r25, 0x01	; 1
  f6:	41 f1       	breq	.+80     	; 0x148 <FND_Display+0x80>
  f8:	38 f0       	brcs	.+14     	; 0x108 <FND_Display+0x40>
  fa:	92 30       	cpi	r25, 0x02	; 2
  fc:	09 f4       	brne	.+2      	; 0x100 <FND_Display+0x38>
  fe:	57 c0       	rjmp	.+174    	; 0x1ae <FND_Display+0xe6>
 100:	93 30       	cpi	r25, 0x03	; 3
 102:	09 f4       	brne	.+2      	; 0x106 <FND_Display+0x3e>
 104:	85 c0       	rjmp	.+266    	; 0x210 <FND_Display+0x148>
 106:	b6 c0       	rjmp	.+364    	; 0x274 <FND_Display+0x1ac>
	{
		case 0:
		FND_SELECT_PORT &= ~(1<<0);
 108:	e5 e6       	ldi	r30, 0x65	; 101
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8e 7f       	andi	r24, 0xFE	; 254
 110:	80 83       	st	Z, r24
		FND_SELECT_PORT |= (1<<1) | (1<<2) | (1<<3);	//digit 234 high
 112:	80 81       	ld	r24, Z
 114:	8e 60       	ori	r24, 0x0E	; 14
 116:	80 83       	st	Z, r24
		FND_DATA_PORT = fndData[data/1000];
 118:	36 95       	lsr	r19
 11a:	27 95       	ror	r18
 11c:	36 95       	lsr	r19
 11e:	27 95       	ror	r18
 120:	36 95       	lsr	r19
 122:	27 95       	ror	r18
 124:	a5 ec       	ldi	r26, 0xC5	; 197
 126:	b0 e2       	ldi	r27, 0x20	; 32
 128:	de d0       	rcall	.+444    	; 0x2e6 <__umulhisi3>
 12a:	92 95       	swap	r25
 12c:	82 95       	swap	r24
 12e:	8f 70       	andi	r24, 0x0F	; 15
 130:	89 27       	eor	r24, r25
 132:	9f 70       	andi	r25, 0x0F	; 15
 134:	89 27       	eor	r24, r25
 136:	e1 e0       	ldi	r30, 0x01	; 1
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	ec 0f       	add	r30, r28
 13c:	fd 1f       	adc	r31, r29
 13e:	e8 0f       	add	r30, r24
 140:	f9 1f       	adc	r31, r25
 142:	80 81       	ld	r24, Z
 144:	85 bb       	out	0x15, r24	; 21
		break;
 146:	96 c0       	rjmp	.+300    	; 0x274 <FND_Display+0x1ac>
		
		case 1:
		FND_SELECT_PORT &= ~(1<<1);
 148:	e5 e6       	ldi	r30, 0x65	; 101
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	8d 7f       	andi	r24, 0xFD	; 253
 150:	80 83       	st	Z, r24
		FND_SELECT_PORT |= (1<<0) | (1<<2) | (1<<3);	//digit 134 high
 152:	80 81       	ld	r24, Z
 154:	8d 60       	ori	r24, 0x0D	; 13
 156:	80 83       	st	Z, r24
		FND_DATA_PORT = fndData[data/100%10];
 158:	36 95       	lsr	r19
 15a:	27 95       	ror	r18
 15c:	36 95       	lsr	r19
 15e:	27 95       	ror	r18
 160:	ab e7       	ldi	r26, 0x7B	; 123
 162:	b4 e1       	ldi	r27, 0x14	; 20
 164:	c0 d0       	rcall	.+384    	; 0x2e6 <__umulhisi3>
 166:	ac 01       	movw	r20, r24
 168:	56 95       	lsr	r21
 16a:	47 95       	ror	r20
 16c:	9a 01       	movw	r18, r20
 16e:	ad ec       	ldi	r26, 0xCD	; 205
 170:	bc ec       	ldi	r27, 0xCC	; 204
 172:	b9 d0       	rcall	.+370    	; 0x2e6 <__umulhisi3>
 174:	96 95       	lsr	r25
 176:	87 95       	ror	r24
 178:	96 95       	lsr	r25
 17a:	87 95       	ror	r24
 17c:	96 95       	lsr	r25
 17e:	87 95       	ror	r24
 180:	9c 01       	movw	r18, r24
 182:	22 0f       	add	r18, r18
 184:	33 1f       	adc	r19, r19
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	82 0f       	add	r24, r18
 194:	93 1f       	adc	r25, r19
 196:	9a 01       	movw	r18, r20
 198:	28 1b       	sub	r18, r24
 19a:	39 0b       	sbc	r19, r25
 19c:	e1 e0       	ldi	r30, 0x01	; 1
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	ec 0f       	add	r30, r28
 1a2:	fd 1f       	adc	r31, r29
 1a4:	e2 0f       	add	r30, r18
 1a6:	f3 1f       	adc	r31, r19
 1a8:	80 81       	ld	r24, Z
 1aa:	85 bb       	out	0x15, r24	; 21
		break;
 1ac:	63 c0       	rjmp	.+198    	; 0x274 <FND_Display+0x1ac>
		
		case 2:
		FND_SELECT_PORT &= ~(1<<2);
 1ae:	e5 e6       	ldi	r30, 0x65	; 101
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	8b 7f       	andi	r24, 0xFB	; 251
 1b6:	80 83       	st	Z, r24
		FND_SELECT_PORT |= (1<<0) | (1<<1) | (1<<3);	//digit 234 high
 1b8:	80 81       	ld	r24, Z
 1ba:	8b 60       	ori	r24, 0x0B	; 11
		FND_DATA_PORT = fndData[data/10%10];
 1bc:	80 83       	st	Z, r24
 1be:	ad ec       	ldi	r26, 0xCD	; 205
 1c0:	bc ec       	ldi	r27, 0xCC	; 204
 1c2:	91 d0       	rcall	.+290    	; 0x2e6 <__umulhisi3>
 1c4:	ac 01       	movw	r20, r24
 1c6:	56 95       	lsr	r21
 1c8:	47 95       	ror	r20
 1ca:	56 95       	lsr	r21
 1cc:	47 95       	ror	r20
 1ce:	56 95       	lsr	r21
 1d0:	47 95       	ror	r20
 1d2:	9a 01       	movw	r18, r20
 1d4:	88 d0       	rcall	.+272    	; 0x2e6 <__umulhisi3>
 1d6:	96 95       	lsr	r25
 1d8:	87 95       	ror	r24
 1da:	96 95       	lsr	r25
 1dc:	87 95       	ror	r24
 1de:	96 95       	lsr	r25
 1e0:	87 95       	ror	r24
 1e2:	9c 01       	movw	r18, r24
 1e4:	22 0f       	add	r18, r18
 1e6:	33 1f       	adc	r19, r19
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	82 0f       	add	r24, r18
 1f6:	93 1f       	adc	r25, r19
 1f8:	9a 01       	movw	r18, r20
 1fa:	28 1b       	sub	r18, r24
 1fc:	39 0b       	sbc	r19, r25
 1fe:	e1 e0       	ldi	r30, 0x01	; 1
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	ec 0f       	add	r30, r28
 204:	fd 1f       	adc	r31, r29
 206:	e2 0f       	add	r30, r18
 208:	f3 1f       	adc	r31, r19
 20a:	80 81       	ld	r24, Z
 20c:	85 bb       	out	0x15, r24	; 21
		break;
 20e:	32 c0       	rjmp	.+100    	; 0x274 <FND_Display+0x1ac>
		
		case 3:
		FND_SELECT_PORT &= ~(1<<3);
 210:	e5 e6       	ldi	r30, 0x65	; 101
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	87 7f       	andi	r24, 0xF7	; 247
 218:	80 83       	st	Z, r24
		FND_SELECT_PORT |= (1<<0) | (1<<1) | (1<<2);	//digit 123 high
 21a:	80 81       	ld	r24, Z
 21c:	87 60       	ori	r24, 0x07	; 7
 21e:	80 83       	st	Z, r24
		FND_DATA_PORT = fndData[data/100%10];
 220:	36 95       	lsr	r19
 222:	27 95       	ror	r18
 224:	36 95       	lsr	r19
 226:	27 95       	ror	r18
 228:	ab e7       	ldi	r26, 0x7B	; 123
 22a:	b4 e1       	ldi	r27, 0x14	; 20
 22c:	5c d0       	rcall	.+184    	; 0x2e6 <__umulhisi3>
 22e:	ac 01       	movw	r20, r24
 230:	56 95       	lsr	r21
 232:	47 95       	ror	r20
 234:	9a 01       	movw	r18, r20
 236:	ad ec       	ldi	r26, 0xCD	; 205
 238:	bc ec       	ldi	r27, 0xCC	; 204
 23a:	55 d0       	rcall	.+170    	; 0x2e6 <__umulhisi3>
 23c:	96 95       	lsr	r25
 23e:	87 95       	ror	r24
 240:	96 95       	lsr	r25
 242:	87 95       	ror	r24
 244:	96 95       	lsr	r25
 246:	87 95       	ror	r24
 248:	9c 01       	movw	r18, r24
 24a:	22 0f       	add	r18, r18
 24c:	33 1f       	adc	r19, r19
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	82 0f       	add	r24, r18
 25c:	93 1f       	adc	r25, r19
 25e:	9a 01       	movw	r18, r20
 260:	28 1b       	sub	r18, r24
 262:	39 0b       	sbc	r19, r25
 264:	e1 e0       	ldi	r30, 0x01	; 1
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	ec 0f       	add	r30, r28
 26a:	fd 1f       	adc	r31, r29
 26c:	e2 0f       	add	r30, r18
 26e:	f3 1f       	adc	r31, r19
 270:	80 81       	ld	r24, Z
 272:	85 bb       	out	0x15, r24	; 21
		break;
	}
	position++;
 274:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 278:	8f 5f       	subi	r24, 0xFF	; 255
	position=position%4;
 27a:	83 70       	andi	r24, 0x03	; 3
 27c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 280:	2a 96       	adiw	r28, 0x0a	; 10
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <main>:

int main(void)
{
	FND_DATA_DDR = 0xff;
 292:	8f ef       	ldi	r24, 0xFF	; 255
 294:	84 bb       	out	0x14, r24	; 20
	FND_SELECT_DDR = 0xff;
 296:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	FND_SELECT_PORT = 0x00;
 29a:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	
	uint16_t count=0;
	uint32_t timeTick = 0;
	uint32_t prevTime = 0;
 29e:	81 2c       	mov	r8, r1
 2a0:	91 2c       	mov	r9, r1
 2a2:	54 01       	movw	r10, r8
	FND_DATA_DDR = 0xff;
	FND_SELECT_DDR = 0xff;
	FND_SELECT_PORT = 0x00;
	
	uint16_t count=0;
	uint32_t timeTick = 0;
 2a4:	c1 2c       	mov	r12, r1
 2a6:	d1 2c       	mov	r13, r1
 2a8:	76 01       	movw	r14, r12
{
	FND_DATA_DDR = 0xff;
	FND_SELECT_DDR = 0xff;
	FND_SELECT_PORT = 0x00;
	
	uint16_t count=0;
 2aa:	c0 e0       	ldi	r28, 0x00	; 0
 2ac:	d0 e0       	ldi	r29, 0x00	; 0
	uint32_t timeTick = 0;
	uint32_t prevTime = 0;
	
    while (1) 
    {
		FND_Display(count);
 2ae:	ce 01       	movw	r24, r28
 2b0:	0b df       	rcall	.-490    	; 0xc8 <FND_Display>
		if(timeTick-prevTime>100){
 2b2:	d7 01       	movw	r26, r14
 2b4:	c6 01       	movw	r24, r12
 2b6:	88 19       	sub	r24, r8
 2b8:	99 09       	sbc	r25, r9
 2ba:	aa 09       	sbc	r26, r10
 2bc:	bb 09       	sbc	r27, r11
 2be:	85 36       	cpi	r24, 0x65	; 101
 2c0:	91 05       	cpc	r25, r1
 2c2:	a1 05       	cpc	r26, r1
 2c4:	b1 05       	cpc	r27, r1
 2c6:	18 f0       	brcs	.+6      	; 0x2ce <main+0x3c>
			prevTime=timeTick;
			count++;
 2c8:	21 96       	adiw	r28, 0x01	; 1
	
    while (1) 
    {
		FND_Display(count);
		if(timeTick-prevTime>100){
			prevTime=timeTick;
 2ca:	46 01       	movw	r8, r12
 2cc:	57 01       	movw	r10, r14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	8f e1       	ldi	r24, 0x1F	; 31
 2d0:	9e e4       	ldi	r25, 0x4E	; 78
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <main+0x40>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <main+0x46>
 2d8:	00 00       	nop
			count++;
		}
		_delay_ms(5);
		timeTick++;
 2da:	9f ef       	ldi	r25, 0xFF	; 255
 2dc:	c9 1a       	sub	r12, r25
 2de:	d9 0a       	sbc	r13, r25
 2e0:	e9 0a       	sbc	r14, r25
 2e2:	f9 0a       	sbc	r15, r25
    }
 2e4:	e4 cf       	rjmp	.-56     	; 0x2ae <main+0x1c>

000002e6 <__umulhisi3>:
 2e6:	a2 9f       	mul	r26, r18
 2e8:	b0 01       	movw	r22, r0
 2ea:	b3 9f       	mul	r27, r19
 2ec:	c0 01       	movw	r24, r0
 2ee:	a3 9f       	mul	r26, r19
 2f0:	70 0d       	add	r23, r0
 2f2:	81 1d       	adc	r24, r1
 2f4:	11 24       	eor	r1, r1
 2f6:	91 1d       	adc	r25, r1
 2f8:	b2 9f       	mul	r27, r18
 2fa:	70 0d       	add	r23, r0
 2fc:	81 1d       	adc	r24, r1
 2fe:	11 24       	eor	r1, r1
 300:	91 1d       	adc	r25, r1
 302:	08 95       	ret

00000304 <_exit>:
 304:	f8 94       	cli

00000306 <__stop_program>:
 306:	ff cf       	rjmp	.-2      	; 0x306 <__stop_program>
