
20240523.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a59  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e6  00000000  00000000  00000c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c2  00000000  00000000  00001573  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001938  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043c  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013a  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001f36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	22 d0       	rcall	.+68     	; 0xde <main>
  9a:	3b c0       	rjmp	.+118    	; 0x112 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <ledInit>:
 */ 
#include "led.h"
#include <avr/io.h>

void ledInit(){
	LED_DDR = 0xff;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	81 bb       	out	0x11, r24	; 17
  a2:	08 95       	ret

000000a4 <GPIO_Output>:
}

void GPIO_Output(uint8_t data){
	LED_PORT = data;
  a4:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f e3       	ldi	r18, 0x3F	; 63
  a8:	8d e0       	ldi	r24, 0x0D	; 13
  aa:	93 e0       	ldi	r25, 0x03	; 3
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <GPIO_Output+0x8>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <GPIO_Output+0x12>
  b6:	00 00       	nop
  b8:	08 95       	ret

000000ba <ledLeftShift>:
	_delay_ms(1000);
}

void ledLeftShift(uint8_t *data){
  ba:	fc 01       	movw	r30, r24
	*data = (*data) | (*data << 1);
  bc:	80 81       	ld	r24, Z
  be:	28 2f       	mov	r18, r24
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	82 2b       	or	r24, r18
  c8:	80 83       	st	Z, r24
	GPIO_Output(*data);
  ca:	ec cf       	rjmp	.-40     	; 0xa4 <GPIO_Output>
  cc:	08 95       	ret

000000ce <ledRightShift>:
}

void ledRightShift(uint8_t *data){
  ce:	fc 01       	movw	r30, r24
	*data = (*data >> 1) & (*data);
  d0:	90 81       	ld	r25, Z
  d2:	89 2f       	mov	r24, r25
  d4:	86 95       	lsr	r24
  d6:	89 23       	and	r24, r25
  d8:	80 83       	st	Z, r24
	GPIO_Output(*data);
  da:	e4 cf       	rjmp	.-56     	; 0xa4 <GPIO_Output>
  dc:	08 95       	ret

000000de <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "led.h"

int main(void)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	1f 92       	push	r1
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
	ledInit();
  e8:	da df       	rcall	.-76     	; 0x9e <ledInit>
	uint8_t ledData = 0x01;
  ea:	81 e0       	ldi	r24, 0x01	; 1
	GPIO_Output(ledData);
  ec:	89 83       	std	Y+1, r24	; 0x01
  ee:	da df       	rcall	.-76     	; 0xa4 <GPIO_Output>
    /* Replace with your application code */
    while (1) 
    {
		for(uint8_t i=0; i<7; i++){
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	04 c0       	rjmp	.+8      	; 0xfc <main+0x1e>
			ledLeftShift(&ledData);
  f4:	ce 01       	movw	r24, r28
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	e0 df       	rcall	.-64     	; 0xba <ledLeftShift>
	uint8_t ledData = 0x01;
	GPIO_Output(ledData);
    /* Replace with your application code */
    while (1) 
    {
		for(uint8_t i=0; i<7; i++){
  fa:	1f 5f       	subi	r17, 0xFF	; 255
  fc:	17 30       	cpi	r17, 0x07	; 7
  fe:	d0 f3       	brcs	.-12     	; 0xf4 <main+0x16>
 100:	10 e0       	ldi	r17, 0x00	; 0
			ledLeftShift(&ledData);
		}
		for(uint8_t i=0; i<7; i++){
			ledRightShift(&ledData);
 102:	04 c0       	rjmp	.+8      	; 0x10c <main+0x2e>
 104:	ce 01       	movw	r24, r28
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	e2 df       	rcall	.-60     	; 0xce <ledRightShift>
    while (1) 
    {
		for(uint8_t i=0; i<7; i++){
			ledLeftShift(&ledData);
		}
		for(uint8_t i=0; i<7; i++){
 10a:	1f 5f       	subi	r17, 0xFF	; 255
 10c:	17 30       	cpi	r17, 0x07	; 7
 10e:	d0 f3       	brcs	.-12     	; 0x104 <main+0x26>
 110:	ef cf       	rjmp	.-34     	; 0xf0 <main+0x12>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
