
10_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b54  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004cf4  08004cf4  00005cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d70  08004d70  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004d70  08004d70  00005d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d78  08004d78  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d78  08004d78  00005d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d7c  08004d7c  00005d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004d80  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000068  08004de8  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08004de8  000062cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba11  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021fb  00000000  00000000  00011aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  00013ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000073a  00000000  00000000  00014640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fe8  00000000  00000000  00014d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8bd  00000000  00000000  0002cd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009380f  00000000  00000000  0003a61f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cde2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c90  00000000  00000000  000cde74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000d0b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004cdc 	.word	0x08004cdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004cdc 	.word	0x08004cdc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000584:	4a21      	ldr	r2, [pc, #132]	@ (800060c <MX_ADC1_Init+0x9c>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000588:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <MX_ADC1_Init+0x98>)
 800058a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000596:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000598:	2201      	movs	r2, #1
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800059c:	4b1a      	ldr	r3, [pc, #104]	@ (8000608 <MX_ADC1_Init+0x98>)
 800059e:	2201      	movs	r2, #1
 80005a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005aa:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b2:	4a17      	ldr	r2, [pc, #92]	@ (8000610 <MX_ADC1_Init+0xa0>)
 80005b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005bc:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005be:	2201      	movs	r2, #1
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	480d      	ldr	r0, [pc, #52]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005d2:	f000 fbfb 	bl	8000dcc <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005dc:	f000 f98a 	bl	80008f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005f2:	f000 fe57 	bl	80012a4 <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005fc:	f000 f97a 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000084 	.word	0x20000084
 800060c:	40012000 	.word	0x40012000
 8000610:	0f000001 	.word	0x0f000001

08000614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a33      	ldr	r2, [pc, #204]	@ (8000700 <HAL_ADC_MspInit+0xec>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d15f      	bne.n	80006f6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b32      	ldr	r3, [pc, #200]	@ (8000704 <HAL_ADC_MspInit+0xf0>)
 800063c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063e:	4a31      	ldr	r2, [pc, #196]	@ (8000704 <HAL_ADC_MspInit+0xf0>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000644:	6453      	str	r3, [r2, #68]	@ 0x44
 8000646:	4b2f      	ldr	r3, [pc, #188]	@ (8000704 <HAL_ADC_MspInit+0xf0>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800064a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <HAL_ADC_MspInit+0xf0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a2a      	ldr	r2, [pc, #168]	@ (8000704 <HAL_ADC_MspInit+0xf0>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b28      	ldr	r3, [pc, #160]	@ (8000704 <HAL_ADC_MspInit+0xf0>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800066e:	2380      	movs	r3, #128	@ 0x80
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000672:	2303      	movs	r3, #3
 8000674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4821      	ldr	r0, [pc, #132]	@ (8000708 <HAL_ADC_MspInit+0xf4>)
 8000682:	f001 fddd 	bl	8002240 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000686:	4b21      	ldr	r3, [pc, #132]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 8000688:	4a21      	ldr	r2, [pc, #132]	@ (8000710 <HAL_ADC_MspInit+0xfc>)
 800068a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800068c:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000692:	4b1e      	ldr	r3, [pc, #120]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000698:	4b1c      	ldr	r3, [pc, #112]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800069e:	4b1b      	ldr	r3, [pc, #108]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 80006a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006a6:	4b19      	ldr	r3, [pc, #100]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 80006a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006ae:	4b17      	ldr	r3, [pc, #92]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 80006b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006b6:	4b15      	ldr	r3, [pc, #84]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 80006b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006be:	4b13      	ldr	r3, [pc, #76]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006ca:	4810      	ldr	r0, [pc, #64]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 80006cc:	f001 f9b6 	bl	8001a3c <HAL_DMA_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80006d6:	f000 f90d 	bl	80008f4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a0b      	ldr	r2, [pc, #44]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 80006de:	639a      	str	r2, [r3, #56]	@ 0x38
 80006e0:	4a0a      	ldr	r2, [pc, #40]	@ (800070c <HAL_ADC_MspInit+0xf8>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2012      	movs	r0, #18
 80006ec:	f001 f96f 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80006f0:	2012      	movs	r0, #18
 80006f2:	f001 f988 	bl	8001a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006f6:	bf00      	nop
 80006f8:	3728      	adds	r7, #40	@ 0x28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40012000 	.word	0x40012000
 8000704:	40023800 	.word	0x40023800
 8000708:	40020000 	.word	0x40020000
 800070c:	200000cc 	.word	0x200000cc
 8000710:	40026410 	.word	0x40026410

08000714 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_DMA_Init+0x3c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a0b      	ldr	r2, [pc, #44]	@ (8000750 <MX_DMA_Init+0x3c>)
 8000724:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_DMA_Init+0x3c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	2038      	movs	r0, #56	@ 0x38
 800073c:	f001 f947 	bl	80019ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000740:	2038      	movs	r0, #56	@ 0x38
 8000742:	f001 f960 	bl	8001a06 <HAL_NVIC_EnableIRQ>

}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <MX_GPIO_Init+0x4c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a0f      	ldr	r2, [pc, #60]	@ (80007a0 <MX_GPIO_Init+0x4c>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_GPIO_Init+0x4c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_GPIO_Init+0x4c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a08      	ldr	r2, [pc, #32]	@ (80007a0 <MX_GPIO_Init+0x4c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_GPIO_Init+0x4c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]

}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <__io_putchar>:
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFF);
 80007ac:	1d39      	adds	r1, r7, #4
 80007ae:	23ff      	movs	r3, #255	@ 0xff
 80007b0:	2201      	movs	r2, #1
 80007b2:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <__io_putchar+0x20>)
 80007b4:	f002 fbb0 	bl	8002f18 <HAL_UART_Transmit>

  return ch;
 80007b8:	687b      	ldr	r3, [r7, #4]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000134 	.word	0x20000134

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007cc:	f000 fa68 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d0:	f000 f828 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d4:	f7ff ffbe 	bl	8000754 <MX_GPIO_Init>
  MX_DMA_Init();
 80007d8:	f7ff ff9c 	bl	8000714 <MX_DMA_Init>
  MX_ADC1_Init();
 80007dc:	f7ff fec8 	bl	8000570 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80007e0:	f000 f9ba 	bl	8000b58 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

//  HAL_ADC_Start_IT(&hadc1);
  HAL_ADC_Start_DMA(&hadc1, adcValue, 2);
 80007e4:	2202      	movs	r2, #2
 80007e6:	490b      	ldr	r1, [pc, #44]	@ (8000814 <main+0x4c>)
 80007e8:	480b      	ldr	r0, [pc, #44]	@ (8000818 <main+0x50>)
 80007ea:	f000 fc43 	bl	8001074 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_Delay(100);
 80007ee:	2064      	movs	r0, #100	@ 0x64
 80007f0:	f000 fac8 	bl	8000d84 <HAL_Delay>
      printf("adc->value1 : %4d\n\r", adcValue[0]);
 80007f4:	4b07      	ldr	r3, [pc, #28]	@ (8000814 <main+0x4c>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	4619      	mov	r1, r3
 80007fc:	4807      	ldr	r0, [pc, #28]	@ (800081c <main+0x54>)
 80007fe:	f003 fbff 	bl	8004000 <iprintf>
      printf("adc->value2 : %4d\n\r", adcValue[1]);
 8000802:	4b04      	ldr	r3, [pc, #16]	@ (8000814 <main+0x4c>)
 8000804:	885b      	ldrh	r3, [r3, #2]
 8000806:	b29b      	uxth	r3, r3
 8000808:	4619      	mov	r1, r3
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <main+0x58>)
 800080c:	f003 fbf8 	bl	8004000 <iprintf>
  {
 8000810:	bf00      	nop
 8000812:	e7ec      	b.n	80007ee <main+0x26>
 8000814:	2000012c 	.word	0x2000012c
 8000818:	20000084 	.word	0x20000084
 800081c:	08004cf4 	.word	0x08004cf4
 8000820:	08004d08 	.word	0x08004d08

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b094      	sub	sp, #80	@ 0x50
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	2230      	movs	r2, #48	@ 0x30
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f003 fc39 	bl	80040aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	4b27      	ldr	r3, [pc, #156]	@ (80008ec <SystemClock_Config+0xc8>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000850:	4a26      	ldr	r2, [pc, #152]	@ (80008ec <SystemClock_Config+0xc8>)
 8000852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000856:	6413      	str	r3, [r2, #64]	@ 0x40
 8000858:	4b24      	ldr	r3, [pc, #144]	@ (80008ec <SystemClock_Config+0xc8>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	4b21      	ldr	r3, [pc, #132]	@ (80008f0 <SystemClock_Config+0xcc>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a20      	ldr	r2, [pc, #128]	@ (80008f0 <SystemClock_Config+0xcc>)
 800086e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	4b1e      	ldr	r3, [pc, #120]	@ (80008f0 <SystemClock_Config+0xcc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000880:	2301      	movs	r3, #1
 8000882:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000884:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088a:	2302      	movs	r3, #2
 800088c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000892:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000894:	2304      	movs	r3, #4
 8000896:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000898:	2364      	movs	r3, #100	@ 0x64
 800089a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008a0:	2304      	movs	r3, #4
 80008a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 0320 	add.w	r3, r7, #32
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fe4d 	bl	8002548 <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b4:	f000 f81e 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	230f      	movs	r3, #15
 80008ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2302      	movs	r3, #2
 80008be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	2103      	movs	r1, #3
 80008d4:	4618      	mov	r0, r3
 80008d6:	f002 f8af 	bl	8002a38 <HAL_RCC_ClockConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008e0:	f000 f808 	bl	80008f4 <Error_Handler>
  }
}
 80008e4:	bf00      	nop
 80008e6:	3750      	adds	r7, #80	@ 0x50
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40007000 	.word	0x40007000

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <Error_Handler+0x8>

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b10      	ldr	r3, [pc, #64]	@ (800094c <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090e:	4a0f      	ldr	r2, [pc, #60]	@ (800094c <HAL_MspInit+0x4c>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000914:	6453      	str	r3, [r2, #68]	@ 0x44
 8000916:	4b0d      	ldr	r3, [pc, #52]	@ (800094c <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	4a08      	ldr	r2, [pc, #32]	@ (800094c <HAL_MspInit+0x4c>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000930:	6413      	str	r3, [r2, #64]	@ 0x40
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <NMI_Handler+0x4>

08000958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <MemManage_Handler+0x4>

08000968 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <UsageFault_Handler+0x4>

08000978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a6:	f000 f9cd 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80009b4:	4802      	ldr	r0, [pc, #8]	@ (80009c0 <ADC_IRQHandler+0x10>)
 80009b6:	f000 fa4c 	bl	8000e52 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000084 	.word	0x20000084

080009c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c8:	4802      	ldr	r0, [pc, #8]	@ (80009d4 <USART2_IRQHandler+0x10>)
 80009ca:	f002 fb31 	bl	8003030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000134 	.word	0x20000134

080009d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009dc:	4802      	ldr	r0, [pc, #8]	@ (80009e8 <DMA2_Stream0_IRQHandler+0x10>)
 80009de:	f001 f9c5 	bl	8001d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200000cc 	.word	0x200000cc

080009ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	e00a      	b.n	8000a14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009fe:	f3af 8000 	nop.w
 8000a02:	4601      	mov	r1, r0
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	1c5a      	adds	r2, r3, #1
 8000a08:	60ba      	str	r2, [r7, #8]
 8000a0a:	b2ca      	uxtb	r2, r1
 8000a0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	3301      	adds	r3, #1
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697a      	ldr	r2, [r7, #20]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	dbf0      	blt.n	80009fe <_read+0x12>
  }

  return len;
 8000a1c:	687b      	ldr	r3, [r7, #4]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	e009      	b.n	8000a4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	1c5a      	adds	r2, r3, #1
 8000a3c:	60ba      	str	r2, [r7, #8]
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff feaf 	bl	80007a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	dbf1      	blt.n	8000a38 <_write+0x12>
  }
  return len;
 8000a54:	687b      	ldr	r3, [r7, #4]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <_close>:

int _close(int file)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a86:	605a      	str	r2, [r3, #4]
  return 0;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <_isatty>:

int _isatty(int file)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad0:	4a14      	ldr	r2, [pc, #80]	@ (8000b24 <_sbrk+0x5c>)
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <_sbrk+0x60>)
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000adc:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <_sbrk+0x64>)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	@ (8000b30 <_sbrk+0x68>)
 8000ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d207      	bcs.n	8000b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af8:	f003 fb26 	bl	8004148 <__errno>
 8000afc:	4603      	mov	r3, r0
 8000afe:	220c      	movs	r2, #12
 8000b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
 8000b06:	e009      	b.n	8000b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	4a05      	ldr	r2, [pc, #20]	@ (8000b2c <_sbrk+0x64>)
 8000b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20020000 	.word	0x20020000
 8000b28:	00000400 	.word	0x00000400
 8000b2c:	20000130 	.word	0x20000130
 8000b30:	200002d0 	.word	0x200002d0

08000b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <SystemInit+0x20>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b3e:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <SystemInit+0x20>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ba8 <MX_USART2_UART_Init+0x50>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b62:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b90:	f002 f972 	bl	8002e78 <HAL_UART_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b9a:	f7ff feab 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000134 	.word	0x20000134
 8000ba8:	40004400 	.word	0x40004400

08000bac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	@ 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c40 <HAL_UART_MspInit+0x94>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d133      	bne.n	8000c36 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <HAL_UART_MspInit+0x98>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8000c44 <HAL_UART_MspInit+0x98>)
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bde:	4b19      	ldr	r3, [pc, #100]	@ (8000c44 <HAL_UART_MspInit+0x98>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <HAL_UART_MspInit+0x98>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a14      	ldr	r2, [pc, #80]	@ (8000c44 <HAL_UART_MspInit+0x98>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <HAL_UART_MspInit+0x98>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c06:	230c      	movs	r3, #12
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c16:	2307      	movs	r3, #7
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4809      	ldr	r0, [pc, #36]	@ (8000c48 <HAL_UART_MspInit+0x9c>)
 8000c22:	f001 fb0d 	bl	8002240 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2026      	movs	r0, #38	@ 0x26
 8000c2c:	f000 fecf 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c30:	2026      	movs	r0, #38	@ 0x26
 8000c32:	f000 fee8 	bl	8001a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c36:	bf00      	nop
 8000c38:	3728      	adds	r7, #40	@ 0x28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40004400 	.word	0x40004400
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020000 	.word	0x40020000

08000c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c50:	f7ff ff70 	bl	8000b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c54:	480c      	ldr	r0, [pc, #48]	@ (8000c88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c56:	490d      	ldr	r1, [pc, #52]	@ (8000c8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c58:	4a0d      	ldr	r2, [pc, #52]	@ (8000c90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f003 fa6b 	bl	8004154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7e:	f7ff fda3 	bl	80007c8 <main>
  bx  lr    
 8000c82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c90:	08004d80 	.word	0x08004d80
  ldr r2, =_sbss
 8000c94:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c98:	200002cc 	.word	0x200002cc

08000c9c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <DMA1_Stream0_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce0 <HAL_Init+0x40>)
 8000caa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <HAL_Init+0x40>)
 8000cb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	@ (8000ce0 <HAL_Init+0x40>)
 8000cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 fe75 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cce:	200f      	movs	r0, #15
 8000cd0:	f000 f808 	bl	8000ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd4:	f7ff fe14 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023c00 	.word	0x40023c00

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <HAL_InitTick+0x54>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <HAL_InitTick+0x58>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 fe8d 	bl	8001a22 <HAL_SYSTICK_Config>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00e      	b.n	8000d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d80a      	bhi.n	8000d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f000 fe55 	bl	80019ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d24:	4a06      	ldr	r2, [pc, #24]	@ (8000d40 <HAL_InitTick+0x5c>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e000      	b.n	8000d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000004 	.word	0x20000004

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_IncTick+0x20>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <HAL_IncTick+0x24>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a04      	ldr	r2, [pc, #16]	@ (8000d68 <HAL_IncTick+0x24>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008
 8000d68:	2000017c 	.word	0x2000017c

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b03      	ldr	r3, [pc, #12]	@ (8000d80 <HAL_GetTick+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	2000017c 	.word	0x2000017c

08000d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d8c:	f7ff ffee 	bl	8000d6c <HAL_GetTick>
 8000d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d9c:	d005      	beq.n	8000daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <HAL_Delay+0x44>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000daa:	bf00      	nop
 8000dac:	f7ff ffde 	bl	8000d6c <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d8f7      	bhi.n	8000dac <HAL_Delay+0x28>
  {
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008

08000dcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e033      	b.n	8000e4a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d109      	bne.n	8000dfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff fc12 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d118      	bne.n	8000e3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e12:	f023 0302 	bic.w	r3, r3, #2
 8000e16:	f043 0202 	orr.w	r2, r3, #2
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f000 fb72 	bl	8001508 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2e:	f023 0303 	bic.w	r3, r3, #3
 8000e32:	f043 0201 	orr.w	r2, r3, #1
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e3a:	e001      	b.n	8000e40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	f003 0320 	and.w	r3, r3, #32
 8000e80:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d049      	beq.n	8000f1c <HAL_ADC_IRQHandler+0xca>
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d046      	beq.n	8000f1c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d105      	bne.n	8000ea6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d12b      	bne.n	8000f0c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d127      	bne.n	8000f0c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ec2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d006      	beq.n	8000ed8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d119      	bne.n	8000f0c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f022 0220 	bic.w	r2, r2, #32
 8000ee6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d105      	bne.n	8000f0c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f04:	f043 0201 	orr.w	r2, r3, #1
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 f9a1 	bl	8001254 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f06f 0212 	mvn.w	r2, #18
 8000f1a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f2a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d057      	beq.n	8000fe2 <HAL_ADC_IRQHandler+0x190>
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d054      	beq.n	8000fe2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3c:	f003 0310 	and.w	r3, r3, #16
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d105      	bne.n	8000f50 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f48:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d139      	bne.n	8000fd2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f64:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d006      	beq.n	8000f7a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d12b      	bne.n	8000fd2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d124      	bne.n	8000fd2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d11d      	bne.n	8000fd2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d119      	bne.n	8000fd2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fac:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d105      	bne.n	8000fd2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	f043 0201 	orr.w	r2, r3, #1
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 fc16 	bl	8001804 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f06f 020c 	mvn.w	r2, #12
 8000fe0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ff0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d017      	beq.n	8001028 <HAL_ADC_IRQHandler+0x1d6>
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d014      	beq.n	8001028 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b01      	cmp	r3, #1
 800100a:	d10d      	bne.n	8001028 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001010:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f000 f92f 	bl	800127c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f06f 0201 	mvn.w	r2, #1
 8001026:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0320 	and.w	r3, r3, #32
 800102e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001036:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d015      	beq.n	800106a <HAL_ADC_IRQHandler+0x218>
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d012      	beq.n	800106a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001048:	f043 0202 	orr.w	r2, r3, #2
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f06f 0220 	mvn.w	r2, #32
 8001058:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f918 	bl	8001290 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f06f 0220 	mvn.w	r2, #32
 8001068:	601a      	str	r2, [r3, #0]
  }
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800108a:	2b01      	cmp	r3, #1
 800108c:	d101      	bne.n	8001092 <HAL_ADC_Start_DMA+0x1e>
 800108e:	2302      	movs	r3, #2
 8001090:	e0ce      	b.n	8001230 <HAL_ADC_Start_DMA+0x1bc>
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d018      	beq.n	80010da <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0201 	orr.w	r2, r2, #1
 80010b6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001238 <HAL_ADC_Start_DMA+0x1c4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a5f      	ldr	r2, [pc, #380]	@ (800123c <HAL_ADC_Start_DMA+0x1c8>)
 80010be:	fba2 2303 	umull	r2, r3, r2, r3
 80010c2:	0c9a      	lsrs	r2, r3, #18
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80010cc:	e002      	b.n	80010d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f9      	bne.n	80010ce <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010e8:	d107      	bne.n	80010fa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010f8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b01      	cmp	r3, #1
 8001106:	f040 8086 	bne.w	8001216 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001112:	f023 0301 	bic.w	r3, r3, #1
 8001116:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001128:	2b00      	cmp	r3, #0
 800112a:	d007      	beq.n	800113c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001134:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001148:	d106      	bne.n	8001158 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	f023 0206 	bic.w	r2, r3, #6
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	645a      	str	r2, [r3, #68]	@ 0x44
 8001156:	e002      	b.n	800115e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2200      	movs	r2, #0
 800115c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001166:	4b36      	ldr	r3, [pc, #216]	@ (8001240 <HAL_ADC_Start_DMA+0x1cc>)
 8001168:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800116e:	4a35      	ldr	r2, [pc, #212]	@ (8001244 <HAL_ADC_Start_DMA+0x1d0>)
 8001170:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001176:	4a34      	ldr	r2, [pc, #208]	@ (8001248 <HAL_ADC_Start_DMA+0x1d4>)
 8001178:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800117e:	4a33      	ldr	r2, [pc, #204]	@ (800124c <HAL_ADC_Start_DMA+0x1d8>)
 8001180:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800118a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800119a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80011aa:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	334c      	adds	r3, #76	@ 0x4c
 80011b6:	4619      	mov	r1, r3
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f000 fcec 	bl	8001b98 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 031f 	and.w	r3, r3, #31
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d10f      	bne.n	80011ec <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d129      	bne.n	800122e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	e020      	b.n	800122e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a17      	ldr	r2, [pc, #92]	@ (8001250 <HAL_ADC_Start_DMA+0x1dc>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d11b      	bne.n	800122e <HAL_ADC_Start_DMA+0x1ba>
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d114      	bne.n	800122e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	e00b      	b.n	800122e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f043 0210 	orr.w	r2, r3, #16
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001226:	f043 0201 	orr.w	r2, r3, #1
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000000 	.word	0x20000000
 800123c:	431bde83 	.word	0x431bde83
 8001240:	40012300 	.word	0x40012300
 8001244:	08001701 	.word	0x08001701
 8001248:	080017bb 	.word	0x080017bb
 800124c:	080017d7 	.word	0x080017d7
 8001250:	40012000 	.word	0x40012000

08001254 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d101      	bne.n	80012c0 <HAL_ADC_ConfigChannel+0x1c>
 80012bc:	2302      	movs	r3, #2
 80012be:	e113      	b.n	80014e8 <HAL_ADC_ConfigChannel+0x244>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b09      	cmp	r3, #9
 80012ce:	d925      	bls.n	800131c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68d9      	ldr	r1, [r3, #12]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	3b1e      	subs	r3, #30
 80012e6:	2207      	movs	r2, #7
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43da      	mvns	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	400a      	ands	r2, r1
 80012f4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68d9      	ldr	r1, [r3, #12]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4618      	mov	r0, r3
 8001308:	4603      	mov	r3, r0
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4403      	add	r3, r0
 800130e:	3b1e      	subs	r3, #30
 8001310:	409a      	lsls	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	e022      	b.n	8001362 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6919      	ldr	r1, [r3, #16]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	461a      	mov	r2, r3
 800132a:	4613      	mov	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	2207      	movs	r2, #7
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	400a      	ands	r2, r1
 800133e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6919      	ldr	r1, [r3, #16]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	b29b      	uxth	r3, r3
 8001350:	4618      	mov	r0, r3
 8001352:	4603      	mov	r3, r0
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4403      	add	r3, r0
 8001358:	409a      	lsls	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	430a      	orrs	r2, r1
 8001360:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b06      	cmp	r3, #6
 8001368:	d824      	bhi.n	80013b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	3b05      	subs	r3, #5
 800137c:	221f      	movs	r2, #31
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	400a      	ands	r2, r1
 800138a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	b29b      	uxth	r3, r3
 8001398:	4618      	mov	r0, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	3b05      	subs	r3, #5
 80013a6:	fa00 f203 	lsl.w	r2, r0, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013b2:	e04c      	b.n	800144e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b0c      	cmp	r3, #12
 80013ba:	d824      	bhi.n	8001406 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	3b23      	subs	r3, #35	@ 0x23
 80013ce:	221f      	movs	r2, #31
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43da      	mvns	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	400a      	ands	r2, r1
 80013dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	3b23      	subs	r3, #35	@ 0x23
 80013f8:	fa00 f203 	lsl.w	r2, r0, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	631a      	str	r2, [r3, #48]	@ 0x30
 8001404:	e023      	b.n	800144e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	3b41      	subs	r3, #65	@ 0x41
 8001418:	221f      	movs	r2, #31
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	400a      	ands	r2, r1
 8001426:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b29b      	uxth	r3, r3
 8001434:	4618      	mov	r0, r3
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	3b41      	subs	r3, #65	@ 0x41
 8001442:	fa00 f203 	lsl.w	r2, r0, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	430a      	orrs	r2, r1
 800144c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800144e:	4b29      	ldr	r3, [pc, #164]	@ (80014f4 <HAL_ADC_ConfigChannel+0x250>)
 8001450:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a28      	ldr	r2, [pc, #160]	@ (80014f8 <HAL_ADC_ConfigChannel+0x254>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d10f      	bne.n	800147c <HAL_ADC_ConfigChannel+0x1d8>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b12      	cmp	r3, #18
 8001462:	d10b      	bne.n	800147c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a1d      	ldr	r2, [pc, #116]	@ (80014f8 <HAL_ADC_ConfigChannel+0x254>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d12b      	bne.n	80014de <HAL_ADC_ConfigChannel+0x23a>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a1c      	ldr	r2, [pc, #112]	@ (80014fc <HAL_ADC_ConfigChannel+0x258>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d003      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x1f4>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b11      	cmp	r3, #17
 8001496:	d122      	bne.n	80014de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a11      	ldr	r2, [pc, #68]	@ (80014fc <HAL_ADC_ConfigChannel+0x258>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d111      	bne.n	80014de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014ba:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <HAL_ADC_ConfigChannel+0x25c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a11      	ldr	r2, [pc, #68]	@ (8001504 <HAL_ADC_ConfigChannel+0x260>)
 80014c0:	fba2 2303 	umull	r2, r3, r2, r3
 80014c4:	0c9a      	lsrs	r2, r3, #18
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014d0:	e002      	b.n	80014d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f9      	bne.n	80014d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	40012300 	.word	0x40012300
 80014f8:	40012000 	.word	0x40012000
 80014fc:	10000012 	.word	0x10000012
 8001500:	20000000 	.word	0x20000000
 8001504:	431bde83 	.word	0x431bde83

08001508 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001510:	4b79      	ldr	r3, [pc, #484]	@ (80016f8 <ADC_Init+0x1f0>)
 8001512:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	431a      	orrs	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800153c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6859      	ldr	r1, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	021a      	lsls	r2, r3, #8
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001560:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6859      	ldr	r1, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001582:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6899      	ldr	r1, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800159a:	4a58      	ldr	r2, [pc, #352]	@ (80016fc <ADC_Init+0x1f4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d022      	beq.n	80015e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6899      	ldr	r1, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6899      	ldr	r1, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	e00f      	b.n	8001606 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001604:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0202 	bic.w	r2, r2, #2
 8001614:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6899      	ldr	r1, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7e1b      	ldrb	r3, [r3, #24]
 8001620:	005a      	lsls	r2, r3, #1
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d01b      	beq.n	800166c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001642:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001652:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6859      	ldr	r1, [r3, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165e:	3b01      	subs	r3, #1
 8001660:	035a      	lsls	r2, r3, #13
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	e007      	b.n	800167c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800167a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800168a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	3b01      	subs	r3, #1
 8001698:	051a      	lsls	r2, r3, #20
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80016b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6899      	ldr	r1, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016be:	025a      	lsls	r2, r3, #9
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6899      	ldr	r1, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	029a      	lsls	r2, r3, #10
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	609a      	str	r2, [r3, #8]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	40012300 	.word	0x40012300
 80016fc:	0f000001 	.word	0x0f000001

08001700 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800170c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001716:	2b00      	cmp	r3, #0
 8001718:	d13c      	bne.n	8001794 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d12b      	bne.n	800178c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001738:	2b00      	cmp	r3, #0
 800173a:	d127      	bne.n	800178c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001742:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001746:	2b00      	cmp	r3, #0
 8001748:	d006      	beq.n	8001758 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001754:	2b00      	cmp	r3, #0
 8001756:	d119      	bne.n	800178c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0220 	bic.w	r2, r2, #32
 8001766:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001778:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d105      	bne.n	800178c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	f043 0201 	orr.w	r2, r3, #1
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f7ff fd61 	bl	8001254 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001792:	e00e      	b.n	80017b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f7ff fd75 	bl	8001290 <HAL_ADC_ErrorCallback>
}
 80017a6:	e004      	b.n	80017b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	4798      	blx	r3
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017c6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f7ff fd4d 	bl	8001268 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017e2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2240      	movs	r2, #64	@ 0x40
 80017e8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	f043 0204 	orr.w	r2, r3, #4
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f7ff fd4a 	bl	8001290 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001828:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001840:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184a:	4a04      	ldr	r2, [pc, #16]	@ (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	60d3      	str	r3, [r2, #12]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001864:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <__NVIC_GetPriorityGrouping+0x18>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	f003 0307 	and.w	r3, r3, #7
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	db0b      	blt.n	80018a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	f003 021f 	and.w	r2, r3, #31
 8001894:	4907      	ldr	r1, [pc, #28]	@ (80018b4 <__NVIC_EnableIRQ+0x38>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	2001      	movs	r0, #1
 800189e:	fa00 f202 	lsl.w	r2, r0, r2
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000e100 	.word	0xe000e100

080018b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	db0a      	blt.n	80018e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	490c      	ldr	r1, [pc, #48]	@ (8001904 <__NVIC_SetPriority+0x4c>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	440b      	add	r3, r1
 80018dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e0:	e00a      	b.n	80018f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4908      	ldr	r1, [pc, #32]	@ (8001908 <__NVIC_SetPriority+0x50>)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	3b04      	subs	r3, #4
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	440b      	add	r3, r1
 80018f6:	761a      	strb	r2, [r3, #24]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	@ 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2b04      	cmp	r3, #4
 8001928:	bf28      	it	cs
 800192a:	2304      	movcs	r3, #4
 800192c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3304      	adds	r3, #4
 8001932:	2b06      	cmp	r3, #6
 8001934:	d902      	bls.n	800193c <NVIC_EncodePriority+0x30>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3b03      	subs	r3, #3
 800193a:	e000      	b.n	800193e <NVIC_EncodePriority+0x32>
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	401a      	ands	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001954:	f04f 31ff 	mov.w	r1, #4294967295
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43d9      	mvns	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	4313      	orrs	r3, r2
         );
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	@ 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001984:	d301      	bcc.n	800198a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001986:	2301      	movs	r3, #1
 8001988:	e00f      	b.n	80019aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198a:	4a0a      	ldr	r2, [pc, #40]	@ (80019b4 <SysTick_Config+0x40>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001992:	210f      	movs	r1, #15
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f7ff ff8e 	bl	80018b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <SysTick_Config+0x40>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a2:	4b04      	ldr	r3, [pc, #16]	@ (80019b4 <SysTick_Config+0x40>)
 80019a4:	2207      	movs	r2, #7
 80019a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	e000e010 	.word	0xe000e010

080019b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff29 	bl	8001818 <__NVIC_SetPriorityGrouping>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e0:	f7ff ff3e 	bl	8001860 <__NVIC_GetPriorityGrouping>
 80019e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	6978      	ldr	r0, [r7, #20]
 80019ec:	f7ff ff8e 	bl	800190c <NVIC_EncodePriority>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff5d 	bl	80018b8 <__NVIC_SetPriority>
}
 80019fe:	bf00      	nop
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff31 	bl	800187c <__NVIC_EnableIRQ>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ffa2 	bl	8001974 <SysTick_Config>
 8001a30:	4603      	mov	r3, r0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff f990 	bl	8000d6c <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e099      	b.n	8001b8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0201 	bic.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a78:	e00f      	b.n	8001a9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a7a:	f7ff f977 	bl	8000d6c <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d908      	bls.n	8001a9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2203      	movs	r2, #3
 8001a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e078      	b.n	8001b8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1e8      	bne.n	8001a7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	4b38      	ldr	r3, [pc, #224]	@ (8001b94 <HAL_DMA_Init+0x158>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d107      	bne.n	8001b04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afc:	4313      	orrs	r3, r2
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f023 0307 	bic.w	r3, r3, #7
 8001b1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d117      	bne.n	8001b5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00e      	beq.n	8001b5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fb01 	bl	8002148 <DMA_CheckFifoParam>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2240      	movs	r2, #64	@ 0x40
 8001b50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e016      	b.n	8001b8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fab8 	bl	80020dc <DMA_CalcBaseAndBitshift>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b74:	223f      	movs	r2, #63	@ 0x3f
 8001b76:	409a      	lsls	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	f010803f 	.word	0xf010803f

08001b98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_DMA_Start_IT+0x26>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e040      	b.n	8001c40 <HAL_DMA_Start_IT+0xa8>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d12f      	bne.n	8001c32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 fa4a 	bl	8002080 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf0:	223f      	movs	r2, #63	@ 0x3f
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0216 	orr.w	r2, r2, #22
 8001c06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d007      	beq.n	8001c20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0208 	orr.w	r2, r2, #8
 8001c1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	e005      	b.n	8001c3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c56:	f7ff f889 	bl	8000d6c <HAL_GetTick>
 8001c5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d008      	beq.n	8001c7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2280      	movs	r2, #128	@ 0x80
 8001c6c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e052      	b.n	8001d20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0216 	bic.w	r2, r2, #22
 8001c88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695a      	ldr	r2, [r3, #20]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d103      	bne.n	8001caa <HAL_DMA_Abort+0x62>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d007      	beq.n	8001cba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0208 	bic.w	r2, r2, #8
 8001cb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0201 	bic.w	r2, r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cca:	e013      	b.n	8001cf4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ccc:	f7ff f84e 	bl	8000d6c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b05      	cmp	r3, #5
 8001cd8:	d90c      	bls.n	8001cf4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e015      	b.n	8001d20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1e4      	bne.n	8001ccc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d06:	223f      	movs	r2, #63	@ 0x3f
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d004      	beq.n	8001d46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2280      	movs	r2, #128	@ 0x80
 8001d40:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00c      	b.n	8001d60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2205      	movs	r2, #5
 8001d4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0201 	bic.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d78:	4b8e      	ldr	r3, [pc, #568]	@ (8001fb4 <HAL_DMA_IRQHandler+0x248>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a8e      	ldr	r2, [pc, #568]	@ (8001fb8 <HAL_DMA_IRQHandler+0x24c>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	0a9b      	lsrs	r3, r3, #10
 8001d84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d96:	2208      	movs	r2, #8
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d01a      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0204 	bic.w	r2, r2, #4
 8001dbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd0:	f043 0201 	orr.w	r2, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ddc:	2201      	movs	r2, #1
 8001dde:	409a      	lsls	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d012      	beq.n	8001e0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00b      	beq.n	8001e0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e06:	f043 0202 	orr.w	r2, r3, #2
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e12:	2204      	movs	r2, #4
 8001e14:	409a      	lsls	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d012      	beq.n	8001e44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00b      	beq.n	8001e44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e30:	2204      	movs	r2, #4
 8001e32:	409a      	lsls	r2, r3
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3c:	f043 0204 	orr.w	r2, r3, #4
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e48:	2210      	movs	r2, #16
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d043      	beq.n	8001edc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d03c      	beq.n	8001edc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e66:	2210      	movs	r2, #16
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d018      	beq.n	8001eae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d108      	bne.n	8001e9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d024      	beq.n	8001edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	4798      	blx	r3
 8001e9a:	e01f      	b.n	8001edc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d01b      	beq.n	8001edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	4798      	blx	r3
 8001eac:	e016      	b.n	8001edc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d107      	bne.n	8001ecc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0208 	bic.w	r2, r2, #8
 8001eca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 808f 	beq.w	800200c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 8087 	beq.w	800200c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f02:	2220      	movs	r2, #32
 8001f04:	409a      	lsls	r2, r3
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b05      	cmp	r3, #5
 8001f14:	d136      	bne.n	8001f84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0216 	bic.w	r2, r2, #22
 8001f24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d103      	bne.n	8001f46 <HAL_DMA_IRQHandler+0x1da>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0208 	bic.w	r2, r2, #8
 8001f54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5a:	223f      	movs	r2, #63	@ 0x3f
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d07e      	beq.n	8002078 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	4798      	blx	r3
        }
        return;
 8001f82:	e079      	b.n	8002078 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d01d      	beq.n	8001fce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10d      	bne.n	8001fbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d031      	beq.n	800200c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	4798      	blx	r3
 8001fb0:	e02c      	b.n	800200c <HAL_DMA_IRQHandler+0x2a0>
 8001fb2:	bf00      	nop
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d023      	beq.n	800200c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	4798      	blx	r3
 8001fcc:	e01e      	b.n	800200c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10f      	bne.n	8001ffc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0210 	bic.w	r2, r2, #16
 8001fea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002010:	2b00      	cmp	r3, #0
 8002012:	d032      	beq.n	800207a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d022      	beq.n	8002066 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2205      	movs	r2, #5
 8002024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	3301      	adds	r3, #1
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	429a      	cmp	r2, r3
 8002042:	d307      	bcc.n	8002054 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f2      	bne.n	8002038 <HAL_DMA_IRQHandler+0x2cc>
 8002052:	e000      	b.n	8002056 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002054:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	4798      	blx	r3
 8002076:	e000      	b.n	800207a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002078:	bf00      	nop
    }
  }
}
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800209c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b40      	cmp	r3, #64	@ 0x40
 80020ac:	d108      	bne.n	80020c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020be:	e007      	b.n	80020d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	60da      	str	r2, [r3, #12]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	3b10      	subs	r3, #16
 80020ec:	4a14      	ldr	r2, [pc, #80]	@ (8002140 <DMA_CalcBaseAndBitshift+0x64>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	091b      	lsrs	r3, r3, #4
 80020f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020f6:	4a13      	ldr	r2, [pc, #76]	@ (8002144 <DMA_CalcBaseAndBitshift+0x68>)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b03      	cmp	r3, #3
 8002108:	d909      	bls.n	800211e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002112:	f023 0303 	bic.w	r3, r3, #3
 8002116:	1d1a      	adds	r2, r3, #4
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	659a      	str	r2, [r3, #88]	@ 0x58
 800211c:	e007      	b.n	800212e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002126:	f023 0303 	bic.w	r3, r3, #3
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	aaaaaaab 	.word	0xaaaaaaab
 8002144:	08004d34 	.word	0x08004d34

08002148 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002158:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d11f      	bne.n	80021a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b03      	cmp	r3, #3
 8002166:	d856      	bhi.n	8002216 <DMA_CheckFifoParam+0xce>
 8002168:	a201      	add	r2, pc, #4	@ (adr r2, 8002170 <DMA_CheckFifoParam+0x28>)
 800216a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216e:	bf00      	nop
 8002170:	08002181 	.word	0x08002181
 8002174:	08002193 	.word	0x08002193
 8002178:	08002181 	.word	0x08002181
 800217c:	08002217 	.word	0x08002217
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002184:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d046      	beq.n	800221a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002190:	e043      	b.n	800221a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002196:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800219a:	d140      	bne.n	800221e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a0:	e03d      	b.n	800221e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021aa:	d121      	bne.n	80021f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d837      	bhi.n	8002222 <DMA_CheckFifoParam+0xda>
 80021b2:	a201      	add	r2, pc, #4	@ (adr r2, 80021b8 <DMA_CheckFifoParam+0x70>)
 80021b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b8:	080021c9 	.word	0x080021c9
 80021bc:	080021cf 	.word	0x080021cf
 80021c0:	080021c9 	.word	0x080021c9
 80021c4:	080021e1 	.word	0x080021e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
      break;
 80021cc:	e030      	b.n	8002230 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d025      	beq.n	8002226 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021de:	e022      	b.n	8002226 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021e8:	d11f      	bne.n	800222a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021ee:	e01c      	b.n	800222a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d903      	bls.n	80021fe <DMA_CheckFifoParam+0xb6>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d003      	beq.n	8002204 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021fc:	e018      	b.n	8002230 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	73fb      	strb	r3, [r7, #15]
      break;
 8002202:	e015      	b.n	8002230 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002208:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00e      	beq.n	800222e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
      break;
 8002214:	e00b      	b.n	800222e <DMA_CheckFifoParam+0xe6>
      break;
 8002216:	bf00      	nop
 8002218:	e00a      	b.n	8002230 <DMA_CheckFifoParam+0xe8>
      break;
 800221a:	bf00      	nop
 800221c:	e008      	b.n	8002230 <DMA_CheckFifoParam+0xe8>
      break;
 800221e:	bf00      	nop
 8002220:	e006      	b.n	8002230 <DMA_CheckFifoParam+0xe8>
      break;
 8002222:	bf00      	nop
 8002224:	e004      	b.n	8002230 <DMA_CheckFifoParam+0xe8>
      break;
 8002226:	bf00      	nop
 8002228:	e002      	b.n	8002230 <DMA_CheckFifoParam+0xe8>
      break;   
 800222a:	bf00      	nop
 800222c:	e000      	b.n	8002230 <DMA_CheckFifoParam+0xe8>
      break;
 800222e:	bf00      	nop
    }
  } 
  
  return status; 
 8002230:	7bfb      	ldrb	r3, [r7, #15]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	@ 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	e159      	b.n	8002510 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800225c:	2201      	movs	r2, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	429a      	cmp	r2, r3
 8002276:	f040 8148 	bne.w	800250a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	2b01      	cmp	r3, #1
 8002284:	d005      	beq.n	8002292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800228e:	2b02      	cmp	r3, #2
 8002290:	d130      	bne.n	80022f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	2203      	movs	r2, #3
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c8:	2201      	movs	r2, #1
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	f003 0201 	and.w	r2, r3, #1
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d017      	beq.n	8002330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2203      	movs	r2, #3
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d123      	bne.n	8002384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	08da      	lsrs	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3208      	adds	r2, #8
 8002344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	220f      	movs	r2, #15
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	08da      	lsrs	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3208      	adds	r2, #8
 800237e:	69b9      	ldr	r1, [r7, #24]
 8002380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0203 	and.w	r2, r3, #3
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80a2 	beq.w	800250a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b57      	ldr	r3, [pc, #348]	@ (8002528 <HAL_GPIO_Init+0x2e8>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ce:	4a56      	ldr	r2, [pc, #344]	@ (8002528 <HAL_GPIO_Init+0x2e8>)
 80023d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023d6:	4b54      	ldr	r3, [pc, #336]	@ (8002528 <HAL_GPIO_Init+0x2e8>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023e2:	4a52      	ldr	r2, [pc, #328]	@ (800252c <HAL_GPIO_Init+0x2ec>)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	3302      	adds	r3, #2
 80023ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	220f      	movs	r2, #15
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a49      	ldr	r2, [pc, #292]	@ (8002530 <HAL_GPIO_Init+0x2f0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d019      	beq.n	8002442 <HAL_GPIO_Init+0x202>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a48      	ldr	r2, [pc, #288]	@ (8002534 <HAL_GPIO_Init+0x2f4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d013      	beq.n	800243e <HAL_GPIO_Init+0x1fe>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a47      	ldr	r2, [pc, #284]	@ (8002538 <HAL_GPIO_Init+0x2f8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00d      	beq.n	800243a <HAL_GPIO_Init+0x1fa>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a46      	ldr	r2, [pc, #280]	@ (800253c <HAL_GPIO_Init+0x2fc>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d007      	beq.n	8002436 <HAL_GPIO_Init+0x1f6>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a45      	ldr	r2, [pc, #276]	@ (8002540 <HAL_GPIO_Init+0x300>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d101      	bne.n	8002432 <HAL_GPIO_Init+0x1f2>
 800242e:	2304      	movs	r3, #4
 8002430:	e008      	b.n	8002444 <HAL_GPIO_Init+0x204>
 8002432:	2307      	movs	r3, #7
 8002434:	e006      	b.n	8002444 <HAL_GPIO_Init+0x204>
 8002436:	2303      	movs	r3, #3
 8002438:	e004      	b.n	8002444 <HAL_GPIO_Init+0x204>
 800243a:	2302      	movs	r3, #2
 800243c:	e002      	b.n	8002444 <HAL_GPIO_Init+0x204>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <HAL_GPIO_Init+0x204>
 8002442:	2300      	movs	r3, #0
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	f002 0203 	and.w	r2, r2, #3
 800244a:	0092      	lsls	r2, r2, #2
 800244c:	4093      	lsls	r3, r2
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002454:	4935      	ldr	r1, [pc, #212]	@ (800252c <HAL_GPIO_Init+0x2ec>)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	089b      	lsrs	r3, r3, #2
 800245a:	3302      	adds	r3, #2
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002462:	4b38      	ldr	r3, [pc, #224]	@ (8002544 <HAL_GPIO_Init+0x304>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002486:	4a2f      	ldr	r2, [pc, #188]	@ (8002544 <HAL_GPIO_Init+0x304>)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800248c:	4b2d      	ldr	r3, [pc, #180]	@ (8002544 <HAL_GPIO_Init+0x304>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024b0:	4a24      	ldr	r2, [pc, #144]	@ (8002544 <HAL_GPIO_Init+0x304>)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024b6:	4b23      	ldr	r3, [pc, #140]	@ (8002544 <HAL_GPIO_Init+0x304>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024da:	4a1a      	ldr	r2, [pc, #104]	@ (8002544 <HAL_GPIO_Init+0x304>)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e0:	4b18      	ldr	r3, [pc, #96]	@ (8002544 <HAL_GPIO_Init+0x304>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002504:	4a0f      	ldr	r2, [pc, #60]	@ (8002544 <HAL_GPIO_Init+0x304>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3301      	adds	r3, #1
 800250e:	61fb      	str	r3, [r7, #28]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	2b0f      	cmp	r3, #15
 8002514:	f67f aea2 	bls.w	800225c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	3724      	adds	r7, #36	@ 0x24
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800
 800252c:	40013800 	.word	0x40013800
 8002530:	40020000 	.word	0x40020000
 8002534:	40020400 	.word	0x40020400
 8002538:	40020800 	.word	0x40020800
 800253c:	40020c00 	.word	0x40020c00
 8002540:	40021000 	.word	0x40021000
 8002544:	40013c00 	.word	0x40013c00

08002548 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e267      	b.n	8002a2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d075      	beq.n	8002652 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002566:	4b88      	ldr	r3, [pc, #544]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b04      	cmp	r3, #4
 8002570:	d00c      	beq.n	800258c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002572:	4b85      	ldr	r3, [pc, #532]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800257a:	2b08      	cmp	r3, #8
 800257c:	d112      	bne.n	80025a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800257e:	4b82      	ldr	r3, [pc, #520]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002586:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800258a:	d10b      	bne.n	80025a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258c:	4b7e      	ldr	r3, [pc, #504]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d05b      	beq.n	8002650 <HAL_RCC_OscConfig+0x108>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d157      	bne.n	8002650 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e242      	b.n	8002a2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ac:	d106      	bne.n	80025bc <HAL_RCC_OscConfig+0x74>
 80025ae:	4b76      	ldr	r3, [pc, #472]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a75      	ldr	r2, [pc, #468]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 80025b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	e01d      	b.n	80025f8 <HAL_RCC_OscConfig+0xb0>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x98>
 80025c6:	4b70      	ldr	r3, [pc, #448]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a6f      	ldr	r2, [pc, #444]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 80025cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a6c      	ldr	r2, [pc, #432]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 80025d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e00b      	b.n	80025f8 <HAL_RCC_OscConfig+0xb0>
 80025e0:	4b69      	ldr	r3, [pc, #420]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a68      	ldr	r2, [pc, #416]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 80025e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	4b66      	ldr	r3, [pc, #408]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a65      	ldr	r2, [pc, #404]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 80025f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d013      	beq.n	8002628 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe fbb4 	bl	8000d6c <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002608:	f7fe fbb0 	bl	8000d6c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	@ 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e207      	b.n	8002a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	4b5b      	ldr	r3, [pc, #364]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0xc0>
 8002626:	e014      	b.n	8002652 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7fe fba0 	bl	8000d6c <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002630:	f7fe fb9c 	bl	8000d6c <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	@ 0x64
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e1f3      	b.n	8002a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002642:	4b51      	ldr	r3, [pc, #324]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0xe8>
 800264e:	e000      	b.n	8002652 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d063      	beq.n	8002726 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800265e:	4b4a      	ldr	r3, [pc, #296]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00b      	beq.n	8002682 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800266a:	4b47      	ldr	r3, [pc, #284]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002672:	2b08      	cmp	r3, #8
 8002674:	d11c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002676:	4b44      	ldr	r3, [pc, #272]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d116      	bne.n	80026b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002682:	4b41      	ldr	r3, [pc, #260]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <HAL_RCC_OscConfig+0x152>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d001      	beq.n	800269a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e1c7      	b.n	8002a2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269a:	4b3b      	ldr	r3, [pc, #236]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4937      	ldr	r1, [pc, #220]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ae:	e03a      	b.n	8002726 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d020      	beq.n	80026fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b8:	4b34      	ldr	r3, [pc, #208]	@ (800278c <HAL_RCC_OscConfig+0x244>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026be:	f7fe fb55 	bl	8000d6c <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c6:	f7fe fb51 	bl	8000d6c <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e1a8      	b.n	8002a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e4:	4b28      	ldr	r3, [pc, #160]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4925      	ldr	r1, [pc, #148]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	600b      	str	r3, [r1, #0]
 80026f8:	e015      	b.n	8002726 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fa:	4b24      	ldr	r3, [pc, #144]	@ (800278c <HAL_RCC_OscConfig+0x244>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7fe fb34 	bl	8000d6c <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002708:	f7fe fb30 	bl	8000d6c <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e187      	b.n	8002a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271a:	4b1b      	ldr	r3, [pc, #108]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d036      	beq.n	80027a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d016      	beq.n	8002768 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273a:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <HAL_RCC_OscConfig+0x248>)
 800273c:	2201      	movs	r2, #1
 800273e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002740:	f7fe fb14 	bl	8000d6c <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002748:	f7fe fb10 	bl	8000d6c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e167      	b.n	8002a2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275a:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <HAL_RCC_OscConfig+0x240>)
 800275c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0x200>
 8002766:	e01b      	b.n	80027a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002768:	4b09      	ldr	r3, [pc, #36]	@ (8002790 <HAL_RCC_OscConfig+0x248>)
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276e:	f7fe fafd 	bl	8000d6c <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002774:	e00e      	b.n	8002794 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002776:	f7fe faf9 	bl	8000d6c <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d907      	bls.n	8002794 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e150      	b.n	8002a2a <HAL_RCC_OscConfig+0x4e2>
 8002788:	40023800 	.word	0x40023800
 800278c:	42470000 	.word	0x42470000
 8002790:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002794:	4b88      	ldr	r3, [pc, #544]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 8002796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1ea      	bne.n	8002776 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 8097 	beq.w	80028dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ae:	2300      	movs	r3, #0
 80027b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b2:	4b81      	ldr	r3, [pc, #516]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10f      	bne.n	80027de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	4b7d      	ldr	r3, [pc, #500]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	4a7c      	ldr	r2, [pc, #496]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 80027c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ce:	4b7a      	ldr	r3, [pc, #488]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027da:	2301      	movs	r3, #1
 80027dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027de:	4b77      	ldr	r3, [pc, #476]	@ (80029bc <HAL_RCC_OscConfig+0x474>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d118      	bne.n	800281c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ea:	4b74      	ldr	r3, [pc, #464]	@ (80029bc <HAL_RCC_OscConfig+0x474>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a73      	ldr	r2, [pc, #460]	@ (80029bc <HAL_RCC_OscConfig+0x474>)
 80027f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f6:	f7fe fab9 	bl	8000d6c <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fe:	f7fe fab5 	bl	8000d6c <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e10c      	b.n	8002a2a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002810:	4b6a      	ldr	r3, [pc, #424]	@ (80029bc <HAL_RCC_OscConfig+0x474>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d106      	bne.n	8002832 <HAL_RCC_OscConfig+0x2ea>
 8002824:	4b64      	ldr	r3, [pc, #400]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002828:	4a63      	ldr	r2, [pc, #396]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002830:	e01c      	b.n	800286c <HAL_RCC_OscConfig+0x324>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b05      	cmp	r3, #5
 8002838:	d10c      	bne.n	8002854 <HAL_RCC_OscConfig+0x30c>
 800283a:	4b5f      	ldr	r3, [pc, #380]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283e:	4a5e      	ldr	r2, [pc, #376]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 8002840:	f043 0304 	orr.w	r3, r3, #4
 8002844:	6713      	str	r3, [r2, #112]	@ 0x70
 8002846:	4b5c      	ldr	r3, [pc, #368]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284a:	4a5b      	ldr	r2, [pc, #364]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6713      	str	r3, [r2, #112]	@ 0x70
 8002852:	e00b      	b.n	800286c <HAL_RCC_OscConfig+0x324>
 8002854:	4b58      	ldr	r3, [pc, #352]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002858:	4a57      	ldr	r2, [pc, #348]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002860:	4b55      	ldr	r3, [pc, #340]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002864:	4a54      	ldr	r2, [pc, #336]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 8002866:	f023 0304 	bic.w	r3, r3, #4
 800286a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d015      	beq.n	80028a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002874:	f7fe fa7a 	bl	8000d6c <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287a:	e00a      	b.n	8002892 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287c:	f7fe fa76 	bl	8000d6c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288a:	4293      	cmp	r3, r2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e0cb      	b.n	8002a2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002892:	4b49      	ldr	r3, [pc, #292]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0ee      	beq.n	800287c <HAL_RCC_OscConfig+0x334>
 800289e:	e014      	b.n	80028ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a0:	f7fe fa64 	bl	8000d6c <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a6:	e00a      	b.n	80028be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a8:	f7fe fa60 	bl	8000d6c <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e0b5      	b.n	8002a2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028be:	4b3e      	ldr	r3, [pc, #248]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 80028c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1ee      	bne.n	80028a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028ca:	7dfb      	ldrb	r3, [r7, #23]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d105      	bne.n	80028dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d0:	4b39      	ldr	r3, [pc, #228]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 80028d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d4:	4a38      	ldr	r2, [pc, #224]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 80028d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80a1 	beq.w	8002a28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028e6:	4b34      	ldr	r3, [pc, #208]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d05c      	beq.n	80029ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d141      	bne.n	800297e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fa:	4b31      	ldr	r3, [pc, #196]	@ (80029c0 <HAL_RCC_OscConfig+0x478>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7fe fa34 	bl	8000d6c <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002908:	f7fe fa30 	bl	8000d6c <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e087      	b.n	8002a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291a:	4b27      	ldr	r3, [pc, #156]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69da      	ldr	r2, [r3, #28]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	019b      	lsls	r3, r3, #6
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293c:	085b      	lsrs	r3, r3, #1
 800293e:	3b01      	subs	r3, #1
 8002940:	041b      	lsls	r3, r3, #16
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002948:	061b      	lsls	r3, r3, #24
 800294a:	491b      	ldr	r1, [pc, #108]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002950:	4b1b      	ldr	r3, [pc, #108]	@ (80029c0 <HAL_RCC_OscConfig+0x478>)
 8002952:	2201      	movs	r2, #1
 8002954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002956:	f7fe fa09 	bl	8000d6c <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295e:	f7fe fa05 	bl	8000d6c <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e05c      	b.n	8002a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002970:	4b11      	ldr	r3, [pc, #68]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0f0      	beq.n	800295e <HAL_RCC_OscConfig+0x416>
 800297c:	e054      	b.n	8002a28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297e:	4b10      	ldr	r3, [pc, #64]	@ (80029c0 <HAL_RCC_OscConfig+0x478>)
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7fe f9f2 	bl	8000d6c <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298c:	f7fe f9ee 	bl	8000d6c <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e045      	b.n	8002a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <HAL_RCC_OscConfig+0x470>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x444>
 80029aa:	e03d      	b.n	8002a28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d107      	bne.n	80029c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e038      	b.n	8002a2a <HAL_RCC_OscConfig+0x4e2>
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40007000 	.word	0x40007000
 80029c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a34 <HAL_RCC_OscConfig+0x4ec>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d028      	beq.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d121      	bne.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d11a      	bne.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029f4:	4013      	ands	r3, r2
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d111      	bne.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0a:	085b      	lsrs	r3, r3, #1
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d107      	bne.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800

08002a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0cc      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a4c:	4b68      	ldr	r3, [pc, #416]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d90c      	bls.n	8002a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5a:	4b65      	ldr	r3, [pc, #404]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	4b63      	ldr	r3, [pc, #396]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0b8      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d020      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a8c:	4b59      	ldr	r3, [pc, #356]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4a58      	ldr	r2, [pc, #352]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa4:	4b53      	ldr	r3, [pc, #332]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	4a52      	ldr	r2, [pc, #328]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab0:	4b50      	ldr	r3, [pc, #320]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	494d      	ldr	r1, [pc, #308]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d044      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b47      	ldr	r3, [pc, #284]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d119      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e07f      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d003      	beq.n	8002af6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af6:	4b3f      	ldr	r3, [pc, #252]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d109      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e06f      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b06:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e067      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b16:	4b37      	ldr	r3, [pc, #220]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f023 0203 	bic.w	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4934      	ldr	r1, [pc, #208]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b28:	f7fe f920 	bl	8000d6c <HAL_GetTick>
 8002b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2e:	e00a      	b.n	8002b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b30:	f7fe f91c 	bl	8000d6c <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e04f      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b46:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 020c 	and.w	r2, r3, #12
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d1eb      	bne.n	8002b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b58:	4b25      	ldr	r3, [pc, #148]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d20c      	bcs.n	8002b80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b66:	4b22      	ldr	r3, [pc, #136]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	4b20      	ldr	r3, [pc, #128]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e032      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b8c:	4b19      	ldr	r3, [pc, #100]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4916      	ldr	r1, [pc, #88]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002baa:	4b12      	ldr	r3, [pc, #72]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	490e      	ldr	r1, [pc, #56]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bbe:	f000 f821 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	490a      	ldr	r1, [pc, #40]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd0:	5ccb      	ldrb	r3, [r1, r3]
 8002bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd6:	4a09      	ldr	r2, [pc, #36]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bda:	4b09      	ldr	r3, [pc, #36]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe f880 	bl	8000ce4 <HAL_InitTick>

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023c00 	.word	0x40023c00
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	08004d1c 	.word	0x08004d1c
 8002bfc:	20000000 	.word	0x20000000
 8002c00:	20000004 	.word	0x20000004

08002c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c08:	b094      	sub	sp, #80	@ 0x50
 8002c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c1c:	4b79      	ldr	r3, [pc, #484]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 030c 	and.w	r3, r3, #12
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d00d      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0x40>
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	f200 80e1 	bhi.w	8002df0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x34>
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d003      	beq.n	8002c3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c36:	e0db      	b.n	8002df0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c38:	4b73      	ldr	r3, [pc, #460]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c3c:	e0db      	b.n	8002df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c3e:	4b73      	ldr	r3, [pc, #460]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x208>)
 8002c40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c42:	e0d8      	b.n	8002df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c44:	4b6f      	ldr	r3, [pc, #444]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c4c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c4e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d063      	beq.n	8002d22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5a:	4b6a      	ldr	r3, [pc, #424]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	099b      	lsrs	r3, r3, #6
 8002c60:	2200      	movs	r2, #0
 8002c62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c64:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c6e:	2300      	movs	r3, #0
 8002c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c76:	4622      	mov	r2, r4
 8002c78:	462b      	mov	r3, r5
 8002c7a:	f04f 0000 	mov.w	r0, #0
 8002c7e:	f04f 0100 	mov.w	r1, #0
 8002c82:	0159      	lsls	r1, r3, #5
 8002c84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c88:	0150      	lsls	r0, r2, #5
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4621      	mov	r1, r4
 8002c90:	1a51      	subs	r1, r2, r1
 8002c92:	6139      	str	r1, [r7, #16]
 8002c94:	4629      	mov	r1, r5
 8002c96:	eb63 0301 	sbc.w	r3, r3, r1
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ca8:	4659      	mov	r1, fp
 8002caa:	018b      	lsls	r3, r1, #6
 8002cac:	4651      	mov	r1, sl
 8002cae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cb2:	4651      	mov	r1, sl
 8002cb4:	018a      	lsls	r2, r1, #6
 8002cb6:	4651      	mov	r1, sl
 8002cb8:	ebb2 0801 	subs.w	r8, r2, r1
 8002cbc:	4659      	mov	r1, fp
 8002cbe:	eb63 0901 	sbc.w	r9, r3, r1
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cd6:	4690      	mov	r8, r2
 8002cd8:	4699      	mov	r9, r3
 8002cda:	4623      	mov	r3, r4
 8002cdc:	eb18 0303 	adds.w	r3, r8, r3
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	462b      	mov	r3, r5
 8002ce4:	eb49 0303 	adc.w	r3, r9, r3
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cf6:	4629      	mov	r1, r5
 8002cf8:	024b      	lsls	r3, r1, #9
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d00:	4621      	mov	r1, r4
 8002d02:	024a      	lsls	r2, r1, #9
 8002d04:	4610      	mov	r0, r2
 8002d06:	4619      	mov	r1, r3
 8002d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d14:	f7fd fab4 	bl	8000280 <__aeabi_uldivmod>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d20:	e058      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d22:	4b38      	ldr	r3, [pc, #224]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	099b      	lsrs	r3, r3, #6
 8002d28:	2200      	movs	r2, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d32:	623b      	str	r3, [r7, #32]
 8002d34:	2300      	movs	r3, #0
 8002d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d3c:	4642      	mov	r2, r8
 8002d3e:	464b      	mov	r3, r9
 8002d40:	f04f 0000 	mov.w	r0, #0
 8002d44:	f04f 0100 	mov.w	r1, #0
 8002d48:	0159      	lsls	r1, r3, #5
 8002d4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d4e:	0150      	lsls	r0, r2, #5
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4641      	mov	r1, r8
 8002d56:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d5a:	4649      	mov	r1, r9
 8002d5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d74:	ebb2 040a 	subs.w	r4, r2, sl
 8002d78:	eb63 050b 	sbc.w	r5, r3, fp
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	00eb      	lsls	r3, r5, #3
 8002d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d8a:	00e2      	lsls	r2, r4, #3
 8002d8c:	4614      	mov	r4, r2
 8002d8e:	461d      	mov	r5, r3
 8002d90:	4643      	mov	r3, r8
 8002d92:	18e3      	adds	r3, r4, r3
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	464b      	mov	r3, r9
 8002d98:	eb45 0303 	adc.w	r3, r5, r3
 8002d9c:	607b      	str	r3, [r7, #4]
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002daa:	4629      	mov	r1, r5
 8002dac:	028b      	lsls	r3, r1, #10
 8002dae:	4621      	mov	r1, r4
 8002db0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002db4:	4621      	mov	r1, r4
 8002db6:	028a      	lsls	r2, r1, #10
 8002db8:	4610      	mov	r0, r2
 8002dba:	4619      	mov	r1, r3
 8002dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	61fa      	str	r2, [r7, #28]
 8002dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dc8:	f7fd fa5a 	bl	8000280 <__aeabi_uldivmod>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	0c1b      	lsrs	r3, r3, #16
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	3301      	adds	r3, #1
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002de4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002de6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dee:	e002      	b.n	8002df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df0:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002df2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002df6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3750      	adds	r7, #80	@ 0x50
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800
 8002e08:	00f42400 	.word	0x00f42400
 8002e0c:	007a1200 	.word	0x007a1200

08002e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e14:	4b03      	ldr	r3, [pc, #12]	@ (8002e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e16:	681b      	ldr	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000000 	.word	0x20000000

08002e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e2c:	f7ff fff0 	bl	8002e10 <HAL_RCC_GetHCLKFreq>
 8002e30:	4602      	mov	r2, r0
 8002e32:	4b05      	ldr	r3, [pc, #20]	@ (8002e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	0a9b      	lsrs	r3, r3, #10
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	4903      	ldr	r1, [pc, #12]	@ (8002e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e3e:	5ccb      	ldrb	r3, [r1, r3]
 8002e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	08004d2c 	.word	0x08004d2c

08002e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e54:	f7ff ffdc 	bl	8002e10 <HAL_RCC_GetHCLKFreq>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4b05      	ldr	r3, [pc, #20]	@ (8002e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	0b5b      	lsrs	r3, r3, #13
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	4903      	ldr	r1, [pc, #12]	@ (8002e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e66:	5ccb      	ldrb	r3, [r1, r3]
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40023800 	.word	0x40023800
 8002e74:	08004d2c 	.word	0x08004d2c

08002e78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e042      	b.n	8002f10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d106      	bne.n	8002ea4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fd fe84 	bl	8000bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2224      	movs	r2, #36	@ 0x24
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fd69 	bl	8003994 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ed0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ee0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ef0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	@ 0x28
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	4613      	mov	r3, r2
 8002f26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d175      	bne.n	8003024 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <HAL_UART_Transmit+0x2c>
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e06e      	b.n	8003026 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2221      	movs	r2, #33	@ 0x21
 8002f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f56:	f7fd ff09 	bl	8000d6c <HAL_GetTick>
 8002f5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	88fa      	ldrh	r2, [r7, #6]
 8002f60:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	88fa      	ldrh	r2, [r7, #6]
 8002f66:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f70:	d108      	bne.n	8002f84 <HAL_UART_Transmit+0x6c>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d104      	bne.n	8002f84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	e003      	b.n	8002f8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f8c:	e02e      	b.n	8002fec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2200      	movs	r2, #0
 8002f96:	2180      	movs	r1, #128	@ 0x80
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 fb05 	bl	80035a8 <UART_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e03a      	b.n	8003026 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10b      	bne.n	8002fce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	3302      	adds	r3, #2
 8002fca:	61bb      	str	r3, [r7, #24]
 8002fcc:	e007      	b.n	8002fde <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	781a      	ldrb	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1cb      	bne.n	8002f8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2140      	movs	r1, #64	@ 0x40
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fad1 	bl	80035a8 <UART_WaitOnFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e006      	b.n	8003026 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	e000      	b.n	8003026 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003024:	2302      	movs	r3, #2
  }
}
 8003026:	4618      	mov	r0, r3
 8003028:	3720      	adds	r7, #32
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b0ba      	sub	sp, #232	@ 0xe8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800305c:	2300      	movs	r3, #0
 800305e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800306e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10f      	bne.n	8003096 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b00      	cmp	r3, #0
 8003080:	d009      	beq.n	8003096 <HAL_UART_IRQHandler+0x66>
 8003082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fbc2 	bl	8003818 <UART_Receive_IT>
      return;
 8003094:	e25b      	b.n	800354e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003096:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 80de 	beq.w	800325c <HAL_UART_IRQHandler+0x22c>
 80030a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d106      	bne.n	80030ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80d1 	beq.w	800325c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <HAL_UART_IRQHandler+0xae>
 80030c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d6:	f043 0201 	orr.w	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <HAL_UART_IRQHandler+0xd2>
 80030ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fa:	f043 0202 	orr.w	r2, r3, #2
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00b      	beq.n	8003126 <HAL_UART_IRQHandler+0xf6>
 800310e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311e:	f043 0204 	orr.w	r2, r3, #4
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d011      	beq.n	8003156 <HAL_UART_IRQHandler+0x126>
 8003132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b00      	cmp	r3, #0
 800313c:	d105      	bne.n	800314a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800313e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314e:	f043 0208 	orr.w	r2, r3, #8
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 81f2 	beq.w	8003544 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <HAL_UART_IRQHandler+0x14e>
 800316c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fb4d 	bl	8003818 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003188:	2b40      	cmp	r3, #64	@ 0x40
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d103      	bne.n	80031aa <HAL_UART_IRQHandler+0x17a>
 80031a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d04f      	beq.n	800324a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fa55 	bl	800365a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ba:	2b40      	cmp	r3, #64	@ 0x40
 80031bc:	d141      	bne.n	8003242 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3314      	adds	r3, #20
 80031c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031cc:	e853 3f00 	ldrex	r3, [r3]
 80031d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3314      	adds	r3, #20
 80031e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80031ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80031f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80031fa:	e841 2300 	strex	r3, r2, [r1]
 80031fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003202:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1d9      	bne.n	80031be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320e:	2b00      	cmp	r3, #0
 8003210:	d013      	beq.n	800323a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003216:	4a7e      	ldr	r2, [pc, #504]	@ (8003410 <HAL_UART_IRQHandler+0x3e0>)
 8003218:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe fd82 	bl	8001d28 <HAL_DMA_Abort_IT>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d016      	beq.n	8003258 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003234:	4610      	mov	r0, r2
 8003236:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003238:	e00e      	b.n	8003258 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f99e 	bl	800357c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003240:	e00a      	b.n	8003258 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f99a 	bl	800357c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003248:	e006      	b.n	8003258 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f996 	bl	800357c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003256:	e175      	b.n	8003544 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	bf00      	nop
    return;
 800325a:	e173      	b.n	8003544 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003260:	2b01      	cmp	r3, #1
 8003262:	f040 814f 	bne.w	8003504 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 8148 	beq.w	8003504 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003278:	f003 0310 	and.w	r3, r3, #16
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 8141 	beq.w	8003504 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a2:	2b40      	cmp	r3, #64	@ 0x40
 80032a4:	f040 80b6 	bne.w	8003414 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 8145 	beq.w	8003548 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80032c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032c6:	429a      	cmp	r2, r3
 80032c8:	f080 813e 	bcs.w	8003548 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032de:	f000 8088 	beq.w	80033f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	330c      	adds	r3, #12
 80032e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032f0:	e853 3f00 	ldrex	r3, [r3]
 80032f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80032f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003300:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	330c      	adds	r3, #12
 800330a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800330e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003312:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003316:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800331a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800331e:	e841 2300 	strex	r3, r2, [r1]
 8003322:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003326:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1d9      	bne.n	80032e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3314      	adds	r3, #20
 8003334:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003336:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003338:	e853 3f00 	ldrex	r3, [r3]
 800333c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800333e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003340:	f023 0301 	bic.w	r3, r3, #1
 8003344:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3314      	adds	r3, #20
 800334e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003352:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003356:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003358:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800335a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800335e:	e841 2300 	strex	r3, r2, [r1]
 8003362:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003364:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1e1      	bne.n	800332e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3314      	adds	r3, #20
 8003370:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003372:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003374:	e853 3f00 	ldrex	r3, [r3]
 8003378:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800337a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800337c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003380:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3314      	adds	r3, #20
 800338a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800338e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003390:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003392:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003394:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003396:	e841 2300 	strex	r3, r2, [r1]
 800339a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800339c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1e3      	bne.n	800336a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	330c      	adds	r3, #12
 80033b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033ba:	e853 3f00 	ldrex	r3, [r3]
 80033be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033c2:	f023 0310 	bic.w	r3, r3, #16
 80033c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	330c      	adds	r3, #12
 80033d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80033d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033dc:	e841 2300 	strex	r3, r2, [r1]
 80033e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e3      	bne.n	80033b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fe fc2b 	bl	8001c48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2202      	movs	r2, #2
 80033f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003400:	b29b      	uxth	r3, r3
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	b29b      	uxth	r3, r3
 8003406:	4619      	mov	r1, r3
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f8c1 	bl	8003590 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800340e:	e09b      	b.n	8003548 <HAL_UART_IRQHandler+0x518>
 8003410:	08003721 	.word	0x08003721
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800341c:	b29b      	uxth	r3, r3
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 808e 	beq.w	800354c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8089 	beq.w	800354c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	330c      	adds	r3, #12
 8003440:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800344a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800344c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003450:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	330c      	adds	r3, #12
 800345a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800345e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003460:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003464:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003466:	e841 2300 	strex	r3, r2, [r1]
 800346a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800346c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1e3      	bne.n	800343a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3314      	adds	r3, #20
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	e853 3f00 	ldrex	r3, [r3]
 8003480:	623b      	str	r3, [r7, #32]
   return(result);
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	f023 0301 	bic.w	r3, r3, #1
 8003488:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3314      	adds	r3, #20
 8003492:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003496:	633a      	str	r2, [r7, #48]	@ 0x30
 8003498:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800349c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800349e:	e841 2300 	strex	r3, r2, [r1]
 80034a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1e3      	bne.n	8003472 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	330c      	adds	r3, #12
 80034be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	e853 3f00 	ldrex	r3, [r3]
 80034c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0310 	bic.w	r3, r3, #16
 80034ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	330c      	adds	r3, #12
 80034d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80034dc:	61fa      	str	r2, [r7, #28]
 80034de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e0:	69b9      	ldr	r1, [r7, #24]
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	e841 2300 	strex	r3, r2, [r1]
 80034e8:	617b      	str	r3, [r7, #20]
   return(result);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e3      	bne.n	80034b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034fa:	4619      	mov	r1, r3
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f847 	bl	8003590 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003502:	e023      	b.n	800354c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350c:	2b00      	cmp	r3, #0
 800350e:	d009      	beq.n	8003524 <HAL_UART_IRQHandler+0x4f4>
 8003510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f913 	bl	8003748 <UART_Transmit_IT>
    return;
 8003522:	e014      	b.n	800354e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00e      	beq.n	800354e <HAL_UART_IRQHandler+0x51e>
 8003530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f953 	bl	80037e8 <UART_EndTransmit_IT>
    return;
 8003542:	e004      	b.n	800354e <HAL_UART_IRQHandler+0x51e>
    return;
 8003544:	bf00      	nop
 8003546:	e002      	b.n	800354e <HAL_UART_IRQHandler+0x51e>
      return;
 8003548:	bf00      	nop
 800354a:	e000      	b.n	800354e <HAL_UART_IRQHandler+0x51e>
      return;
 800354c:	bf00      	nop
  }
}
 800354e:	37e8      	adds	r7, #232	@ 0xe8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b8:	e03b      	b.n	8003632 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d037      	beq.n	8003632 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c2:	f7fd fbd3 	bl	8000d6c <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	6a3a      	ldr	r2, [r7, #32]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d302      	bcc.n	80035d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e03a      	b.n	8003652 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d023      	beq.n	8003632 <UART_WaitOnFlagUntilTimeout+0x8a>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b80      	cmp	r3, #128	@ 0x80
 80035ee:	d020      	beq.n	8003632 <UART_WaitOnFlagUntilTimeout+0x8a>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b40      	cmp	r3, #64	@ 0x40
 80035f4:	d01d      	beq.n	8003632 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b08      	cmp	r3, #8
 8003602:	d116      	bne.n	8003632 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f81d 	bl	800365a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2208      	movs	r2, #8
 8003624:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e00f      	b.n	8003652 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4013      	ands	r3, r2
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	429a      	cmp	r2, r3
 8003640:	bf0c      	ite	eq
 8003642:	2301      	moveq	r3, #1
 8003644:	2300      	movne	r3, #0
 8003646:	b2db      	uxtb	r3, r3
 8003648:	461a      	mov	r2, r3
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	429a      	cmp	r2, r3
 800364e:	d0b4      	beq.n	80035ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800365a:	b480      	push	{r7}
 800365c:	b095      	sub	sp, #84	@ 0x54
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	330c      	adds	r3, #12
 8003668:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366c:	e853 3f00 	ldrex	r3, [r3]
 8003670:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003674:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003678:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	330c      	adds	r3, #12
 8003680:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003682:	643a      	str	r2, [r7, #64]	@ 0x40
 8003684:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003686:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003688:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800368a:	e841 2300 	strex	r3, r2, [r1]
 800368e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1e5      	bne.n	8003662 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3314      	adds	r3, #20
 800369c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	e853 3f00 	ldrex	r3, [r3]
 80036a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3314      	adds	r3, #20
 80036b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036be:	e841 2300 	strex	r3, r2, [r1]
 80036c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1e5      	bne.n	8003696 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d119      	bne.n	8003706 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	330c      	adds	r3, #12
 80036d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f023 0310 	bic.w	r3, r3, #16
 80036e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	330c      	adds	r3, #12
 80036f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036f2:	61ba      	str	r2, [r7, #24]
 80036f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f6:	6979      	ldr	r1, [r7, #20]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	e841 2300 	strex	r3, r2, [r1]
 80036fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1e5      	bne.n	80036d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003714:	bf00      	nop
 8003716:	3754      	adds	r7, #84	@ 0x54
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f7ff ff1e 	bl	800357c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b21      	cmp	r3, #33	@ 0x21
 800375a:	d13e      	bne.n	80037da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003764:	d114      	bne.n	8003790 <UART_Transmit_IT+0x48>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d110      	bne.n	8003790 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003782:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	1c9a      	adds	r2, r3, #2
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	621a      	str	r2, [r3, #32]
 800378e:	e008      	b.n	80037a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	1c59      	adds	r1, r3, #1
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6211      	str	r1, [r2, #32]
 800379a:	781a      	ldrb	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	4619      	mov	r1, r3
 80037b0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10f      	bne.n	80037d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	e000      	b.n	80037dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037da:	2302      	movs	r3, #2
  }
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff fea3 	bl	8003554 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08c      	sub	sp, #48	@ 0x30
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b22      	cmp	r3, #34	@ 0x22
 800382a:	f040 80ae 	bne.w	800398a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003836:	d117      	bne.n	8003868 <UART_Receive_IT+0x50>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d113      	bne.n	8003868 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003840:	2300      	movs	r3, #0
 8003842:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003848:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	b29b      	uxth	r3, r3
 8003852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003856:	b29a      	uxth	r2, r3
 8003858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003860:	1c9a      	adds	r2, r3, #2
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	629a      	str	r2, [r3, #40]	@ 0x28
 8003866:	e026      	b.n	80038b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800386e:	2300      	movs	r3, #0
 8003870:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800387a:	d007      	beq.n	800388c <UART_Receive_IT+0x74>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10a      	bne.n	800389a <UART_Receive_IT+0x82>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d106      	bne.n	800389a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	b2da      	uxtb	r2, r3
 8003894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003896:	701a      	strb	r2, [r3, #0]
 8003898:	e008      	b.n	80038ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29b      	uxth	r3, r3
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	4619      	mov	r1, r3
 80038c4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d15d      	bne.n	8003986 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0220 	bic.w	r2, r2, #32
 80038d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0201 	bic.w	r2, r2, #1
 80038f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390c:	2b01      	cmp	r3, #1
 800390e:	d135      	bne.n	800397c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	330c      	adds	r3, #12
 800391c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	613b      	str	r3, [r7, #16]
   return(result);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f023 0310 	bic.w	r3, r3, #16
 800392c:	627b      	str	r3, [r7, #36]	@ 0x24
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	330c      	adds	r3, #12
 8003934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003936:	623a      	str	r2, [r7, #32]
 8003938:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	69f9      	ldr	r1, [r7, #28]
 800393c:	6a3a      	ldr	r2, [r7, #32]
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	61bb      	str	r3, [r7, #24]
   return(result);
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e5      	bne.n	8003916 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2b10      	cmp	r3, #16
 8003956:	d10a      	bne.n	800396e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003972:	4619      	mov	r1, r3
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff fe0b 	bl	8003590 <HAL_UARTEx_RxEventCallback>
 800397a:	e002      	b.n	8003982 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff fdf3 	bl	8003568 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	e002      	b.n	800398c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	e000      	b.n	800398c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800398a:	2302      	movs	r3, #2
  }
}
 800398c:	4618      	mov	r0, r3
 800398e:	3730      	adds	r7, #48	@ 0x30
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003998:	b0c0      	sub	sp, #256	@ 0x100
 800399a:	af00      	add	r7, sp, #0
 800399c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b0:	68d9      	ldr	r1, [r3, #12]
 80039b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	ea40 0301 	orr.w	r3, r0, r1
 80039bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80039ec:	f021 010c 	bic.w	r1, r1, #12
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039fa:	430b      	orrs	r3, r1
 80039fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a0e:	6999      	ldr	r1, [r3, #24]
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	ea40 0301 	orr.w	r3, r0, r1
 8003a1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	4b8f      	ldr	r3, [pc, #572]	@ (8003c60 <UART_SetConfig+0x2cc>)
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d005      	beq.n	8003a34 <UART_SetConfig+0xa0>
 8003a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	4b8d      	ldr	r3, [pc, #564]	@ (8003c64 <UART_SetConfig+0x2d0>)
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d104      	bne.n	8003a3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a34:	f7ff fa0c 	bl	8002e50 <HAL_RCC_GetPCLK2Freq>
 8003a38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a3c:	e003      	b.n	8003a46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a3e:	f7ff f9f3 	bl	8002e28 <HAL_RCC_GetPCLK1Freq>
 8003a42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a50:	f040 810c 	bne.w	8003c6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a66:	4622      	mov	r2, r4
 8003a68:	462b      	mov	r3, r5
 8003a6a:	1891      	adds	r1, r2, r2
 8003a6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a6e:	415b      	adcs	r3, r3
 8003a70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a76:	4621      	mov	r1, r4
 8003a78:	eb12 0801 	adds.w	r8, r2, r1
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	eb43 0901 	adc.w	r9, r3, r1
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a96:	4690      	mov	r8, r2
 8003a98:	4699      	mov	r9, r3
 8003a9a:	4623      	mov	r3, r4
 8003a9c:	eb18 0303 	adds.w	r3, r8, r3
 8003aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003aa4:	462b      	mov	r3, r5
 8003aa6:	eb49 0303 	adc.w	r3, r9, r3
 8003aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003aba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003abe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	18db      	adds	r3, r3, r3
 8003ac6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ac8:	4613      	mov	r3, r2
 8003aca:	eb42 0303 	adc.w	r3, r2, r3
 8003ace:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ad0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ad4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ad8:	f7fc fbd2 	bl	8000280 <__aeabi_uldivmod>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4b61      	ldr	r3, [pc, #388]	@ (8003c68 <UART_SetConfig+0x2d4>)
 8003ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	011c      	lsls	r4, r3, #4
 8003aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003af4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003af8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003afc:	4642      	mov	r2, r8
 8003afe:	464b      	mov	r3, r9
 8003b00:	1891      	adds	r1, r2, r2
 8003b02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b04:	415b      	adcs	r3, r3
 8003b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b0c:	4641      	mov	r1, r8
 8003b0e:	eb12 0a01 	adds.w	sl, r2, r1
 8003b12:	4649      	mov	r1, r9
 8003b14:	eb43 0b01 	adc.w	fp, r3, r1
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b2c:	4692      	mov	sl, r2
 8003b2e:	469b      	mov	fp, r3
 8003b30:	4643      	mov	r3, r8
 8003b32:	eb1a 0303 	adds.w	r3, sl, r3
 8003b36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b3a:	464b      	mov	r3, r9
 8003b3c:	eb4b 0303 	adc.w	r3, fp, r3
 8003b40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	18db      	adds	r3, r3, r3
 8003b5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b5e:	4613      	mov	r3, r2
 8003b60:	eb42 0303 	adc.w	r3, r2, r3
 8003b64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b6e:	f7fc fb87 	bl	8000280 <__aeabi_uldivmod>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4611      	mov	r1, r2
 8003b78:	4b3b      	ldr	r3, [pc, #236]	@ (8003c68 <UART_SetConfig+0x2d4>)
 8003b7a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	2264      	movs	r2, #100	@ 0x64
 8003b82:	fb02 f303 	mul.w	r3, r2, r3
 8003b86:	1acb      	subs	r3, r1, r3
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b8e:	4b36      	ldr	r3, [pc, #216]	@ (8003c68 <UART_SetConfig+0x2d4>)
 8003b90:	fba3 2302 	umull	r2, r3, r3, r2
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b9c:	441c      	add	r4, r3
 8003b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ba8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003bac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003bb0:	4642      	mov	r2, r8
 8003bb2:	464b      	mov	r3, r9
 8003bb4:	1891      	adds	r1, r2, r2
 8003bb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003bb8:	415b      	adcs	r3, r3
 8003bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003bc0:	4641      	mov	r1, r8
 8003bc2:	1851      	adds	r1, r2, r1
 8003bc4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003bc6:	4649      	mov	r1, r9
 8003bc8:	414b      	adcs	r3, r1
 8003bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003bd8:	4659      	mov	r1, fp
 8003bda:	00cb      	lsls	r3, r1, #3
 8003bdc:	4651      	mov	r1, sl
 8003bde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003be2:	4651      	mov	r1, sl
 8003be4:	00ca      	lsls	r2, r1, #3
 8003be6:	4610      	mov	r0, r2
 8003be8:	4619      	mov	r1, r3
 8003bea:	4603      	mov	r3, r0
 8003bec:	4642      	mov	r2, r8
 8003bee:	189b      	adds	r3, r3, r2
 8003bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bf4:	464b      	mov	r3, r9
 8003bf6:	460a      	mov	r2, r1
 8003bf8:	eb42 0303 	adc.w	r3, r2, r3
 8003bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c14:	460b      	mov	r3, r1
 8003c16:	18db      	adds	r3, r3, r3
 8003c18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	eb42 0303 	adc.w	r3, r2, r3
 8003c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c2a:	f7fc fb29 	bl	8000280 <__aeabi_uldivmod>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4b0d      	ldr	r3, [pc, #52]	@ (8003c68 <UART_SetConfig+0x2d4>)
 8003c34:	fba3 1302 	umull	r1, r3, r3, r2
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	2164      	movs	r1, #100	@ 0x64
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	3332      	adds	r3, #50	@ 0x32
 8003c46:	4a08      	ldr	r2, [pc, #32]	@ (8003c68 <UART_SetConfig+0x2d4>)
 8003c48:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4c:	095b      	lsrs	r3, r3, #5
 8003c4e:	f003 0207 	and.w	r2, r3, #7
 8003c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4422      	add	r2, r4
 8003c5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c5c:	e106      	b.n	8003e6c <UART_SetConfig+0x4d8>
 8003c5e:	bf00      	nop
 8003c60:	40011000 	.word	0x40011000
 8003c64:	40011400 	.word	0x40011400
 8003c68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c70:	2200      	movs	r2, #0
 8003c72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c7e:	4642      	mov	r2, r8
 8003c80:	464b      	mov	r3, r9
 8003c82:	1891      	adds	r1, r2, r2
 8003c84:	6239      	str	r1, [r7, #32]
 8003c86:	415b      	adcs	r3, r3
 8003c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c8e:	4641      	mov	r1, r8
 8003c90:	1854      	adds	r4, r2, r1
 8003c92:	4649      	mov	r1, r9
 8003c94:	eb43 0501 	adc.w	r5, r3, r1
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	00eb      	lsls	r3, r5, #3
 8003ca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ca6:	00e2      	lsls	r2, r4, #3
 8003ca8:	4614      	mov	r4, r2
 8003caa:	461d      	mov	r5, r3
 8003cac:	4643      	mov	r3, r8
 8003cae:	18e3      	adds	r3, r4, r3
 8003cb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cb4:	464b      	mov	r3, r9
 8003cb6:	eb45 0303 	adc.w	r3, r5, r3
 8003cba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cda:	4629      	mov	r1, r5
 8003cdc:	008b      	lsls	r3, r1, #2
 8003cde:	4621      	mov	r1, r4
 8003ce0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	008a      	lsls	r2, r1, #2
 8003ce8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003cec:	f7fc fac8 	bl	8000280 <__aeabi_uldivmod>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4b60      	ldr	r3, [pc, #384]	@ (8003e78 <UART_SetConfig+0x4e4>)
 8003cf6:	fba3 2302 	umull	r2, r3, r3, r2
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	011c      	lsls	r4, r3, #4
 8003cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d02:	2200      	movs	r2, #0
 8003d04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d10:	4642      	mov	r2, r8
 8003d12:	464b      	mov	r3, r9
 8003d14:	1891      	adds	r1, r2, r2
 8003d16:	61b9      	str	r1, [r7, #24]
 8003d18:	415b      	adcs	r3, r3
 8003d1a:	61fb      	str	r3, [r7, #28]
 8003d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d20:	4641      	mov	r1, r8
 8003d22:	1851      	adds	r1, r2, r1
 8003d24:	6139      	str	r1, [r7, #16]
 8003d26:	4649      	mov	r1, r9
 8003d28:	414b      	adcs	r3, r1
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d38:	4659      	mov	r1, fp
 8003d3a:	00cb      	lsls	r3, r1, #3
 8003d3c:	4651      	mov	r1, sl
 8003d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d42:	4651      	mov	r1, sl
 8003d44:	00ca      	lsls	r2, r1, #3
 8003d46:	4610      	mov	r0, r2
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	189b      	adds	r3, r3, r2
 8003d50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d54:	464b      	mov	r3, r9
 8003d56:	460a      	mov	r2, r1
 8003d58:	eb42 0303 	adc.w	r3, r2, r3
 8003d5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d78:	4649      	mov	r1, r9
 8003d7a:	008b      	lsls	r3, r1, #2
 8003d7c:	4641      	mov	r1, r8
 8003d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d82:	4641      	mov	r1, r8
 8003d84:	008a      	lsls	r2, r1, #2
 8003d86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d8a:	f7fc fa79 	bl	8000280 <__aeabi_uldivmod>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	4611      	mov	r1, r2
 8003d94:	4b38      	ldr	r3, [pc, #224]	@ (8003e78 <UART_SetConfig+0x4e4>)
 8003d96:	fba3 2301 	umull	r2, r3, r3, r1
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	2264      	movs	r2, #100	@ 0x64
 8003d9e:	fb02 f303 	mul.w	r3, r2, r3
 8003da2:	1acb      	subs	r3, r1, r3
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	3332      	adds	r3, #50	@ 0x32
 8003da8:	4a33      	ldr	r2, [pc, #204]	@ (8003e78 <UART_SetConfig+0x4e4>)
 8003daa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003db4:	441c      	add	r4, r3
 8003db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dba:	2200      	movs	r2, #0
 8003dbc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003dbe:	677a      	str	r2, [r7, #116]	@ 0x74
 8003dc0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003dc4:	4642      	mov	r2, r8
 8003dc6:	464b      	mov	r3, r9
 8003dc8:	1891      	adds	r1, r2, r2
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	415b      	adcs	r3, r3
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dd4:	4641      	mov	r1, r8
 8003dd6:	1851      	adds	r1, r2, r1
 8003dd8:	6039      	str	r1, [r7, #0]
 8003dda:	4649      	mov	r1, r9
 8003ddc:	414b      	adcs	r3, r1
 8003dde:	607b      	str	r3, [r7, #4]
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003dec:	4659      	mov	r1, fp
 8003dee:	00cb      	lsls	r3, r1, #3
 8003df0:	4651      	mov	r1, sl
 8003df2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003df6:	4651      	mov	r1, sl
 8003df8:	00ca      	lsls	r2, r1, #3
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4603      	mov	r3, r0
 8003e00:	4642      	mov	r2, r8
 8003e02:	189b      	adds	r3, r3, r2
 8003e04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e06:	464b      	mov	r3, r9
 8003e08:	460a      	mov	r2, r1
 8003e0a:	eb42 0303 	adc.w	r3, r2, r3
 8003e0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e28:	4649      	mov	r1, r9
 8003e2a:	008b      	lsls	r3, r1, #2
 8003e2c:	4641      	mov	r1, r8
 8003e2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e32:	4641      	mov	r1, r8
 8003e34:	008a      	lsls	r2, r1, #2
 8003e36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e3a:	f7fc fa21 	bl	8000280 <__aeabi_uldivmod>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4b0d      	ldr	r3, [pc, #52]	@ (8003e78 <UART_SetConfig+0x4e4>)
 8003e44:	fba3 1302 	umull	r1, r3, r3, r2
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	2164      	movs	r1, #100	@ 0x64
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	3332      	adds	r3, #50	@ 0x32
 8003e56:	4a08      	ldr	r2, [pc, #32]	@ (8003e78 <UART_SetConfig+0x4e4>)
 8003e58:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	f003 020f 	and.w	r2, r3, #15
 8003e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4422      	add	r2, r4
 8003e6a:	609a      	str	r2, [r3, #8]
}
 8003e6c:	bf00      	nop
 8003e6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e72:	46bd      	mov	sp, r7
 8003e74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e78:	51eb851f 	.word	0x51eb851f

08003e7c <std>:
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	b510      	push	{r4, lr}
 8003e80:	4604      	mov	r4, r0
 8003e82:	e9c0 3300 	strd	r3, r3, [r0]
 8003e86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e8a:	6083      	str	r3, [r0, #8]
 8003e8c:	8181      	strh	r1, [r0, #12]
 8003e8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e90:	81c2      	strh	r2, [r0, #14]
 8003e92:	6183      	str	r3, [r0, #24]
 8003e94:	4619      	mov	r1, r3
 8003e96:	2208      	movs	r2, #8
 8003e98:	305c      	adds	r0, #92	@ 0x5c
 8003e9a:	f000 f906 	bl	80040aa <memset>
 8003e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed4 <std+0x58>)
 8003ea0:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed8 <std+0x5c>)
 8003ea4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8003edc <std+0x60>)
 8003ea8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <std+0x64>)
 8003eac:	6323      	str	r3, [r4, #48]	@ 0x30
 8003eae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee4 <std+0x68>)
 8003eb0:	6224      	str	r4, [r4, #32]
 8003eb2:	429c      	cmp	r4, r3
 8003eb4:	d006      	beq.n	8003ec4 <std+0x48>
 8003eb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003eba:	4294      	cmp	r4, r2
 8003ebc:	d002      	beq.n	8003ec4 <std+0x48>
 8003ebe:	33d0      	adds	r3, #208	@ 0xd0
 8003ec0:	429c      	cmp	r4, r3
 8003ec2:	d105      	bne.n	8003ed0 <std+0x54>
 8003ec4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ecc:	f000 b966 	b.w	800419c <__retarget_lock_init_recursive>
 8003ed0:	bd10      	pop	{r4, pc}
 8003ed2:	bf00      	nop
 8003ed4:	08004025 	.word	0x08004025
 8003ed8:	08004047 	.word	0x08004047
 8003edc:	0800407f 	.word	0x0800407f
 8003ee0:	080040a3 	.word	0x080040a3
 8003ee4:	20000180 	.word	0x20000180

08003ee8 <stdio_exit_handler>:
 8003ee8:	4a02      	ldr	r2, [pc, #8]	@ (8003ef4 <stdio_exit_handler+0xc>)
 8003eea:	4903      	ldr	r1, [pc, #12]	@ (8003ef8 <stdio_exit_handler+0x10>)
 8003eec:	4803      	ldr	r0, [pc, #12]	@ (8003efc <stdio_exit_handler+0x14>)
 8003eee:	f000 b869 	b.w	8003fc4 <_fwalk_sglue>
 8003ef2:	bf00      	nop
 8003ef4:	2000000c 	.word	0x2000000c
 8003ef8:	08004a3d 	.word	0x08004a3d
 8003efc:	2000001c 	.word	0x2000001c

08003f00 <cleanup_stdio>:
 8003f00:	6841      	ldr	r1, [r0, #4]
 8003f02:	4b0c      	ldr	r3, [pc, #48]	@ (8003f34 <cleanup_stdio+0x34>)
 8003f04:	4299      	cmp	r1, r3
 8003f06:	b510      	push	{r4, lr}
 8003f08:	4604      	mov	r4, r0
 8003f0a:	d001      	beq.n	8003f10 <cleanup_stdio+0x10>
 8003f0c:	f000 fd96 	bl	8004a3c <_fflush_r>
 8003f10:	68a1      	ldr	r1, [r4, #8]
 8003f12:	4b09      	ldr	r3, [pc, #36]	@ (8003f38 <cleanup_stdio+0x38>)
 8003f14:	4299      	cmp	r1, r3
 8003f16:	d002      	beq.n	8003f1e <cleanup_stdio+0x1e>
 8003f18:	4620      	mov	r0, r4
 8003f1a:	f000 fd8f 	bl	8004a3c <_fflush_r>
 8003f1e:	68e1      	ldr	r1, [r4, #12]
 8003f20:	4b06      	ldr	r3, [pc, #24]	@ (8003f3c <cleanup_stdio+0x3c>)
 8003f22:	4299      	cmp	r1, r3
 8003f24:	d004      	beq.n	8003f30 <cleanup_stdio+0x30>
 8003f26:	4620      	mov	r0, r4
 8003f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f2c:	f000 bd86 	b.w	8004a3c <_fflush_r>
 8003f30:	bd10      	pop	{r4, pc}
 8003f32:	bf00      	nop
 8003f34:	20000180 	.word	0x20000180
 8003f38:	200001e8 	.word	0x200001e8
 8003f3c:	20000250 	.word	0x20000250

08003f40 <global_stdio_init.part.0>:
 8003f40:	b510      	push	{r4, lr}
 8003f42:	4b0b      	ldr	r3, [pc, #44]	@ (8003f70 <global_stdio_init.part.0+0x30>)
 8003f44:	4c0b      	ldr	r4, [pc, #44]	@ (8003f74 <global_stdio_init.part.0+0x34>)
 8003f46:	4a0c      	ldr	r2, [pc, #48]	@ (8003f78 <global_stdio_init.part.0+0x38>)
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2104      	movs	r1, #4
 8003f50:	f7ff ff94 	bl	8003e7c <std>
 8003f54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f58:	2201      	movs	r2, #1
 8003f5a:	2109      	movs	r1, #9
 8003f5c:	f7ff ff8e 	bl	8003e7c <std>
 8003f60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f64:	2202      	movs	r2, #2
 8003f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f6a:	2112      	movs	r1, #18
 8003f6c:	f7ff bf86 	b.w	8003e7c <std>
 8003f70:	200002b8 	.word	0x200002b8
 8003f74:	20000180 	.word	0x20000180
 8003f78:	08003ee9 	.word	0x08003ee9

08003f7c <__sfp_lock_acquire>:
 8003f7c:	4801      	ldr	r0, [pc, #4]	@ (8003f84 <__sfp_lock_acquire+0x8>)
 8003f7e:	f000 b90e 	b.w	800419e <__retarget_lock_acquire_recursive>
 8003f82:	bf00      	nop
 8003f84:	200002c1 	.word	0x200002c1

08003f88 <__sfp_lock_release>:
 8003f88:	4801      	ldr	r0, [pc, #4]	@ (8003f90 <__sfp_lock_release+0x8>)
 8003f8a:	f000 b909 	b.w	80041a0 <__retarget_lock_release_recursive>
 8003f8e:	bf00      	nop
 8003f90:	200002c1 	.word	0x200002c1

08003f94 <__sinit>:
 8003f94:	b510      	push	{r4, lr}
 8003f96:	4604      	mov	r4, r0
 8003f98:	f7ff fff0 	bl	8003f7c <__sfp_lock_acquire>
 8003f9c:	6a23      	ldr	r3, [r4, #32]
 8003f9e:	b11b      	cbz	r3, 8003fa8 <__sinit+0x14>
 8003fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fa4:	f7ff bff0 	b.w	8003f88 <__sfp_lock_release>
 8003fa8:	4b04      	ldr	r3, [pc, #16]	@ (8003fbc <__sinit+0x28>)
 8003faa:	6223      	str	r3, [r4, #32]
 8003fac:	4b04      	ldr	r3, [pc, #16]	@ (8003fc0 <__sinit+0x2c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1f5      	bne.n	8003fa0 <__sinit+0xc>
 8003fb4:	f7ff ffc4 	bl	8003f40 <global_stdio_init.part.0>
 8003fb8:	e7f2      	b.n	8003fa0 <__sinit+0xc>
 8003fba:	bf00      	nop
 8003fbc:	08003f01 	.word	0x08003f01
 8003fc0:	200002b8 	.word	0x200002b8

08003fc4 <_fwalk_sglue>:
 8003fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fc8:	4607      	mov	r7, r0
 8003fca:	4688      	mov	r8, r1
 8003fcc:	4614      	mov	r4, r2
 8003fce:	2600      	movs	r6, #0
 8003fd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003fd4:	f1b9 0901 	subs.w	r9, r9, #1
 8003fd8:	d505      	bpl.n	8003fe6 <_fwalk_sglue+0x22>
 8003fda:	6824      	ldr	r4, [r4, #0]
 8003fdc:	2c00      	cmp	r4, #0
 8003fde:	d1f7      	bne.n	8003fd0 <_fwalk_sglue+0xc>
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fe6:	89ab      	ldrh	r3, [r5, #12]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d907      	bls.n	8003ffc <_fwalk_sglue+0x38>
 8003fec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	d003      	beq.n	8003ffc <_fwalk_sglue+0x38>
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	4638      	mov	r0, r7
 8003ff8:	47c0      	blx	r8
 8003ffa:	4306      	orrs	r6, r0
 8003ffc:	3568      	adds	r5, #104	@ 0x68
 8003ffe:	e7e9      	b.n	8003fd4 <_fwalk_sglue+0x10>

08004000 <iprintf>:
 8004000:	b40f      	push	{r0, r1, r2, r3}
 8004002:	b507      	push	{r0, r1, r2, lr}
 8004004:	4906      	ldr	r1, [pc, #24]	@ (8004020 <iprintf+0x20>)
 8004006:	ab04      	add	r3, sp, #16
 8004008:	6808      	ldr	r0, [r1, #0]
 800400a:	f853 2b04 	ldr.w	r2, [r3], #4
 800400e:	6881      	ldr	r1, [r0, #8]
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	f000 f9e9 	bl	80043e8 <_vfiprintf_r>
 8004016:	b003      	add	sp, #12
 8004018:	f85d eb04 	ldr.w	lr, [sp], #4
 800401c:	b004      	add	sp, #16
 800401e:	4770      	bx	lr
 8004020:	20000018 	.word	0x20000018

08004024 <__sread>:
 8004024:	b510      	push	{r4, lr}
 8004026:	460c      	mov	r4, r1
 8004028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800402c:	f000 f868 	bl	8004100 <_read_r>
 8004030:	2800      	cmp	r0, #0
 8004032:	bfab      	itete	ge
 8004034:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004036:	89a3      	ldrhlt	r3, [r4, #12]
 8004038:	181b      	addge	r3, r3, r0
 800403a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800403e:	bfac      	ite	ge
 8004040:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004042:	81a3      	strhlt	r3, [r4, #12]
 8004044:	bd10      	pop	{r4, pc}

08004046 <__swrite>:
 8004046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800404a:	461f      	mov	r7, r3
 800404c:	898b      	ldrh	r3, [r1, #12]
 800404e:	05db      	lsls	r3, r3, #23
 8004050:	4605      	mov	r5, r0
 8004052:	460c      	mov	r4, r1
 8004054:	4616      	mov	r6, r2
 8004056:	d505      	bpl.n	8004064 <__swrite+0x1e>
 8004058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800405c:	2302      	movs	r3, #2
 800405e:	2200      	movs	r2, #0
 8004060:	f000 f83c 	bl	80040dc <_lseek_r>
 8004064:	89a3      	ldrh	r3, [r4, #12]
 8004066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800406a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800406e:	81a3      	strh	r3, [r4, #12]
 8004070:	4632      	mov	r2, r6
 8004072:	463b      	mov	r3, r7
 8004074:	4628      	mov	r0, r5
 8004076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800407a:	f000 b853 	b.w	8004124 <_write_r>

0800407e <__sseek>:
 800407e:	b510      	push	{r4, lr}
 8004080:	460c      	mov	r4, r1
 8004082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004086:	f000 f829 	bl	80040dc <_lseek_r>
 800408a:	1c43      	adds	r3, r0, #1
 800408c:	89a3      	ldrh	r3, [r4, #12]
 800408e:	bf15      	itete	ne
 8004090:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004092:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004096:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800409a:	81a3      	strheq	r3, [r4, #12]
 800409c:	bf18      	it	ne
 800409e:	81a3      	strhne	r3, [r4, #12]
 80040a0:	bd10      	pop	{r4, pc}

080040a2 <__sclose>:
 80040a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040a6:	f000 b809 	b.w	80040bc <_close_r>

080040aa <memset>:
 80040aa:	4402      	add	r2, r0
 80040ac:	4603      	mov	r3, r0
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d100      	bne.n	80040b4 <memset+0xa>
 80040b2:	4770      	bx	lr
 80040b4:	f803 1b01 	strb.w	r1, [r3], #1
 80040b8:	e7f9      	b.n	80040ae <memset+0x4>
	...

080040bc <_close_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	4d06      	ldr	r5, [pc, #24]	@ (80040d8 <_close_r+0x1c>)
 80040c0:	2300      	movs	r3, #0
 80040c2:	4604      	mov	r4, r0
 80040c4:	4608      	mov	r0, r1
 80040c6:	602b      	str	r3, [r5, #0]
 80040c8:	f7fc fcc9 	bl	8000a5e <_close>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d102      	bne.n	80040d6 <_close_r+0x1a>
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	b103      	cbz	r3, 80040d6 <_close_r+0x1a>
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	bd38      	pop	{r3, r4, r5, pc}
 80040d8:	200002bc 	.word	0x200002bc

080040dc <_lseek_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	4d07      	ldr	r5, [pc, #28]	@ (80040fc <_lseek_r+0x20>)
 80040e0:	4604      	mov	r4, r0
 80040e2:	4608      	mov	r0, r1
 80040e4:	4611      	mov	r1, r2
 80040e6:	2200      	movs	r2, #0
 80040e8:	602a      	str	r2, [r5, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	f7fc fcde 	bl	8000aac <_lseek>
 80040f0:	1c43      	adds	r3, r0, #1
 80040f2:	d102      	bne.n	80040fa <_lseek_r+0x1e>
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	b103      	cbz	r3, 80040fa <_lseek_r+0x1e>
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	bd38      	pop	{r3, r4, r5, pc}
 80040fc:	200002bc 	.word	0x200002bc

08004100 <_read_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4d07      	ldr	r5, [pc, #28]	@ (8004120 <_read_r+0x20>)
 8004104:	4604      	mov	r4, r0
 8004106:	4608      	mov	r0, r1
 8004108:	4611      	mov	r1, r2
 800410a:	2200      	movs	r2, #0
 800410c:	602a      	str	r2, [r5, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	f7fc fc6c 	bl	80009ec <_read>
 8004114:	1c43      	adds	r3, r0, #1
 8004116:	d102      	bne.n	800411e <_read_r+0x1e>
 8004118:	682b      	ldr	r3, [r5, #0]
 800411a:	b103      	cbz	r3, 800411e <_read_r+0x1e>
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	bd38      	pop	{r3, r4, r5, pc}
 8004120:	200002bc 	.word	0x200002bc

08004124 <_write_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	4d07      	ldr	r5, [pc, #28]	@ (8004144 <_write_r+0x20>)
 8004128:	4604      	mov	r4, r0
 800412a:	4608      	mov	r0, r1
 800412c:	4611      	mov	r1, r2
 800412e:	2200      	movs	r2, #0
 8004130:	602a      	str	r2, [r5, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	f7fc fc77 	bl	8000a26 <_write>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d102      	bne.n	8004142 <_write_r+0x1e>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	b103      	cbz	r3, 8004142 <_write_r+0x1e>
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	200002bc 	.word	0x200002bc

08004148 <__errno>:
 8004148:	4b01      	ldr	r3, [pc, #4]	@ (8004150 <__errno+0x8>)
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	20000018 	.word	0x20000018

08004154 <__libc_init_array>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	4d0d      	ldr	r5, [pc, #52]	@ (800418c <__libc_init_array+0x38>)
 8004158:	4c0d      	ldr	r4, [pc, #52]	@ (8004190 <__libc_init_array+0x3c>)
 800415a:	1b64      	subs	r4, r4, r5
 800415c:	10a4      	asrs	r4, r4, #2
 800415e:	2600      	movs	r6, #0
 8004160:	42a6      	cmp	r6, r4
 8004162:	d109      	bne.n	8004178 <__libc_init_array+0x24>
 8004164:	4d0b      	ldr	r5, [pc, #44]	@ (8004194 <__libc_init_array+0x40>)
 8004166:	4c0c      	ldr	r4, [pc, #48]	@ (8004198 <__libc_init_array+0x44>)
 8004168:	f000 fdb8 	bl	8004cdc <_init>
 800416c:	1b64      	subs	r4, r4, r5
 800416e:	10a4      	asrs	r4, r4, #2
 8004170:	2600      	movs	r6, #0
 8004172:	42a6      	cmp	r6, r4
 8004174:	d105      	bne.n	8004182 <__libc_init_array+0x2e>
 8004176:	bd70      	pop	{r4, r5, r6, pc}
 8004178:	f855 3b04 	ldr.w	r3, [r5], #4
 800417c:	4798      	blx	r3
 800417e:	3601      	adds	r6, #1
 8004180:	e7ee      	b.n	8004160 <__libc_init_array+0xc>
 8004182:	f855 3b04 	ldr.w	r3, [r5], #4
 8004186:	4798      	blx	r3
 8004188:	3601      	adds	r6, #1
 800418a:	e7f2      	b.n	8004172 <__libc_init_array+0x1e>
 800418c:	08004d78 	.word	0x08004d78
 8004190:	08004d78 	.word	0x08004d78
 8004194:	08004d78 	.word	0x08004d78
 8004198:	08004d7c 	.word	0x08004d7c

0800419c <__retarget_lock_init_recursive>:
 800419c:	4770      	bx	lr

0800419e <__retarget_lock_acquire_recursive>:
 800419e:	4770      	bx	lr

080041a0 <__retarget_lock_release_recursive>:
 80041a0:	4770      	bx	lr
	...

080041a4 <_free_r>:
 80041a4:	b538      	push	{r3, r4, r5, lr}
 80041a6:	4605      	mov	r5, r0
 80041a8:	2900      	cmp	r1, #0
 80041aa:	d041      	beq.n	8004230 <_free_r+0x8c>
 80041ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041b0:	1f0c      	subs	r4, r1, #4
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bfb8      	it	lt
 80041b6:	18e4      	addlt	r4, r4, r3
 80041b8:	f000 f8e0 	bl	800437c <__malloc_lock>
 80041bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004234 <_free_r+0x90>)
 80041be:	6813      	ldr	r3, [r2, #0]
 80041c0:	b933      	cbnz	r3, 80041d0 <_free_r+0x2c>
 80041c2:	6063      	str	r3, [r4, #4]
 80041c4:	6014      	str	r4, [r2, #0]
 80041c6:	4628      	mov	r0, r5
 80041c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041cc:	f000 b8dc 	b.w	8004388 <__malloc_unlock>
 80041d0:	42a3      	cmp	r3, r4
 80041d2:	d908      	bls.n	80041e6 <_free_r+0x42>
 80041d4:	6820      	ldr	r0, [r4, #0]
 80041d6:	1821      	adds	r1, r4, r0
 80041d8:	428b      	cmp	r3, r1
 80041da:	bf01      	itttt	eq
 80041dc:	6819      	ldreq	r1, [r3, #0]
 80041de:	685b      	ldreq	r3, [r3, #4]
 80041e0:	1809      	addeq	r1, r1, r0
 80041e2:	6021      	streq	r1, [r4, #0]
 80041e4:	e7ed      	b.n	80041c2 <_free_r+0x1e>
 80041e6:	461a      	mov	r2, r3
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	b10b      	cbz	r3, 80041f0 <_free_r+0x4c>
 80041ec:	42a3      	cmp	r3, r4
 80041ee:	d9fa      	bls.n	80041e6 <_free_r+0x42>
 80041f0:	6811      	ldr	r1, [r2, #0]
 80041f2:	1850      	adds	r0, r2, r1
 80041f4:	42a0      	cmp	r0, r4
 80041f6:	d10b      	bne.n	8004210 <_free_r+0x6c>
 80041f8:	6820      	ldr	r0, [r4, #0]
 80041fa:	4401      	add	r1, r0
 80041fc:	1850      	adds	r0, r2, r1
 80041fe:	4283      	cmp	r3, r0
 8004200:	6011      	str	r1, [r2, #0]
 8004202:	d1e0      	bne.n	80041c6 <_free_r+0x22>
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	6053      	str	r3, [r2, #4]
 800420a:	4408      	add	r0, r1
 800420c:	6010      	str	r0, [r2, #0]
 800420e:	e7da      	b.n	80041c6 <_free_r+0x22>
 8004210:	d902      	bls.n	8004218 <_free_r+0x74>
 8004212:	230c      	movs	r3, #12
 8004214:	602b      	str	r3, [r5, #0]
 8004216:	e7d6      	b.n	80041c6 <_free_r+0x22>
 8004218:	6820      	ldr	r0, [r4, #0]
 800421a:	1821      	adds	r1, r4, r0
 800421c:	428b      	cmp	r3, r1
 800421e:	bf04      	itt	eq
 8004220:	6819      	ldreq	r1, [r3, #0]
 8004222:	685b      	ldreq	r3, [r3, #4]
 8004224:	6063      	str	r3, [r4, #4]
 8004226:	bf04      	itt	eq
 8004228:	1809      	addeq	r1, r1, r0
 800422a:	6021      	streq	r1, [r4, #0]
 800422c:	6054      	str	r4, [r2, #4]
 800422e:	e7ca      	b.n	80041c6 <_free_r+0x22>
 8004230:	bd38      	pop	{r3, r4, r5, pc}
 8004232:	bf00      	nop
 8004234:	200002c8 	.word	0x200002c8

08004238 <sbrk_aligned>:
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	4e0f      	ldr	r6, [pc, #60]	@ (8004278 <sbrk_aligned+0x40>)
 800423c:	460c      	mov	r4, r1
 800423e:	6831      	ldr	r1, [r6, #0]
 8004240:	4605      	mov	r5, r0
 8004242:	b911      	cbnz	r1, 800424a <sbrk_aligned+0x12>
 8004244:	f000 fcb6 	bl	8004bb4 <_sbrk_r>
 8004248:	6030      	str	r0, [r6, #0]
 800424a:	4621      	mov	r1, r4
 800424c:	4628      	mov	r0, r5
 800424e:	f000 fcb1 	bl	8004bb4 <_sbrk_r>
 8004252:	1c43      	adds	r3, r0, #1
 8004254:	d103      	bne.n	800425e <sbrk_aligned+0x26>
 8004256:	f04f 34ff 	mov.w	r4, #4294967295
 800425a:	4620      	mov	r0, r4
 800425c:	bd70      	pop	{r4, r5, r6, pc}
 800425e:	1cc4      	adds	r4, r0, #3
 8004260:	f024 0403 	bic.w	r4, r4, #3
 8004264:	42a0      	cmp	r0, r4
 8004266:	d0f8      	beq.n	800425a <sbrk_aligned+0x22>
 8004268:	1a21      	subs	r1, r4, r0
 800426a:	4628      	mov	r0, r5
 800426c:	f000 fca2 	bl	8004bb4 <_sbrk_r>
 8004270:	3001      	adds	r0, #1
 8004272:	d1f2      	bne.n	800425a <sbrk_aligned+0x22>
 8004274:	e7ef      	b.n	8004256 <sbrk_aligned+0x1e>
 8004276:	bf00      	nop
 8004278:	200002c4 	.word	0x200002c4

0800427c <_malloc_r>:
 800427c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004280:	1ccd      	adds	r5, r1, #3
 8004282:	f025 0503 	bic.w	r5, r5, #3
 8004286:	3508      	adds	r5, #8
 8004288:	2d0c      	cmp	r5, #12
 800428a:	bf38      	it	cc
 800428c:	250c      	movcc	r5, #12
 800428e:	2d00      	cmp	r5, #0
 8004290:	4606      	mov	r6, r0
 8004292:	db01      	blt.n	8004298 <_malloc_r+0x1c>
 8004294:	42a9      	cmp	r1, r5
 8004296:	d904      	bls.n	80042a2 <_malloc_r+0x26>
 8004298:	230c      	movs	r3, #12
 800429a:	6033      	str	r3, [r6, #0]
 800429c:	2000      	movs	r0, #0
 800429e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004378 <_malloc_r+0xfc>
 80042a6:	f000 f869 	bl	800437c <__malloc_lock>
 80042aa:	f8d8 3000 	ldr.w	r3, [r8]
 80042ae:	461c      	mov	r4, r3
 80042b0:	bb44      	cbnz	r4, 8004304 <_malloc_r+0x88>
 80042b2:	4629      	mov	r1, r5
 80042b4:	4630      	mov	r0, r6
 80042b6:	f7ff ffbf 	bl	8004238 <sbrk_aligned>
 80042ba:	1c43      	adds	r3, r0, #1
 80042bc:	4604      	mov	r4, r0
 80042be:	d158      	bne.n	8004372 <_malloc_r+0xf6>
 80042c0:	f8d8 4000 	ldr.w	r4, [r8]
 80042c4:	4627      	mov	r7, r4
 80042c6:	2f00      	cmp	r7, #0
 80042c8:	d143      	bne.n	8004352 <_malloc_r+0xd6>
 80042ca:	2c00      	cmp	r4, #0
 80042cc:	d04b      	beq.n	8004366 <_malloc_r+0xea>
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	4639      	mov	r1, r7
 80042d2:	4630      	mov	r0, r6
 80042d4:	eb04 0903 	add.w	r9, r4, r3
 80042d8:	f000 fc6c 	bl	8004bb4 <_sbrk_r>
 80042dc:	4581      	cmp	r9, r0
 80042de:	d142      	bne.n	8004366 <_malloc_r+0xea>
 80042e0:	6821      	ldr	r1, [r4, #0]
 80042e2:	1a6d      	subs	r5, r5, r1
 80042e4:	4629      	mov	r1, r5
 80042e6:	4630      	mov	r0, r6
 80042e8:	f7ff ffa6 	bl	8004238 <sbrk_aligned>
 80042ec:	3001      	adds	r0, #1
 80042ee:	d03a      	beq.n	8004366 <_malloc_r+0xea>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	442b      	add	r3, r5
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	f8d8 3000 	ldr.w	r3, [r8]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	bb62      	cbnz	r2, 8004358 <_malloc_r+0xdc>
 80042fe:	f8c8 7000 	str.w	r7, [r8]
 8004302:	e00f      	b.n	8004324 <_malloc_r+0xa8>
 8004304:	6822      	ldr	r2, [r4, #0]
 8004306:	1b52      	subs	r2, r2, r5
 8004308:	d420      	bmi.n	800434c <_malloc_r+0xd0>
 800430a:	2a0b      	cmp	r2, #11
 800430c:	d917      	bls.n	800433e <_malloc_r+0xc2>
 800430e:	1961      	adds	r1, r4, r5
 8004310:	42a3      	cmp	r3, r4
 8004312:	6025      	str	r5, [r4, #0]
 8004314:	bf18      	it	ne
 8004316:	6059      	strne	r1, [r3, #4]
 8004318:	6863      	ldr	r3, [r4, #4]
 800431a:	bf08      	it	eq
 800431c:	f8c8 1000 	streq.w	r1, [r8]
 8004320:	5162      	str	r2, [r4, r5]
 8004322:	604b      	str	r3, [r1, #4]
 8004324:	4630      	mov	r0, r6
 8004326:	f000 f82f 	bl	8004388 <__malloc_unlock>
 800432a:	f104 000b 	add.w	r0, r4, #11
 800432e:	1d23      	adds	r3, r4, #4
 8004330:	f020 0007 	bic.w	r0, r0, #7
 8004334:	1ac2      	subs	r2, r0, r3
 8004336:	bf1c      	itt	ne
 8004338:	1a1b      	subne	r3, r3, r0
 800433a:	50a3      	strne	r3, [r4, r2]
 800433c:	e7af      	b.n	800429e <_malloc_r+0x22>
 800433e:	6862      	ldr	r2, [r4, #4]
 8004340:	42a3      	cmp	r3, r4
 8004342:	bf0c      	ite	eq
 8004344:	f8c8 2000 	streq.w	r2, [r8]
 8004348:	605a      	strne	r2, [r3, #4]
 800434a:	e7eb      	b.n	8004324 <_malloc_r+0xa8>
 800434c:	4623      	mov	r3, r4
 800434e:	6864      	ldr	r4, [r4, #4]
 8004350:	e7ae      	b.n	80042b0 <_malloc_r+0x34>
 8004352:	463c      	mov	r4, r7
 8004354:	687f      	ldr	r7, [r7, #4]
 8004356:	e7b6      	b.n	80042c6 <_malloc_r+0x4a>
 8004358:	461a      	mov	r2, r3
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	42a3      	cmp	r3, r4
 800435e:	d1fb      	bne.n	8004358 <_malloc_r+0xdc>
 8004360:	2300      	movs	r3, #0
 8004362:	6053      	str	r3, [r2, #4]
 8004364:	e7de      	b.n	8004324 <_malloc_r+0xa8>
 8004366:	230c      	movs	r3, #12
 8004368:	6033      	str	r3, [r6, #0]
 800436a:	4630      	mov	r0, r6
 800436c:	f000 f80c 	bl	8004388 <__malloc_unlock>
 8004370:	e794      	b.n	800429c <_malloc_r+0x20>
 8004372:	6005      	str	r5, [r0, #0]
 8004374:	e7d6      	b.n	8004324 <_malloc_r+0xa8>
 8004376:	bf00      	nop
 8004378:	200002c8 	.word	0x200002c8

0800437c <__malloc_lock>:
 800437c:	4801      	ldr	r0, [pc, #4]	@ (8004384 <__malloc_lock+0x8>)
 800437e:	f7ff bf0e 	b.w	800419e <__retarget_lock_acquire_recursive>
 8004382:	bf00      	nop
 8004384:	200002c0 	.word	0x200002c0

08004388 <__malloc_unlock>:
 8004388:	4801      	ldr	r0, [pc, #4]	@ (8004390 <__malloc_unlock+0x8>)
 800438a:	f7ff bf09 	b.w	80041a0 <__retarget_lock_release_recursive>
 800438e:	bf00      	nop
 8004390:	200002c0 	.word	0x200002c0

08004394 <__sfputc_r>:
 8004394:	6893      	ldr	r3, [r2, #8]
 8004396:	3b01      	subs	r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	b410      	push	{r4}
 800439c:	6093      	str	r3, [r2, #8]
 800439e:	da08      	bge.n	80043b2 <__sfputc_r+0x1e>
 80043a0:	6994      	ldr	r4, [r2, #24]
 80043a2:	42a3      	cmp	r3, r4
 80043a4:	db01      	blt.n	80043aa <__sfputc_r+0x16>
 80043a6:	290a      	cmp	r1, #10
 80043a8:	d103      	bne.n	80043b2 <__sfputc_r+0x1e>
 80043aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043ae:	f000 bb6d 	b.w	8004a8c <__swbuf_r>
 80043b2:	6813      	ldr	r3, [r2, #0]
 80043b4:	1c58      	adds	r0, r3, #1
 80043b6:	6010      	str	r0, [r2, #0]
 80043b8:	7019      	strb	r1, [r3, #0]
 80043ba:	4608      	mov	r0, r1
 80043bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <__sfputs_r>:
 80043c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c4:	4606      	mov	r6, r0
 80043c6:	460f      	mov	r7, r1
 80043c8:	4614      	mov	r4, r2
 80043ca:	18d5      	adds	r5, r2, r3
 80043cc:	42ac      	cmp	r4, r5
 80043ce:	d101      	bne.n	80043d4 <__sfputs_r+0x12>
 80043d0:	2000      	movs	r0, #0
 80043d2:	e007      	b.n	80043e4 <__sfputs_r+0x22>
 80043d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043d8:	463a      	mov	r2, r7
 80043da:	4630      	mov	r0, r6
 80043dc:	f7ff ffda 	bl	8004394 <__sfputc_r>
 80043e0:	1c43      	adds	r3, r0, #1
 80043e2:	d1f3      	bne.n	80043cc <__sfputs_r+0xa>
 80043e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043e8 <_vfiprintf_r>:
 80043e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ec:	460d      	mov	r5, r1
 80043ee:	b09d      	sub	sp, #116	@ 0x74
 80043f0:	4614      	mov	r4, r2
 80043f2:	4698      	mov	r8, r3
 80043f4:	4606      	mov	r6, r0
 80043f6:	b118      	cbz	r0, 8004400 <_vfiprintf_r+0x18>
 80043f8:	6a03      	ldr	r3, [r0, #32]
 80043fa:	b90b      	cbnz	r3, 8004400 <_vfiprintf_r+0x18>
 80043fc:	f7ff fdca 	bl	8003f94 <__sinit>
 8004400:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004402:	07d9      	lsls	r1, r3, #31
 8004404:	d405      	bmi.n	8004412 <_vfiprintf_r+0x2a>
 8004406:	89ab      	ldrh	r3, [r5, #12]
 8004408:	059a      	lsls	r2, r3, #22
 800440a:	d402      	bmi.n	8004412 <_vfiprintf_r+0x2a>
 800440c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800440e:	f7ff fec6 	bl	800419e <__retarget_lock_acquire_recursive>
 8004412:	89ab      	ldrh	r3, [r5, #12]
 8004414:	071b      	lsls	r3, r3, #28
 8004416:	d501      	bpl.n	800441c <_vfiprintf_r+0x34>
 8004418:	692b      	ldr	r3, [r5, #16]
 800441a:	b99b      	cbnz	r3, 8004444 <_vfiprintf_r+0x5c>
 800441c:	4629      	mov	r1, r5
 800441e:	4630      	mov	r0, r6
 8004420:	f000 fb72 	bl	8004b08 <__swsetup_r>
 8004424:	b170      	cbz	r0, 8004444 <_vfiprintf_r+0x5c>
 8004426:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004428:	07dc      	lsls	r4, r3, #31
 800442a:	d504      	bpl.n	8004436 <_vfiprintf_r+0x4e>
 800442c:	f04f 30ff 	mov.w	r0, #4294967295
 8004430:	b01d      	add	sp, #116	@ 0x74
 8004432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004436:	89ab      	ldrh	r3, [r5, #12]
 8004438:	0598      	lsls	r0, r3, #22
 800443a:	d4f7      	bmi.n	800442c <_vfiprintf_r+0x44>
 800443c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800443e:	f7ff feaf 	bl	80041a0 <__retarget_lock_release_recursive>
 8004442:	e7f3      	b.n	800442c <_vfiprintf_r+0x44>
 8004444:	2300      	movs	r3, #0
 8004446:	9309      	str	r3, [sp, #36]	@ 0x24
 8004448:	2320      	movs	r3, #32
 800444a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800444e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004452:	2330      	movs	r3, #48	@ 0x30
 8004454:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004604 <_vfiprintf_r+0x21c>
 8004458:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800445c:	f04f 0901 	mov.w	r9, #1
 8004460:	4623      	mov	r3, r4
 8004462:	469a      	mov	sl, r3
 8004464:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004468:	b10a      	cbz	r2, 800446e <_vfiprintf_r+0x86>
 800446a:	2a25      	cmp	r2, #37	@ 0x25
 800446c:	d1f9      	bne.n	8004462 <_vfiprintf_r+0x7a>
 800446e:	ebba 0b04 	subs.w	fp, sl, r4
 8004472:	d00b      	beq.n	800448c <_vfiprintf_r+0xa4>
 8004474:	465b      	mov	r3, fp
 8004476:	4622      	mov	r2, r4
 8004478:	4629      	mov	r1, r5
 800447a:	4630      	mov	r0, r6
 800447c:	f7ff ffa1 	bl	80043c2 <__sfputs_r>
 8004480:	3001      	adds	r0, #1
 8004482:	f000 80a7 	beq.w	80045d4 <_vfiprintf_r+0x1ec>
 8004486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004488:	445a      	add	r2, fp
 800448a:	9209      	str	r2, [sp, #36]	@ 0x24
 800448c:	f89a 3000 	ldrb.w	r3, [sl]
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 809f 	beq.w	80045d4 <_vfiprintf_r+0x1ec>
 8004496:	2300      	movs	r3, #0
 8004498:	f04f 32ff 	mov.w	r2, #4294967295
 800449c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044a0:	f10a 0a01 	add.w	sl, sl, #1
 80044a4:	9304      	str	r3, [sp, #16]
 80044a6:	9307      	str	r3, [sp, #28]
 80044a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80044ae:	4654      	mov	r4, sl
 80044b0:	2205      	movs	r2, #5
 80044b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044b6:	4853      	ldr	r0, [pc, #332]	@ (8004604 <_vfiprintf_r+0x21c>)
 80044b8:	f7fb fe92 	bl	80001e0 <memchr>
 80044bc:	9a04      	ldr	r2, [sp, #16]
 80044be:	b9d8      	cbnz	r0, 80044f8 <_vfiprintf_r+0x110>
 80044c0:	06d1      	lsls	r1, r2, #27
 80044c2:	bf44      	itt	mi
 80044c4:	2320      	movmi	r3, #32
 80044c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044ca:	0713      	lsls	r3, r2, #28
 80044cc:	bf44      	itt	mi
 80044ce:	232b      	movmi	r3, #43	@ 0x2b
 80044d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044d4:	f89a 3000 	ldrb.w	r3, [sl]
 80044d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80044da:	d015      	beq.n	8004508 <_vfiprintf_r+0x120>
 80044dc:	9a07      	ldr	r2, [sp, #28]
 80044de:	4654      	mov	r4, sl
 80044e0:	2000      	movs	r0, #0
 80044e2:	f04f 0c0a 	mov.w	ip, #10
 80044e6:	4621      	mov	r1, r4
 80044e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044ec:	3b30      	subs	r3, #48	@ 0x30
 80044ee:	2b09      	cmp	r3, #9
 80044f0:	d94b      	bls.n	800458a <_vfiprintf_r+0x1a2>
 80044f2:	b1b0      	cbz	r0, 8004522 <_vfiprintf_r+0x13a>
 80044f4:	9207      	str	r2, [sp, #28]
 80044f6:	e014      	b.n	8004522 <_vfiprintf_r+0x13a>
 80044f8:	eba0 0308 	sub.w	r3, r0, r8
 80044fc:	fa09 f303 	lsl.w	r3, r9, r3
 8004500:	4313      	orrs	r3, r2
 8004502:	9304      	str	r3, [sp, #16]
 8004504:	46a2      	mov	sl, r4
 8004506:	e7d2      	b.n	80044ae <_vfiprintf_r+0xc6>
 8004508:	9b03      	ldr	r3, [sp, #12]
 800450a:	1d19      	adds	r1, r3, #4
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	9103      	str	r1, [sp, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	bfbb      	ittet	lt
 8004514:	425b      	neglt	r3, r3
 8004516:	f042 0202 	orrlt.w	r2, r2, #2
 800451a:	9307      	strge	r3, [sp, #28]
 800451c:	9307      	strlt	r3, [sp, #28]
 800451e:	bfb8      	it	lt
 8004520:	9204      	strlt	r2, [sp, #16]
 8004522:	7823      	ldrb	r3, [r4, #0]
 8004524:	2b2e      	cmp	r3, #46	@ 0x2e
 8004526:	d10a      	bne.n	800453e <_vfiprintf_r+0x156>
 8004528:	7863      	ldrb	r3, [r4, #1]
 800452a:	2b2a      	cmp	r3, #42	@ 0x2a
 800452c:	d132      	bne.n	8004594 <_vfiprintf_r+0x1ac>
 800452e:	9b03      	ldr	r3, [sp, #12]
 8004530:	1d1a      	adds	r2, r3, #4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	9203      	str	r2, [sp, #12]
 8004536:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800453a:	3402      	adds	r4, #2
 800453c:	9305      	str	r3, [sp, #20]
 800453e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004614 <_vfiprintf_r+0x22c>
 8004542:	7821      	ldrb	r1, [r4, #0]
 8004544:	2203      	movs	r2, #3
 8004546:	4650      	mov	r0, sl
 8004548:	f7fb fe4a 	bl	80001e0 <memchr>
 800454c:	b138      	cbz	r0, 800455e <_vfiprintf_r+0x176>
 800454e:	9b04      	ldr	r3, [sp, #16]
 8004550:	eba0 000a 	sub.w	r0, r0, sl
 8004554:	2240      	movs	r2, #64	@ 0x40
 8004556:	4082      	lsls	r2, r0
 8004558:	4313      	orrs	r3, r2
 800455a:	3401      	adds	r4, #1
 800455c:	9304      	str	r3, [sp, #16]
 800455e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004562:	4829      	ldr	r0, [pc, #164]	@ (8004608 <_vfiprintf_r+0x220>)
 8004564:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004568:	2206      	movs	r2, #6
 800456a:	f7fb fe39 	bl	80001e0 <memchr>
 800456e:	2800      	cmp	r0, #0
 8004570:	d03f      	beq.n	80045f2 <_vfiprintf_r+0x20a>
 8004572:	4b26      	ldr	r3, [pc, #152]	@ (800460c <_vfiprintf_r+0x224>)
 8004574:	bb1b      	cbnz	r3, 80045be <_vfiprintf_r+0x1d6>
 8004576:	9b03      	ldr	r3, [sp, #12]
 8004578:	3307      	adds	r3, #7
 800457a:	f023 0307 	bic.w	r3, r3, #7
 800457e:	3308      	adds	r3, #8
 8004580:	9303      	str	r3, [sp, #12]
 8004582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004584:	443b      	add	r3, r7
 8004586:	9309      	str	r3, [sp, #36]	@ 0x24
 8004588:	e76a      	b.n	8004460 <_vfiprintf_r+0x78>
 800458a:	fb0c 3202 	mla	r2, ip, r2, r3
 800458e:	460c      	mov	r4, r1
 8004590:	2001      	movs	r0, #1
 8004592:	e7a8      	b.n	80044e6 <_vfiprintf_r+0xfe>
 8004594:	2300      	movs	r3, #0
 8004596:	3401      	adds	r4, #1
 8004598:	9305      	str	r3, [sp, #20]
 800459a:	4619      	mov	r1, r3
 800459c:	f04f 0c0a 	mov.w	ip, #10
 80045a0:	4620      	mov	r0, r4
 80045a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045a6:	3a30      	subs	r2, #48	@ 0x30
 80045a8:	2a09      	cmp	r2, #9
 80045aa:	d903      	bls.n	80045b4 <_vfiprintf_r+0x1cc>
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0c6      	beq.n	800453e <_vfiprintf_r+0x156>
 80045b0:	9105      	str	r1, [sp, #20]
 80045b2:	e7c4      	b.n	800453e <_vfiprintf_r+0x156>
 80045b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80045b8:	4604      	mov	r4, r0
 80045ba:	2301      	movs	r3, #1
 80045bc:	e7f0      	b.n	80045a0 <_vfiprintf_r+0x1b8>
 80045be:	ab03      	add	r3, sp, #12
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	462a      	mov	r2, r5
 80045c4:	4b12      	ldr	r3, [pc, #72]	@ (8004610 <_vfiprintf_r+0x228>)
 80045c6:	a904      	add	r1, sp, #16
 80045c8:	4630      	mov	r0, r6
 80045ca:	f3af 8000 	nop.w
 80045ce:	4607      	mov	r7, r0
 80045d0:	1c78      	adds	r0, r7, #1
 80045d2:	d1d6      	bne.n	8004582 <_vfiprintf_r+0x19a>
 80045d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045d6:	07d9      	lsls	r1, r3, #31
 80045d8:	d405      	bmi.n	80045e6 <_vfiprintf_r+0x1fe>
 80045da:	89ab      	ldrh	r3, [r5, #12]
 80045dc:	059a      	lsls	r2, r3, #22
 80045de:	d402      	bmi.n	80045e6 <_vfiprintf_r+0x1fe>
 80045e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045e2:	f7ff fddd 	bl	80041a0 <__retarget_lock_release_recursive>
 80045e6:	89ab      	ldrh	r3, [r5, #12]
 80045e8:	065b      	lsls	r3, r3, #25
 80045ea:	f53f af1f 	bmi.w	800442c <_vfiprintf_r+0x44>
 80045ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045f0:	e71e      	b.n	8004430 <_vfiprintf_r+0x48>
 80045f2:	ab03      	add	r3, sp, #12
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	462a      	mov	r2, r5
 80045f8:	4b05      	ldr	r3, [pc, #20]	@ (8004610 <_vfiprintf_r+0x228>)
 80045fa:	a904      	add	r1, sp, #16
 80045fc:	4630      	mov	r0, r6
 80045fe:	f000 f879 	bl	80046f4 <_printf_i>
 8004602:	e7e4      	b.n	80045ce <_vfiprintf_r+0x1e6>
 8004604:	08004d3c 	.word	0x08004d3c
 8004608:	08004d46 	.word	0x08004d46
 800460c:	00000000 	.word	0x00000000
 8004610:	080043c3 	.word	0x080043c3
 8004614:	08004d42 	.word	0x08004d42

08004618 <_printf_common>:
 8004618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800461c:	4616      	mov	r6, r2
 800461e:	4698      	mov	r8, r3
 8004620:	688a      	ldr	r2, [r1, #8]
 8004622:	690b      	ldr	r3, [r1, #16]
 8004624:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004628:	4293      	cmp	r3, r2
 800462a:	bfb8      	it	lt
 800462c:	4613      	movlt	r3, r2
 800462e:	6033      	str	r3, [r6, #0]
 8004630:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004634:	4607      	mov	r7, r0
 8004636:	460c      	mov	r4, r1
 8004638:	b10a      	cbz	r2, 800463e <_printf_common+0x26>
 800463a:	3301      	adds	r3, #1
 800463c:	6033      	str	r3, [r6, #0]
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	0699      	lsls	r1, r3, #26
 8004642:	bf42      	ittt	mi
 8004644:	6833      	ldrmi	r3, [r6, #0]
 8004646:	3302      	addmi	r3, #2
 8004648:	6033      	strmi	r3, [r6, #0]
 800464a:	6825      	ldr	r5, [r4, #0]
 800464c:	f015 0506 	ands.w	r5, r5, #6
 8004650:	d106      	bne.n	8004660 <_printf_common+0x48>
 8004652:	f104 0a19 	add.w	sl, r4, #25
 8004656:	68e3      	ldr	r3, [r4, #12]
 8004658:	6832      	ldr	r2, [r6, #0]
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	42ab      	cmp	r3, r5
 800465e:	dc26      	bgt.n	80046ae <_printf_common+0x96>
 8004660:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004664:	6822      	ldr	r2, [r4, #0]
 8004666:	3b00      	subs	r3, #0
 8004668:	bf18      	it	ne
 800466a:	2301      	movne	r3, #1
 800466c:	0692      	lsls	r2, r2, #26
 800466e:	d42b      	bmi.n	80046c8 <_printf_common+0xb0>
 8004670:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004674:	4641      	mov	r1, r8
 8004676:	4638      	mov	r0, r7
 8004678:	47c8      	blx	r9
 800467a:	3001      	adds	r0, #1
 800467c:	d01e      	beq.n	80046bc <_printf_common+0xa4>
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	6922      	ldr	r2, [r4, #16]
 8004682:	f003 0306 	and.w	r3, r3, #6
 8004686:	2b04      	cmp	r3, #4
 8004688:	bf02      	ittt	eq
 800468a:	68e5      	ldreq	r5, [r4, #12]
 800468c:	6833      	ldreq	r3, [r6, #0]
 800468e:	1aed      	subeq	r5, r5, r3
 8004690:	68a3      	ldr	r3, [r4, #8]
 8004692:	bf0c      	ite	eq
 8004694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004698:	2500      	movne	r5, #0
 800469a:	4293      	cmp	r3, r2
 800469c:	bfc4      	itt	gt
 800469e:	1a9b      	subgt	r3, r3, r2
 80046a0:	18ed      	addgt	r5, r5, r3
 80046a2:	2600      	movs	r6, #0
 80046a4:	341a      	adds	r4, #26
 80046a6:	42b5      	cmp	r5, r6
 80046a8:	d11a      	bne.n	80046e0 <_printf_common+0xc8>
 80046aa:	2000      	movs	r0, #0
 80046ac:	e008      	b.n	80046c0 <_printf_common+0xa8>
 80046ae:	2301      	movs	r3, #1
 80046b0:	4652      	mov	r2, sl
 80046b2:	4641      	mov	r1, r8
 80046b4:	4638      	mov	r0, r7
 80046b6:	47c8      	blx	r9
 80046b8:	3001      	adds	r0, #1
 80046ba:	d103      	bne.n	80046c4 <_printf_common+0xac>
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295
 80046c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c4:	3501      	adds	r5, #1
 80046c6:	e7c6      	b.n	8004656 <_printf_common+0x3e>
 80046c8:	18e1      	adds	r1, r4, r3
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	2030      	movs	r0, #48	@ 0x30
 80046ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046d2:	4422      	add	r2, r4
 80046d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046dc:	3302      	adds	r3, #2
 80046de:	e7c7      	b.n	8004670 <_printf_common+0x58>
 80046e0:	2301      	movs	r3, #1
 80046e2:	4622      	mov	r2, r4
 80046e4:	4641      	mov	r1, r8
 80046e6:	4638      	mov	r0, r7
 80046e8:	47c8      	blx	r9
 80046ea:	3001      	adds	r0, #1
 80046ec:	d0e6      	beq.n	80046bc <_printf_common+0xa4>
 80046ee:	3601      	adds	r6, #1
 80046f0:	e7d9      	b.n	80046a6 <_printf_common+0x8e>
	...

080046f4 <_printf_i>:
 80046f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046f8:	7e0f      	ldrb	r7, [r1, #24]
 80046fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046fc:	2f78      	cmp	r7, #120	@ 0x78
 80046fe:	4691      	mov	r9, r2
 8004700:	4680      	mov	r8, r0
 8004702:	460c      	mov	r4, r1
 8004704:	469a      	mov	sl, r3
 8004706:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800470a:	d807      	bhi.n	800471c <_printf_i+0x28>
 800470c:	2f62      	cmp	r7, #98	@ 0x62
 800470e:	d80a      	bhi.n	8004726 <_printf_i+0x32>
 8004710:	2f00      	cmp	r7, #0
 8004712:	f000 80d2 	beq.w	80048ba <_printf_i+0x1c6>
 8004716:	2f58      	cmp	r7, #88	@ 0x58
 8004718:	f000 80b9 	beq.w	800488e <_printf_i+0x19a>
 800471c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004720:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004724:	e03a      	b.n	800479c <_printf_i+0xa8>
 8004726:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800472a:	2b15      	cmp	r3, #21
 800472c:	d8f6      	bhi.n	800471c <_printf_i+0x28>
 800472e:	a101      	add	r1, pc, #4	@ (adr r1, 8004734 <_printf_i+0x40>)
 8004730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004734:	0800478d 	.word	0x0800478d
 8004738:	080047a1 	.word	0x080047a1
 800473c:	0800471d 	.word	0x0800471d
 8004740:	0800471d 	.word	0x0800471d
 8004744:	0800471d 	.word	0x0800471d
 8004748:	0800471d 	.word	0x0800471d
 800474c:	080047a1 	.word	0x080047a1
 8004750:	0800471d 	.word	0x0800471d
 8004754:	0800471d 	.word	0x0800471d
 8004758:	0800471d 	.word	0x0800471d
 800475c:	0800471d 	.word	0x0800471d
 8004760:	080048a1 	.word	0x080048a1
 8004764:	080047cb 	.word	0x080047cb
 8004768:	0800485b 	.word	0x0800485b
 800476c:	0800471d 	.word	0x0800471d
 8004770:	0800471d 	.word	0x0800471d
 8004774:	080048c3 	.word	0x080048c3
 8004778:	0800471d 	.word	0x0800471d
 800477c:	080047cb 	.word	0x080047cb
 8004780:	0800471d 	.word	0x0800471d
 8004784:	0800471d 	.word	0x0800471d
 8004788:	08004863 	.word	0x08004863
 800478c:	6833      	ldr	r3, [r6, #0]
 800478e:	1d1a      	adds	r2, r3, #4
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6032      	str	r2, [r6, #0]
 8004794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004798:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800479c:	2301      	movs	r3, #1
 800479e:	e09d      	b.n	80048dc <_printf_i+0x1e8>
 80047a0:	6833      	ldr	r3, [r6, #0]
 80047a2:	6820      	ldr	r0, [r4, #0]
 80047a4:	1d19      	adds	r1, r3, #4
 80047a6:	6031      	str	r1, [r6, #0]
 80047a8:	0606      	lsls	r6, r0, #24
 80047aa:	d501      	bpl.n	80047b0 <_printf_i+0xbc>
 80047ac:	681d      	ldr	r5, [r3, #0]
 80047ae:	e003      	b.n	80047b8 <_printf_i+0xc4>
 80047b0:	0645      	lsls	r5, r0, #25
 80047b2:	d5fb      	bpl.n	80047ac <_printf_i+0xb8>
 80047b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047b8:	2d00      	cmp	r5, #0
 80047ba:	da03      	bge.n	80047c4 <_printf_i+0xd0>
 80047bc:	232d      	movs	r3, #45	@ 0x2d
 80047be:	426d      	negs	r5, r5
 80047c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047c4:	4859      	ldr	r0, [pc, #356]	@ (800492c <_printf_i+0x238>)
 80047c6:	230a      	movs	r3, #10
 80047c8:	e011      	b.n	80047ee <_printf_i+0xfa>
 80047ca:	6821      	ldr	r1, [r4, #0]
 80047cc:	6833      	ldr	r3, [r6, #0]
 80047ce:	0608      	lsls	r0, r1, #24
 80047d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80047d4:	d402      	bmi.n	80047dc <_printf_i+0xe8>
 80047d6:	0649      	lsls	r1, r1, #25
 80047d8:	bf48      	it	mi
 80047da:	b2ad      	uxthmi	r5, r5
 80047dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80047de:	4853      	ldr	r0, [pc, #332]	@ (800492c <_printf_i+0x238>)
 80047e0:	6033      	str	r3, [r6, #0]
 80047e2:	bf14      	ite	ne
 80047e4:	230a      	movne	r3, #10
 80047e6:	2308      	moveq	r3, #8
 80047e8:	2100      	movs	r1, #0
 80047ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047ee:	6866      	ldr	r6, [r4, #4]
 80047f0:	60a6      	str	r6, [r4, #8]
 80047f2:	2e00      	cmp	r6, #0
 80047f4:	bfa2      	ittt	ge
 80047f6:	6821      	ldrge	r1, [r4, #0]
 80047f8:	f021 0104 	bicge.w	r1, r1, #4
 80047fc:	6021      	strge	r1, [r4, #0]
 80047fe:	b90d      	cbnz	r5, 8004804 <_printf_i+0x110>
 8004800:	2e00      	cmp	r6, #0
 8004802:	d04b      	beq.n	800489c <_printf_i+0x1a8>
 8004804:	4616      	mov	r6, r2
 8004806:	fbb5 f1f3 	udiv	r1, r5, r3
 800480a:	fb03 5711 	mls	r7, r3, r1, r5
 800480e:	5dc7      	ldrb	r7, [r0, r7]
 8004810:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004814:	462f      	mov	r7, r5
 8004816:	42bb      	cmp	r3, r7
 8004818:	460d      	mov	r5, r1
 800481a:	d9f4      	bls.n	8004806 <_printf_i+0x112>
 800481c:	2b08      	cmp	r3, #8
 800481e:	d10b      	bne.n	8004838 <_printf_i+0x144>
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	07df      	lsls	r7, r3, #31
 8004824:	d508      	bpl.n	8004838 <_printf_i+0x144>
 8004826:	6923      	ldr	r3, [r4, #16]
 8004828:	6861      	ldr	r1, [r4, #4]
 800482a:	4299      	cmp	r1, r3
 800482c:	bfde      	ittt	le
 800482e:	2330      	movle	r3, #48	@ 0x30
 8004830:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004834:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004838:	1b92      	subs	r2, r2, r6
 800483a:	6122      	str	r2, [r4, #16]
 800483c:	f8cd a000 	str.w	sl, [sp]
 8004840:	464b      	mov	r3, r9
 8004842:	aa03      	add	r2, sp, #12
 8004844:	4621      	mov	r1, r4
 8004846:	4640      	mov	r0, r8
 8004848:	f7ff fee6 	bl	8004618 <_printf_common>
 800484c:	3001      	adds	r0, #1
 800484e:	d14a      	bne.n	80048e6 <_printf_i+0x1f2>
 8004850:	f04f 30ff 	mov.w	r0, #4294967295
 8004854:	b004      	add	sp, #16
 8004856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	f043 0320 	orr.w	r3, r3, #32
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	4833      	ldr	r0, [pc, #204]	@ (8004930 <_printf_i+0x23c>)
 8004864:	2778      	movs	r7, #120	@ 0x78
 8004866:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	6831      	ldr	r1, [r6, #0]
 800486e:	061f      	lsls	r7, r3, #24
 8004870:	f851 5b04 	ldr.w	r5, [r1], #4
 8004874:	d402      	bmi.n	800487c <_printf_i+0x188>
 8004876:	065f      	lsls	r7, r3, #25
 8004878:	bf48      	it	mi
 800487a:	b2ad      	uxthmi	r5, r5
 800487c:	6031      	str	r1, [r6, #0]
 800487e:	07d9      	lsls	r1, r3, #31
 8004880:	bf44      	itt	mi
 8004882:	f043 0320 	orrmi.w	r3, r3, #32
 8004886:	6023      	strmi	r3, [r4, #0]
 8004888:	b11d      	cbz	r5, 8004892 <_printf_i+0x19e>
 800488a:	2310      	movs	r3, #16
 800488c:	e7ac      	b.n	80047e8 <_printf_i+0xf4>
 800488e:	4827      	ldr	r0, [pc, #156]	@ (800492c <_printf_i+0x238>)
 8004890:	e7e9      	b.n	8004866 <_printf_i+0x172>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	f023 0320 	bic.w	r3, r3, #32
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	e7f6      	b.n	800488a <_printf_i+0x196>
 800489c:	4616      	mov	r6, r2
 800489e:	e7bd      	b.n	800481c <_printf_i+0x128>
 80048a0:	6833      	ldr	r3, [r6, #0]
 80048a2:	6825      	ldr	r5, [r4, #0]
 80048a4:	6961      	ldr	r1, [r4, #20]
 80048a6:	1d18      	adds	r0, r3, #4
 80048a8:	6030      	str	r0, [r6, #0]
 80048aa:	062e      	lsls	r6, r5, #24
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	d501      	bpl.n	80048b4 <_printf_i+0x1c0>
 80048b0:	6019      	str	r1, [r3, #0]
 80048b2:	e002      	b.n	80048ba <_printf_i+0x1c6>
 80048b4:	0668      	lsls	r0, r5, #25
 80048b6:	d5fb      	bpl.n	80048b0 <_printf_i+0x1bc>
 80048b8:	8019      	strh	r1, [r3, #0]
 80048ba:	2300      	movs	r3, #0
 80048bc:	6123      	str	r3, [r4, #16]
 80048be:	4616      	mov	r6, r2
 80048c0:	e7bc      	b.n	800483c <_printf_i+0x148>
 80048c2:	6833      	ldr	r3, [r6, #0]
 80048c4:	1d1a      	adds	r2, r3, #4
 80048c6:	6032      	str	r2, [r6, #0]
 80048c8:	681e      	ldr	r6, [r3, #0]
 80048ca:	6862      	ldr	r2, [r4, #4]
 80048cc:	2100      	movs	r1, #0
 80048ce:	4630      	mov	r0, r6
 80048d0:	f7fb fc86 	bl	80001e0 <memchr>
 80048d4:	b108      	cbz	r0, 80048da <_printf_i+0x1e6>
 80048d6:	1b80      	subs	r0, r0, r6
 80048d8:	6060      	str	r0, [r4, #4]
 80048da:	6863      	ldr	r3, [r4, #4]
 80048dc:	6123      	str	r3, [r4, #16]
 80048de:	2300      	movs	r3, #0
 80048e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048e4:	e7aa      	b.n	800483c <_printf_i+0x148>
 80048e6:	6923      	ldr	r3, [r4, #16]
 80048e8:	4632      	mov	r2, r6
 80048ea:	4649      	mov	r1, r9
 80048ec:	4640      	mov	r0, r8
 80048ee:	47d0      	blx	sl
 80048f0:	3001      	adds	r0, #1
 80048f2:	d0ad      	beq.n	8004850 <_printf_i+0x15c>
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	079b      	lsls	r3, r3, #30
 80048f8:	d413      	bmi.n	8004922 <_printf_i+0x22e>
 80048fa:	68e0      	ldr	r0, [r4, #12]
 80048fc:	9b03      	ldr	r3, [sp, #12]
 80048fe:	4298      	cmp	r0, r3
 8004900:	bfb8      	it	lt
 8004902:	4618      	movlt	r0, r3
 8004904:	e7a6      	b.n	8004854 <_printf_i+0x160>
 8004906:	2301      	movs	r3, #1
 8004908:	4632      	mov	r2, r6
 800490a:	4649      	mov	r1, r9
 800490c:	4640      	mov	r0, r8
 800490e:	47d0      	blx	sl
 8004910:	3001      	adds	r0, #1
 8004912:	d09d      	beq.n	8004850 <_printf_i+0x15c>
 8004914:	3501      	adds	r5, #1
 8004916:	68e3      	ldr	r3, [r4, #12]
 8004918:	9903      	ldr	r1, [sp, #12]
 800491a:	1a5b      	subs	r3, r3, r1
 800491c:	42ab      	cmp	r3, r5
 800491e:	dcf2      	bgt.n	8004906 <_printf_i+0x212>
 8004920:	e7eb      	b.n	80048fa <_printf_i+0x206>
 8004922:	2500      	movs	r5, #0
 8004924:	f104 0619 	add.w	r6, r4, #25
 8004928:	e7f5      	b.n	8004916 <_printf_i+0x222>
 800492a:	bf00      	nop
 800492c:	08004d4d 	.word	0x08004d4d
 8004930:	08004d5e 	.word	0x08004d5e

08004934 <__sflush_r>:
 8004934:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800493c:	0716      	lsls	r6, r2, #28
 800493e:	4605      	mov	r5, r0
 8004940:	460c      	mov	r4, r1
 8004942:	d454      	bmi.n	80049ee <__sflush_r+0xba>
 8004944:	684b      	ldr	r3, [r1, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	dc02      	bgt.n	8004950 <__sflush_r+0x1c>
 800494a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800494c:	2b00      	cmp	r3, #0
 800494e:	dd48      	ble.n	80049e2 <__sflush_r+0xae>
 8004950:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004952:	2e00      	cmp	r6, #0
 8004954:	d045      	beq.n	80049e2 <__sflush_r+0xae>
 8004956:	2300      	movs	r3, #0
 8004958:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800495c:	682f      	ldr	r7, [r5, #0]
 800495e:	6a21      	ldr	r1, [r4, #32]
 8004960:	602b      	str	r3, [r5, #0]
 8004962:	d030      	beq.n	80049c6 <__sflush_r+0x92>
 8004964:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004966:	89a3      	ldrh	r3, [r4, #12]
 8004968:	0759      	lsls	r1, r3, #29
 800496a:	d505      	bpl.n	8004978 <__sflush_r+0x44>
 800496c:	6863      	ldr	r3, [r4, #4]
 800496e:	1ad2      	subs	r2, r2, r3
 8004970:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004972:	b10b      	cbz	r3, 8004978 <__sflush_r+0x44>
 8004974:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004976:	1ad2      	subs	r2, r2, r3
 8004978:	2300      	movs	r3, #0
 800497a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800497c:	6a21      	ldr	r1, [r4, #32]
 800497e:	4628      	mov	r0, r5
 8004980:	47b0      	blx	r6
 8004982:	1c43      	adds	r3, r0, #1
 8004984:	89a3      	ldrh	r3, [r4, #12]
 8004986:	d106      	bne.n	8004996 <__sflush_r+0x62>
 8004988:	6829      	ldr	r1, [r5, #0]
 800498a:	291d      	cmp	r1, #29
 800498c:	d82b      	bhi.n	80049e6 <__sflush_r+0xb2>
 800498e:	4a2a      	ldr	r2, [pc, #168]	@ (8004a38 <__sflush_r+0x104>)
 8004990:	410a      	asrs	r2, r1
 8004992:	07d6      	lsls	r6, r2, #31
 8004994:	d427      	bmi.n	80049e6 <__sflush_r+0xb2>
 8004996:	2200      	movs	r2, #0
 8004998:	6062      	str	r2, [r4, #4]
 800499a:	04d9      	lsls	r1, r3, #19
 800499c:	6922      	ldr	r2, [r4, #16]
 800499e:	6022      	str	r2, [r4, #0]
 80049a0:	d504      	bpl.n	80049ac <__sflush_r+0x78>
 80049a2:	1c42      	adds	r2, r0, #1
 80049a4:	d101      	bne.n	80049aa <__sflush_r+0x76>
 80049a6:	682b      	ldr	r3, [r5, #0]
 80049a8:	b903      	cbnz	r3, 80049ac <__sflush_r+0x78>
 80049aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80049ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049ae:	602f      	str	r7, [r5, #0]
 80049b0:	b1b9      	cbz	r1, 80049e2 <__sflush_r+0xae>
 80049b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049b6:	4299      	cmp	r1, r3
 80049b8:	d002      	beq.n	80049c0 <__sflush_r+0x8c>
 80049ba:	4628      	mov	r0, r5
 80049bc:	f7ff fbf2 	bl	80041a4 <_free_r>
 80049c0:	2300      	movs	r3, #0
 80049c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80049c4:	e00d      	b.n	80049e2 <__sflush_r+0xae>
 80049c6:	2301      	movs	r3, #1
 80049c8:	4628      	mov	r0, r5
 80049ca:	47b0      	blx	r6
 80049cc:	4602      	mov	r2, r0
 80049ce:	1c50      	adds	r0, r2, #1
 80049d0:	d1c9      	bne.n	8004966 <__sflush_r+0x32>
 80049d2:	682b      	ldr	r3, [r5, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0c6      	beq.n	8004966 <__sflush_r+0x32>
 80049d8:	2b1d      	cmp	r3, #29
 80049da:	d001      	beq.n	80049e0 <__sflush_r+0xac>
 80049dc:	2b16      	cmp	r3, #22
 80049de:	d11e      	bne.n	8004a1e <__sflush_r+0xea>
 80049e0:	602f      	str	r7, [r5, #0]
 80049e2:	2000      	movs	r0, #0
 80049e4:	e022      	b.n	8004a2c <__sflush_r+0xf8>
 80049e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ea:	b21b      	sxth	r3, r3
 80049ec:	e01b      	b.n	8004a26 <__sflush_r+0xf2>
 80049ee:	690f      	ldr	r7, [r1, #16]
 80049f0:	2f00      	cmp	r7, #0
 80049f2:	d0f6      	beq.n	80049e2 <__sflush_r+0xae>
 80049f4:	0793      	lsls	r3, r2, #30
 80049f6:	680e      	ldr	r6, [r1, #0]
 80049f8:	bf08      	it	eq
 80049fa:	694b      	ldreq	r3, [r1, #20]
 80049fc:	600f      	str	r7, [r1, #0]
 80049fe:	bf18      	it	ne
 8004a00:	2300      	movne	r3, #0
 8004a02:	eba6 0807 	sub.w	r8, r6, r7
 8004a06:	608b      	str	r3, [r1, #8]
 8004a08:	f1b8 0f00 	cmp.w	r8, #0
 8004a0c:	dde9      	ble.n	80049e2 <__sflush_r+0xae>
 8004a0e:	6a21      	ldr	r1, [r4, #32]
 8004a10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004a12:	4643      	mov	r3, r8
 8004a14:	463a      	mov	r2, r7
 8004a16:	4628      	mov	r0, r5
 8004a18:	47b0      	blx	r6
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	dc08      	bgt.n	8004a30 <__sflush_r+0xfc>
 8004a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a26:	81a3      	strh	r3, [r4, #12]
 8004a28:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a30:	4407      	add	r7, r0
 8004a32:	eba8 0800 	sub.w	r8, r8, r0
 8004a36:	e7e7      	b.n	8004a08 <__sflush_r+0xd4>
 8004a38:	dfbffffe 	.word	0xdfbffffe

08004a3c <_fflush_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	690b      	ldr	r3, [r1, #16]
 8004a40:	4605      	mov	r5, r0
 8004a42:	460c      	mov	r4, r1
 8004a44:	b913      	cbnz	r3, 8004a4c <_fflush_r+0x10>
 8004a46:	2500      	movs	r5, #0
 8004a48:	4628      	mov	r0, r5
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	b118      	cbz	r0, 8004a56 <_fflush_r+0x1a>
 8004a4e:	6a03      	ldr	r3, [r0, #32]
 8004a50:	b90b      	cbnz	r3, 8004a56 <_fflush_r+0x1a>
 8004a52:	f7ff fa9f 	bl	8003f94 <__sinit>
 8004a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f3      	beq.n	8004a46 <_fflush_r+0xa>
 8004a5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a60:	07d0      	lsls	r0, r2, #31
 8004a62:	d404      	bmi.n	8004a6e <_fflush_r+0x32>
 8004a64:	0599      	lsls	r1, r3, #22
 8004a66:	d402      	bmi.n	8004a6e <_fflush_r+0x32>
 8004a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a6a:	f7ff fb98 	bl	800419e <__retarget_lock_acquire_recursive>
 8004a6e:	4628      	mov	r0, r5
 8004a70:	4621      	mov	r1, r4
 8004a72:	f7ff ff5f 	bl	8004934 <__sflush_r>
 8004a76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a78:	07da      	lsls	r2, r3, #31
 8004a7a:	4605      	mov	r5, r0
 8004a7c:	d4e4      	bmi.n	8004a48 <_fflush_r+0xc>
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	059b      	lsls	r3, r3, #22
 8004a82:	d4e1      	bmi.n	8004a48 <_fflush_r+0xc>
 8004a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a86:	f7ff fb8b 	bl	80041a0 <__retarget_lock_release_recursive>
 8004a8a:	e7dd      	b.n	8004a48 <_fflush_r+0xc>

08004a8c <__swbuf_r>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	460e      	mov	r6, r1
 8004a90:	4614      	mov	r4, r2
 8004a92:	4605      	mov	r5, r0
 8004a94:	b118      	cbz	r0, 8004a9e <__swbuf_r+0x12>
 8004a96:	6a03      	ldr	r3, [r0, #32]
 8004a98:	b90b      	cbnz	r3, 8004a9e <__swbuf_r+0x12>
 8004a9a:	f7ff fa7b 	bl	8003f94 <__sinit>
 8004a9e:	69a3      	ldr	r3, [r4, #24]
 8004aa0:	60a3      	str	r3, [r4, #8]
 8004aa2:	89a3      	ldrh	r3, [r4, #12]
 8004aa4:	071a      	lsls	r2, r3, #28
 8004aa6:	d501      	bpl.n	8004aac <__swbuf_r+0x20>
 8004aa8:	6923      	ldr	r3, [r4, #16]
 8004aaa:	b943      	cbnz	r3, 8004abe <__swbuf_r+0x32>
 8004aac:	4621      	mov	r1, r4
 8004aae:	4628      	mov	r0, r5
 8004ab0:	f000 f82a 	bl	8004b08 <__swsetup_r>
 8004ab4:	b118      	cbz	r0, 8004abe <__swbuf_r+0x32>
 8004ab6:	f04f 37ff 	mov.w	r7, #4294967295
 8004aba:	4638      	mov	r0, r7
 8004abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	6922      	ldr	r2, [r4, #16]
 8004ac2:	1a98      	subs	r0, r3, r2
 8004ac4:	6963      	ldr	r3, [r4, #20]
 8004ac6:	b2f6      	uxtb	r6, r6
 8004ac8:	4283      	cmp	r3, r0
 8004aca:	4637      	mov	r7, r6
 8004acc:	dc05      	bgt.n	8004ada <__swbuf_r+0x4e>
 8004ace:	4621      	mov	r1, r4
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	f7ff ffb3 	bl	8004a3c <_fflush_r>
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	d1ed      	bne.n	8004ab6 <__swbuf_r+0x2a>
 8004ada:	68a3      	ldr	r3, [r4, #8]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	60a3      	str	r3, [r4, #8]
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	6022      	str	r2, [r4, #0]
 8004ae6:	701e      	strb	r6, [r3, #0]
 8004ae8:	6962      	ldr	r2, [r4, #20]
 8004aea:	1c43      	adds	r3, r0, #1
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d004      	beq.n	8004afa <__swbuf_r+0x6e>
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	07db      	lsls	r3, r3, #31
 8004af4:	d5e1      	bpl.n	8004aba <__swbuf_r+0x2e>
 8004af6:	2e0a      	cmp	r6, #10
 8004af8:	d1df      	bne.n	8004aba <__swbuf_r+0x2e>
 8004afa:	4621      	mov	r1, r4
 8004afc:	4628      	mov	r0, r5
 8004afe:	f7ff ff9d 	bl	8004a3c <_fflush_r>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	d0d9      	beq.n	8004aba <__swbuf_r+0x2e>
 8004b06:	e7d6      	b.n	8004ab6 <__swbuf_r+0x2a>

08004b08 <__swsetup_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4b29      	ldr	r3, [pc, #164]	@ (8004bb0 <__swsetup_r+0xa8>)
 8004b0c:	4605      	mov	r5, r0
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	460c      	mov	r4, r1
 8004b12:	b118      	cbz	r0, 8004b1c <__swsetup_r+0x14>
 8004b14:	6a03      	ldr	r3, [r0, #32]
 8004b16:	b90b      	cbnz	r3, 8004b1c <__swsetup_r+0x14>
 8004b18:	f7ff fa3c 	bl	8003f94 <__sinit>
 8004b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b20:	0719      	lsls	r1, r3, #28
 8004b22:	d422      	bmi.n	8004b6a <__swsetup_r+0x62>
 8004b24:	06da      	lsls	r2, r3, #27
 8004b26:	d407      	bmi.n	8004b38 <__swsetup_r+0x30>
 8004b28:	2209      	movs	r2, #9
 8004b2a:	602a      	str	r2, [r5, #0]
 8004b2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b30:	81a3      	strh	r3, [r4, #12]
 8004b32:	f04f 30ff 	mov.w	r0, #4294967295
 8004b36:	e033      	b.n	8004ba0 <__swsetup_r+0x98>
 8004b38:	0758      	lsls	r0, r3, #29
 8004b3a:	d512      	bpl.n	8004b62 <__swsetup_r+0x5a>
 8004b3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b3e:	b141      	cbz	r1, 8004b52 <__swsetup_r+0x4a>
 8004b40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b44:	4299      	cmp	r1, r3
 8004b46:	d002      	beq.n	8004b4e <__swsetup_r+0x46>
 8004b48:	4628      	mov	r0, r5
 8004b4a:	f7ff fb2b 	bl	80041a4 <_free_r>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b52:	89a3      	ldrh	r3, [r4, #12]
 8004b54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004b58:	81a3      	strh	r3, [r4, #12]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	6063      	str	r3, [r4, #4]
 8004b5e:	6923      	ldr	r3, [r4, #16]
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	89a3      	ldrh	r3, [r4, #12]
 8004b64:	f043 0308 	orr.w	r3, r3, #8
 8004b68:	81a3      	strh	r3, [r4, #12]
 8004b6a:	6923      	ldr	r3, [r4, #16]
 8004b6c:	b94b      	cbnz	r3, 8004b82 <__swsetup_r+0x7a>
 8004b6e:	89a3      	ldrh	r3, [r4, #12]
 8004b70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b78:	d003      	beq.n	8004b82 <__swsetup_r+0x7a>
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	f000 f84f 	bl	8004c20 <__smakebuf_r>
 8004b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b86:	f013 0201 	ands.w	r2, r3, #1
 8004b8a:	d00a      	beq.n	8004ba2 <__swsetup_r+0x9a>
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	60a2      	str	r2, [r4, #8]
 8004b90:	6962      	ldr	r2, [r4, #20]
 8004b92:	4252      	negs	r2, r2
 8004b94:	61a2      	str	r2, [r4, #24]
 8004b96:	6922      	ldr	r2, [r4, #16]
 8004b98:	b942      	cbnz	r2, 8004bac <__swsetup_r+0xa4>
 8004b9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004b9e:	d1c5      	bne.n	8004b2c <__swsetup_r+0x24>
 8004ba0:	bd38      	pop	{r3, r4, r5, pc}
 8004ba2:	0799      	lsls	r1, r3, #30
 8004ba4:	bf58      	it	pl
 8004ba6:	6962      	ldrpl	r2, [r4, #20]
 8004ba8:	60a2      	str	r2, [r4, #8]
 8004baa:	e7f4      	b.n	8004b96 <__swsetup_r+0x8e>
 8004bac:	2000      	movs	r0, #0
 8004bae:	e7f7      	b.n	8004ba0 <__swsetup_r+0x98>
 8004bb0:	20000018 	.word	0x20000018

08004bb4 <_sbrk_r>:
 8004bb4:	b538      	push	{r3, r4, r5, lr}
 8004bb6:	4d06      	ldr	r5, [pc, #24]	@ (8004bd0 <_sbrk_r+0x1c>)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	4604      	mov	r4, r0
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	602b      	str	r3, [r5, #0]
 8004bc0:	f7fb ff82 	bl	8000ac8 <_sbrk>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_sbrk_r+0x1a>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_sbrk_r+0x1a>
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	200002bc 	.word	0x200002bc

08004bd4 <__swhatbuf_r>:
 8004bd4:	b570      	push	{r4, r5, r6, lr}
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bdc:	2900      	cmp	r1, #0
 8004bde:	b096      	sub	sp, #88	@ 0x58
 8004be0:	4615      	mov	r5, r2
 8004be2:	461e      	mov	r6, r3
 8004be4:	da0d      	bge.n	8004c02 <__swhatbuf_r+0x2e>
 8004be6:	89a3      	ldrh	r3, [r4, #12]
 8004be8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004bec:	f04f 0100 	mov.w	r1, #0
 8004bf0:	bf14      	ite	ne
 8004bf2:	2340      	movne	r3, #64	@ 0x40
 8004bf4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	6031      	str	r1, [r6, #0]
 8004bfc:	602b      	str	r3, [r5, #0]
 8004bfe:	b016      	add	sp, #88	@ 0x58
 8004c00:	bd70      	pop	{r4, r5, r6, pc}
 8004c02:	466a      	mov	r2, sp
 8004c04:	f000 f848 	bl	8004c98 <_fstat_r>
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	dbec      	blt.n	8004be6 <__swhatbuf_r+0x12>
 8004c0c:	9901      	ldr	r1, [sp, #4]
 8004c0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004c12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004c16:	4259      	negs	r1, r3
 8004c18:	4159      	adcs	r1, r3
 8004c1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c1e:	e7eb      	b.n	8004bf8 <__swhatbuf_r+0x24>

08004c20 <__smakebuf_r>:
 8004c20:	898b      	ldrh	r3, [r1, #12]
 8004c22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c24:	079d      	lsls	r5, r3, #30
 8004c26:	4606      	mov	r6, r0
 8004c28:	460c      	mov	r4, r1
 8004c2a:	d507      	bpl.n	8004c3c <__smakebuf_r+0x1c>
 8004c2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	6123      	str	r3, [r4, #16]
 8004c34:	2301      	movs	r3, #1
 8004c36:	6163      	str	r3, [r4, #20]
 8004c38:	b003      	add	sp, #12
 8004c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c3c:	ab01      	add	r3, sp, #4
 8004c3e:	466a      	mov	r2, sp
 8004c40:	f7ff ffc8 	bl	8004bd4 <__swhatbuf_r>
 8004c44:	9f00      	ldr	r7, [sp, #0]
 8004c46:	4605      	mov	r5, r0
 8004c48:	4639      	mov	r1, r7
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	f7ff fb16 	bl	800427c <_malloc_r>
 8004c50:	b948      	cbnz	r0, 8004c66 <__smakebuf_r+0x46>
 8004c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c56:	059a      	lsls	r2, r3, #22
 8004c58:	d4ee      	bmi.n	8004c38 <__smakebuf_r+0x18>
 8004c5a:	f023 0303 	bic.w	r3, r3, #3
 8004c5e:	f043 0302 	orr.w	r3, r3, #2
 8004c62:	81a3      	strh	r3, [r4, #12]
 8004c64:	e7e2      	b.n	8004c2c <__smakebuf_r+0xc>
 8004c66:	89a3      	ldrh	r3, [r4, #12]
 8004c68:	6020      	str	r0, [r4, #0]
 8004c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c6e:	81a3      	strh	r3, [r4, #12]
 8004c70:	9b01      	ldr	r3, [sp, #4]
 8004c72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c76:	b15b      	cbz	r3, 8004c90 <__smakebuf_r+0x70>
 8004c78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	f000 f81d 	bl	8004cbc <_isatty_r>
 8004c82:	b128      	cbz	r0, 8004c90 <__smakebuf_r+0x70>
 8004c84:	89a3      	ldrh	r3, [r4, #12]
 8004c86:	f023 0303 	bic.w	r3, r3, #3
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	81a3      	strh	r3, [r4, #12]
 8004c90:	89a3      	ldrh	r3, [r4, #12]
 8004c92:	431d      	orrs	r5, r3
 8004c94:	81a5      	strh	r5, [r4, #12]
 8004c96:	e7cf      	b.n	8004c38 <__smakebuf_r+0x18>

08004c98 <_fstat_r>:
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	4d07      	ldr	r5, [pc, #28]	@ (8004cb8 <_fstat_r+0x20>)
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	4608      	mov	r0, r1
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	602b      	str	r3, [r5, #0]
 8004ca6:	f7fb fee6 	bl	8000a76 <_fstat>
 8004caa:	1c43      	adds	r3, r0, #1
 8004cac:	d102      	bne.n	8004cb4 <_fstat_r+0x1c>
 8004cae:	682b      	ldr	r3, [r5, #0]
 8004cb0:	b103      	cbz	r3, 8004cb4 <_fstat_r+0x1c>
 8004cb2:	6023      	str	r3, [r4, #0]
 8004cb4:	bd38      	pop	{r3, r4, r5, pc}
 8004cb6:	bf00      	nop
 8004cb8:	200002bc 	.word	0x200002bc

08004cbc <_isatty_r>:
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	4d06      	ldr	r5, [pc, #24]	@ (8004cd8 <_isatty_r+0x1c>)
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	4608      	mov	r0, r1
 8004cc6:	602b      	str	r3, [r5, #0]
 8004cc8:	f7fb fee5 	bl	8000a96 <_isatty>
 8004ccc:	1c43      	adds	r3, r0, #1
 8004cce:	d102      	bne.n	8004cd6 <_isatty_r+0x1a>
 8004cd0:	682b      	ldr	r3, [r5, #0]
 8004cd2:	b103      	cbz	r3, 8004cd6 <_isatty_r+0x1a>
 8004cd4:	6023      	str	r3, [r4, #0]
 8004cd6:	bd38      	pop	{r3, r4, r5, pc}
 8004cd8:	200002bc 	.word	0x200002bc

08004cdc <_init>:
 8004cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cde:	bf00      	nop
 8004ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ce2:	bc08      	pop	{r3}
 8004ce4:	469e      	mov	lr, r3
 8004ce6:	4770      	bx	lr

08004ce8 <_fini>:
 8004ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cea:	bf00      	nop
 8004cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cee:	bc08      	pop	{r3}
 8004cf0:	469e      	mov	lr, r3
 8004cf2:	4770      	bx	lr
