
car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bdc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002d74  08002d74  00003d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d8c  08002d8c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d8c  08002d8c  00003d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d94  08002d94  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d94  08002d94  00003d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d98  08002d98  00003d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002d9c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08002da8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002da8  00004104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b95e  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001840  00000000  00000000  0000f99a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  000111e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000912  00000000  00000000  00011d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001562d  00000000  00000000  0001267a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb01  00000000  00000000  00027ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a565  00000000  00000000  000347a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bed0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030e4  00000000  00000000  000bed50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000c1e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002d5c 	.word	0x08002d5c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002d5c 	.word	0x08002d5c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fb8e 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f83a 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f9a0 	bl	8000818 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f94a 	bl	8000770 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80004dc:	f000 f89c 	bl	8000618 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 80004e0:	f000 f970 	bl	80007c4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // ENA
 80004e4:	2100      	movs	r1, #0
 80004e6:	4815      	ldr	r0, [pc, #84]	@ (800053c <main+0x74>)
 80004e8:	f001 fb76 	bl	8001bd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // ENB
 80004ec:	2104      	movs	r1, #4
 80004ee:	4813      	ldr	r0, [pc, #76]	@ (800053c <main+0x74>)
 80004f0:	f001 fb72 	bl	8001bd8 <HAL_TIM_PWM_Start>


  HAL_GPIO_WritePin(GPIOC, L298N_IN1_Pin, GPIO_PIN_SET);  // IN1
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004fa:	4811      	ldr	r0, [pc, #68]	@ (8000540 <main+0x78>)
 80004fc:	f000 fe52 	bl	80011a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, L298N_IN2_Pin, GPIO_PIN_RESET); // IN2
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000506:	480e      	ldr	r0, [pc, #56]	@ (8000540 <main+0x78>)
 8000508:	f000 fe4c 	bl	80011a4 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOC, L298N_IN3_Pin, GPIO_PIN_RESET); // IN3
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000512:	480b      	ldr	r0, [pc, #44]	@ (8000540 <main+0x78>)
 8000514:	f000 fe46 	bl	80011a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, L298N_IN4_Pin, GPIO_PIN_SET);    // IN4
 8000518:	2201      	movs	r2, #1
 800051a:	2104      	movs	r1, #4
 800051c:	4809      	ldr	r0, [pc, #36]	@ (8000544 <main+0x7c>)
 800051e:	f000 fe41 	bl	80011a4 <HAL_GPIO_WritePin>


  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 20000); // ENA
 8000522:	4b06      	ldr	r3, [pc, #24]	@ (800053c <main+0x74>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800052a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 20000); // ENB
 800052c:	4b03      	ldr	r3, [pc, #12]	@ (800053c <main+0x74>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000534:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000536:	bf00      	nop
 8000538:	e7fd      	b.n	8000536 <main+0x6e>
 800053a:	bf00      	nop
 800053c:	20000028 	.word	0x20000028
 8000540:	40020800 	.word	0x40020800
 8000544:	40020c00 	.word	0x40020c00

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	@ 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	@ 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f002 fbd4 	bl	8002d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b27      	ldr	r3, [pc, #156]	@ (8000610 <SystemClock_Config+0xc8>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000574:	4a26      	ldr	r2, [pc, #152]	@ (8000610 <SystemClock_Config+0xc8>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	@ 0x40
 800057c:	4b24      	ldr	r3, [pc, #144]	@ (8000610 <SystemClock_Config+0xc8>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b21      	ldr	r3, [pc, #132]	@ (8000614 <SystemClock_Config+0xcc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a20      	ldr	r2, [pc, #128]	@ (8000614 <SystemClock_Config+0xcc>)
 8000592:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b1e      	ldr	r3, [pc, #120]	@ (8000614 <SystemClock_Config+0xcc>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80005b8:	230c      	movs	r3, #12
 80005ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005bc:	2360      	movs	r3, #96	@ 0x60
 80005be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c4:	2304      	movs	r3, #4
 80005c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fe03 	bl	80011d8 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d8:	f000 f994 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2302      	movs	r3, #2
 80005e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2103      	movs	r1, #3
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 f865 	bl	80016c8 <HAL_RCC_ClockConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000604:	f000 f97e 	bl	8000904 <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3750      	adds	r7, #80	@ 0x50
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b096      	sub	sp, #88	@ 0x58
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000636:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2220      	movs	r2, #32
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f002 fb57 	bl	8002d04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000656:	4b44      	ldr	r3, [pc, #272]	@ (8000768 <MX_TIM1_Init+0x150>)
 8000658:	4a44      	ldr	r2, [pc, #272]	@ (800076c <MX_TIM1_Init+0x154>)
 800065a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800065c:	4b42      	ldr	r3, [pc, #264]	@ (8000768 <MX_TIM1_Init+0x150>)
 800065e:	2200      	movs	r2, #0
 8000660:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000662:	4b41      	ldr	r3, [pc, #260]	@ (8000768 <MX_TIM1_Init+0x150>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000668:	4b3f      	ldr	r3, [pc, #252]	@ (8000768 <MX_TIM1_Init+0x150>)
 800066a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800066e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000670:	4b3d      	ldr	r3, [pc, #244]	@ (8000768 <MX_TIM1_Init+0x150>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000676:	4b3c      	ldr	r3, [pc, #240]	@ (8000768 <MX_TIM1_Init+0x150>)
 8000678:	2200      	movs	r2, #0
 800067a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067c:	4b3a      	ldr	r3, [pc, #232]	@ (8000768 <MX_TIM1_Init+0x150>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000682:	4839      	ldr	r0, [pc, #228]	@ (8000768 <MX_TIM1_Init+0x150>)
 8000684:	f001 fa00 	bl	8001a88 <HAL_TIM_Base_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800068e:	f000 f939 	bl	8000904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000692:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000696:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000698:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800069c:	4619      	mov	r1, r3
 800069e:	4832      	ldr	r0, [pc, #200]	@ (8000768 <MX_TIM1_Init+0x150>)
 80006a0:	f001 fc0c 	bl	8001ebc <HAL_TIM_ConfigClockSource>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80006aa:	f000 f92b 	bl	8000904 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006ae:	482e      	ldr	r0, [pc, #184]	@ (8000768 <MX_TIM1_Init+0x150>)
 80006b0:	f001 fa39 	bl	8001b26 <HAL_TIM_PWM_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80006ba:	f000 f923 	bl	8000904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006be:	2300      	movs	r3, #0
 80006c0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006ca:	4619      	mov	r1, r3
 80006cc:	4826      	ldr	r0, [pc, #152]	@ (8000768 <MX_TIM1_Init+0x150>)
 80006ce:	f001 ff95 	bl	80025fc <HAL_TIMEx_MasterConfigSynchronization>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80006d8:	f000 f914 	bl	8000904 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006dc:	2360      	movs	r3, #96	@ 0x60
 80006de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006e8:	2300      	movs	r3, #0
 80006ea:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fc:	2200      	movs	r2, #0
 80006fe:	4619      	mov	r1, r3
 8000700:	4819      	ldr	r0, [pc, #100]	@ (8000768 <MX_TIM1_Init+0x150>)
 8000702:	f001 fb19 	bl	8001d38 <HAL_TIM_PWM_ConfigChannel>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800070c:	f000 f8fa 	bl	8000904 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000714:	2204      	movs	r2, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4813      	ldr	r0, [pc, #76]	@ (8000768 <MX_TIM1_Init+0x150>)
 800071a:	f001 fb0d 	bl	8001d38 <HAL_TIM_PWM_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000724:	f000 f8ee 	bl	8000904 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800073c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000740:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4619      	mov	r1, r3
 800074a:	4807      	ldr	r0, [pc, #28]	@ (8000768 <MX_TIM1_Init+0x150>)
 800074c:	f001 ffc4 	bl	80026d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000756:	f000 f8d5 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800075a:	4803      	ldr	r0, [pc, #12]	@ (8000768 <MX_TIM1_Init+0x150>)
 800075c:	f000 f922 	bl	80009a4 <HAL_TIM_MspPostInit>

}
 8000760:	bf00      	nop
 8000762:	3758      	adds	r7, #88	@ 0x58
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000028 	.word	0x20000028
 800076c:	40010000 	.word	0x40010000

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	@ (80007c0 <MX_USART2_UART_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a8:	f001 ffe8 	bl	800277c <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b2:	f000 f8a7 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000070 	.word	0x20000070
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80007c8:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	@ (8000814 <MX_USART6_UART_Init+0x50>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80007ce:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_USART6_UART_Init+0x4c>)
 80007fc:	f001 ffbe 	bl	800277c <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000806:	f000 f87d 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000b8 	.word	0x200000b8
 8000814:	40011400 	.word	0x40011400

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b31      	ldr	r3, [pc, #196]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a30      	ldr	r2, [pc, #192]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b2e      	ldr	r3, [pc, #184]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b2a      	ldr	r3, [pc, #168]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a29      	ldr	r2, [pc, #164]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b27      	ldr	r3, [pc, #156]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	4b23      	ldr	r3, [pc, #140]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a22      	ldr	r2, [pc, #136]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b20      	ldr	r3, [pc, #128]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a1b      	ldr	r2, [pc, #108]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L298N_IN1_Pin|L298N_IN3_Pin|L298N_IN2_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 80008a4:	4815      	ldr	r0, [pc, #84]	@ (80008fc <MX_GPIO_Init+0xe4>)
 80008a6:	f000 fc7d 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L298N_IN4_GPIO_Port, L298N_IN4_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2104      	movs	r1, #4
 80008ae:	4814      	ldr	r0, [pc, #80]	@ (8000900 <MX_GPIO_Init+0xe8>)
 80008b0:	f000 fc78 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L298N_IN1_Pin L298N_IN3_Pin L298N_IN2_Pin */
  GPIO_InitStruct.Pin = L298N_IN1_Pin|L298N_IN3_Pin|L298N_IN2_Pin;
 80008b4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	480b      	ldr	r0, [pc, #44]	@ (80008fc <MX_GPIO_Init+0xe4>)
 80008ce:	f000 fae5 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : L298N_IN4_Pin */
  GPIO_InitStruct.Pin = L298N_IN4_Pin;
 80008d2:	2304      	movs	r3, #4
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(L298N_IN4_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	@ (8000900 <MX_GPIO_Init+0xe8>)
 80008ea:	f000 fad7 	bl	8000e9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ee:	bf00      	nop
 80008f0:	3728      	adds	r7, #40	@ 0x28
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020800 	.word	0x40020800
 8000900:	40020c00 	.word	0x40020c00

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <Error_Handler+0x8>

08000910 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b10      	ldr	r3, [pc, #64]	@ (800095c <HAL_MspInit+0x4c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091e:	4a0f      	ldr	r2, [pc, #60]	@ (800095c <HAL_MspInit+0x4c>)
 8000920:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000924:	6453      	str	r3, [r2, #68]	@ 0x44
 8000926:	4b0d      	ldr	r3, [pc, #52]	@ (800095c <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b09      	ldr	r3, [pc, #36]	@ (800095c <HAL_MspInit+0x4c>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093a:	4a08      	ldr	r2, [pc, #32]	@ (800095c <HAL_MspInit+0x4c>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000940:	6413      	str	r3, [r2, #64]	@ 0x40
 8000942:	4b06      	ldr	r3, [pc, #24]	@ (800095c <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0b      	ldr	r2, [pc, #44]	@ (800099c <HAL_TIM_Base_MspInit+0x3c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d10d      	bne.n	800098e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <HAL_TIM_Base_MspInit+0x40>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097a:	4a09      	ldr	r2, [pc, #36]	@ (80009a0 <HAL_TIM_Base_MspInit+0x40>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6453      	str	r3, [r2, #68]	@ 0x44
 8000982:	4b07      	ldr	r3, [pc, #28]	@ (80009a0 <HAL_TIM_Base_MspInit+0x40>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40010000 	.word	0x40010000
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a12      	ldr	r2, [pc, #72]	@ (8000a0c <HAL_TIM_MspPostInit+0x68>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d11e      	bne.n	8000a04 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <HAL_TIM_MspPostInit+0x6c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a10      	ldr	r2, [pc, #64]	@ (8000a10 <HAL_TIM_MspPostInit+0x6c>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <HAL_TIM_MspPostInit+0x6c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = L298N_ENA_Pin|L298N_ENB_Pin;
 80009e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	4619      	mov	r1, r3
 80009fe:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <HAL_TIM_MspPostInit+0x70>)
 8000a00:	f000 fa4c 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40010000 	.word	0x40010000
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020000 	.word	0x40020000

08000a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	@ 0x30
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a32      	ldr	r2, [pc, #200]	@ (8000b00 <HAL_UART_MspInit+0xe8>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d12c      	bne.n	8000a94 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
 8000a3e:	4b31      	ldr	r3, [pc, #196]	@ (8000b04 <HAL_UART_MspInit+0xec>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	4a30      	ldr	r2, [pc, #192]	@ (8000b04 <HAL_UART_MspInit+0xec>)
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b04 <HAL_UART_MspInit+0xec>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b04 <HAL_UART_MspInit+0xec>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a29      	ldr	r2, [pc, #164]	@ (8000b04 <HAL_UART_MspInit+0xec>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b27      	ldr	r3, [pc, #156]	@ (8000b04 <HAL_UART_MspInit+0xec>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a72:	230c      	movs	r3, #12
 8000a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a82:	2307      	movs	r3, #7
 8000a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	481e      	ldr	r0, [pc, #120]	@ (8000b08 <HAL_UART_MspInit+0xf0>)
 8000a8e:	f000 fa05 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000a92:	e030      	b.n	8000af6 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a1c      	ldr	r2, [pc, #112]	@ (8000b0c <HAL_UART_MspInit+0xf4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d12b      	bne.n	8000af6 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <HAL_UART_MspInit+0xec>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa6:	4a17      	ldr	r2, [pc, #92]	@ (8000b04 <HAL_UART_MspInit+0xec>)
 8000aa8:	f043 0320 	orr.w	r3, r3, #32
 8000aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <HAL_UART_MspInit+0xec>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	f003 0320 	and.w	r3, r3, #32
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <HAL_UART_MspInit+0xec>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a10      	ldr	r2, [pc, #64]	@ (8000b04 <HAL_UART_MspInit+0xec>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <HAL_UART_MspInit+0xec>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BT_TX_Pin|BT_RX_Pin;
 8000ad6:	23c0      	movs	r3, #192	@ 0xc0
 8000ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ae6:	2308      	movs	r3, #8
 8000ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	4807      	ldr	r0, [pc, #28]	@ (8000b10 <HAL_UART_MspInit+0xf8>)
 8000af2:	f000 f9d3 	bl	8000e9c <HAL_GPIO_Init>
}
 8000af6:	bf00      	nop
 8000af8:	3730      	adds	r7, #48	@ 0x30
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40004400 	.word	0x40004400
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40011400 	.word	0x40011400
 8000b10:	40020800 	.word	0x40020800

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <NMI_Handler+0x4>

08000b1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6a:	f000 f891 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <SystemInit+0x20>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b7e:	4a05      	ldr	r2, [pc, #20]	@ (8000b94 <SystemInit+0x20>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b9c:	f7ff ffea 	bl	8000b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba0:	480c      	ldr	r0, [pc, #48]	@ (8000bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ba2:	490d      	ldr	r1, [pc, #52]	@ (8000bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f002 f8a5 	bl	8002d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bca:	f7ff fc7d 	bl	80004c8 <main>
  bx  lr    
 8000bce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bdc:	08002d9c 	.word	0x08002d9c
  ldr r2, =_sbss
 8000be0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000be4:	20000104 	.word	0x20000104

08000be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c2c <HAL_Init+0x40>)
 8000bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <HAL_Init+0x40>)
 8000c02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	@ (8000c2c <HAL_Init+0x40>)
 8000c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f90d 	bl	8000e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	f000 f808 	bl	8000c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff fe76 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023c00 	.word	0x40023c00

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <HAL_InitTick+0x54>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <HAL_InitTick+0x58>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f917 	bl	8000e82 <HAL_SYSTICK_Config>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00e      	b.n	8000c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b0f      	cmp	r3, #15
 8000c62:	d80a      	bhi.n	8000c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c64:	2200      	movs	r2, #0
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f000 f8ed 	bl	8000e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c70:	4a06      	ldr	r2, [pc, #24]	@ (8000c8c <HAL_InitTick+0x5c>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e000      	b.n	8000c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000000 	.word	0x20000000
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000004 	.word	0x20000004

08000c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000100 	.word	0x20000100

08000cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	@ (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000100 	.word	0x20000100

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	@ (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	@ (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	@ (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	@ (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	@ 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	@ 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e00:	d301      	bcc.n	8000e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00f      	b.n	8000e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e06:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <SysTick_Config+0x40>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0e:	210f      	movs	r1, #15
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f7ff ff8e 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <SysTick_Config+0x40>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1e:	4b04      	ldr	r3, [pc, #16]	@ (8000e30 <SysTick_Config+0x40>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	e000e010 	.word	0xe000e010

08000e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff47 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5c:	f7ff ff5c 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68b9      	ldr	r1, [r7, #8]
 8000e66:	6978      	ldr	r0, [r7, #20]
 8000e68:	f7ff ff8e 	bl	8000d88 <NVIC_EncodePriority>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff5d 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ffb0 	bl	8000df0 <SysTick_Config>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	@ 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	e159      	b.n	800116c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	f040 8148 	bne.w	8001166 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d005      	beq.n	8000eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d130      	bne.n	8000f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	2203      	movs	r2, #3
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68da      	ldr	r2, [r3, #12]
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f24:	2201      	movs	r2, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	091b      	lsrs	r3, r3, #4
 8000f3a:	f003 0201 	and.w	r2, r3, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	d017      	beq.n	8000f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d123      	bne.n	8000fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	08da      	lsrs	r2, r3, #3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3208      	adds	r2, #8
 8000fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	220f      	movs	r2, #15
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	691a      	ldr	r2, [r3, #16]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	08da      	lsrs	r2, r3, #3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3208      	adds	r2, #8
 8000fda:	69b9      	ldr	r1, [r7, #24]
 8000fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0203 	and.w	r2, r3, #3
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 80a2 	beq.w	8001166 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b57      	ldr	r3, [pc, #348]	@ (8001184 <HAL_GPIO_Init+0x2e8>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102a:	4a56      	ldr	r2, [pc, #344]	@ (8001184 <HAL_GPIO_Init+0x2e8>)
 800102c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001030:	6453      	str	r3, [r2, #68]	@ 0x44
 8001032:	4b54      	ldr	r3, [pc, #336]	@ (8001184 <HAL_GPIO_Init+0x2e8>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103e:	4a52      	ldr	r2, [pc, #328]	@ (8001188 <HAL_GPIO_Init+0x2ec>)
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	3302      	adds	r3, #2
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	220f      	movs	r2, #15
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a49      	ldr	r2, [pc, #292]	@ (800118c <HAL_GPIO_Init+0x2f0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d019      	beq.n	800109e <HAL_GPIO_Init+0x202>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a48      	ldr	r2, [pc, #288]	@ (8001190 <HAL_GPIO_Init+0x2f4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d013      	beq.n	800109a <HAL_GPIO_Init+0x1fe>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a47      	ldr	r2, [pc, #284]	@ (8001194 <HAL_GPIO_Init+0x2f8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d00d      	beq.n	8001096 <HAL_GPIO_Init+0x1fa>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a46      	ldr	r2, [pc, #280]	@ (8001198 <HAL_GPIO_Init+0x2fc>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d007      	beq.n	8001092 <HAL_GPIO_Init+0x1f6>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a45      	ldr	r2, [pc, #276]	@ (800119c <HAL_GPIO_Init+0x300>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_GPIO_Init+0x1f2>
 800108a:	2304      	movs	r3, #4
 800108c:	e008      	b.n	80010a0 <HAL_GPIO_Init+0x204>
 800108e:	2307      	movs	r3, #7
 8001090:	e006      	b.n	80010a0 <HAL_GPIO_Init+0x204>
 8001092:	2303      	movs	r3, #3
 8001094:	e004      	b.n	80010a0 <HAL_GPIO_Init+0x204>
 8001096:	2302      	movs	r3, #2
 8001098:	e002      	b.n	80010a0 <HAL_GPIO_Init+0x204>
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <HAL_GPIO_Init+0x204>
 800109e:	2300      	movs	r3, #0
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	f002 0203 	and.w	r2, r2, #3
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	4093      	lsls	r3, r2
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b0:	4935      	ldr	r1, [pc, #212]	@ (8001188 <HAL_GPIO_Init+0x2ec>)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	3302      	adds	r3, #2
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010be:	4b38      	ldr	r3, [pc, #224]	@ (80011a0 <HAL_GPIO_Init+0x304>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e2:	4a2f      	ldr	r2, [pc, #188]	@ (80011a0 <HAL_GPIO_Init+0x304>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e8:	4b2d      	ldr	r3, [pc, #180]	@ (80011a0 <HAL_GPIO_Init+0x304>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800110c:	4a24      	ldr	r2, [pc, #144]	@ (80011a0 <HAL_GPIO_Init+0x304>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001112:	4b23      	ldr	r3, [pc, #140]	@ (80011a0 <HAL_GPIO_Init+0x304>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001136:	4a1a      	ldr	r2, [pc, #104]	@ (80011a0 <HAL_GPIO_Init+0x304>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800113c:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <HAL_GPIO_Init+0x304>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001160:	4a0f      	ldr	r2, [pc, #60]	@ (80011a0 <HAL_GPIO_Init+0x304>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3301      	adds	r3, #1
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	2b0f      	cmp	r3, #15
 8001170:	f67f aea2 	bls.w	8000eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3724      	adds	r7, #36	@ 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800
 8001188:	40013800 	.word	0x40013800
 800118c:	40020000 	.word	0x40020000
 8001190:	40020400 	.word	0x40020400
 8001194:	40020800 	.word	0x40020800
 8001198:	40020c00 	.word	0x40020c00
 800119c:	40021000 	.word	0x40021000
 80011a0:	40013c00 	.word	0x40013c00

080011a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
 80011b0:	4613      	mov	r3, r2
 80011b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b4:	787b      	ldrb	r3, [r7, #1]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c0:	e003      	b.n	80011ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011c2:	887b      	ldrh	r3, [r7, #2]
 80011c4:	041a      	lsls	r2, r3, #16
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	619a      	str	r2, [r3, #24]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e267      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d075      	beq.n	80012e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011f6:	4b88      	ldr	r3, [pc, #544]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d00c      	beq.n	800121c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001202:	4b85      	ldr	r3, [pc, #532]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800120a:	2b08      	cmp	r3, #8
 800120c:	d112      	bne.n	8001234 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120e:	4b82      	ldr	r3, [pc, #520]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001216:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800121a:	d10b      	bne.n	8001234 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121c:	4b7e      	ldr	r3, [pc, #504]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d05b      	beq.n	80012e0 <HAL_RCC_OscConfig+0x108>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d157      	bne.n	80012e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e242      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800123c:	d106      	bne.n	800124c <HAL_RCC_OscConfig+0x74>
 800123e:	4b76      	ldr	r3, [pc, #472]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a75      	ldr	r2, [pc, #468]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 8001244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e01d      	b.n	8001288 <HAL_RCC_OscConfig+0xb0>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001254:	d10c      	bne.n	8001270 <HAL_RCC_OscConfig+0x98>
 8001256:	4b70      	ldr	r3, [pc, #448]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a6f      	ldr	r2, [pc, #444]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 800125c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	4b6d      	ldr	r3, [pc, #436]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a6c      	ldr	r2, [pc, #432]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e00b      	b.n	8001288 <HAL_RCC_OscConfig+0xb0>
 8001270:	4b69      	ldr	r3, [pc, #420]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a68      	ldr	r2, [pc, #416]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 8001276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b66      	ldr	r3, [pc, #408]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a65      	ldr	r2, [pc, #404]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 8001282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d013      	beq.n	80012b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff fd12 	bl	8000cb8 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fd0e 	bl	8000cb8 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	@ 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e207      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0xc0>
 80012b6:	e014      	b.n	80012e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fcfe 	bl	8000cb8 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fcfa 	bl	8000cb8 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	@ 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e1f3      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d2:	4b51      	ldr	r3, [pc, #324]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0xe8>
 80012de:	e000      	b.n	80012e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d063      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00b      	beq.n	8001312 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fa:	4b47      	ldr	r3, [pc, #284]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001302:	2b08      	cmp	r3, #8
 8001304:	d11c      	bne.n	8001340 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001306:	4b44      	ldr	r3, [pc, #272]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d116      	bne.n	8001340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001312:	4b41      	ldr	r3, [pc, #260]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <HAL_RCC_OscConfig+0x152>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d001      	beq.n	800132a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e1c7      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132a:	4b3b      	ldr	r3, [pc, #236]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	4937      	ldr	r1, [pc, #220]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 800133a:	4313      	orrs	r3, r2
 800133c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133e:	e03a      	b.n	80013b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d020      	beq.n	800138a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001348:	4b34      	ldr	r3, [pc, #208]	@ (800141c <HAL_RCC_OscConfig+0x244>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134e:	f7ff fcb3 	bl	8000cb8 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff fcaf 	bl	8000cb8 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e1a8      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001368:	4b2b      	ldr	r3, [pc, #172]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001374:	4b28      	ldr	r3, [pc, #160]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4925      	ldr	r1, [pc, #148]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 8001384:	4313      	orrs	r3, r2
 8001386:	600b      	str	r3, [r1, #0]
 8001388:	e015      	b.n	80013b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138a:	4b24      	ldr	r3, [pc, #144]	@ (800141c <HAL_RCC_OscConfig+0x244>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff fc92 	bl	8000cb8 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001398:	f7ff fc8e 	bl	8000cb8 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e187      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d036      	beq.n	8001430 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d016      	beq.n	80013f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ca:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <HAL_RCC_OscConfig+0x248>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d0:	f7ff fc72 	bl	8000cb8 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d8:	f7ff fc6e 	bl	8000cb8 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e167      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <HAL_RCC_OscConfig+0x240>)
 80013ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x200>
 80013f6:	e01b      	b.n	8001430 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f8:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <HAL_RCC_OscConfig+0x248>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fc5b 	bl	8000cb8 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001404:	e00e      	b.n	8001424 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001406:	f7ff fc57 	bl	8000cb8 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d907      	bls.n	8001424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e150      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
 8001418:	40023800 	.word	0x40023800
 800141c:	42470000 	.word	0x42470000
 8001420:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001424:	4b88      	ldr	r3, [pc, #544]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 8001426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1ea      	bne.n	8001406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 8097 	beq.w	800156c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001442:	4b81      	ldr	r3, [pc, #516]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10f      	bne.n	800146e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b7d      	ldr	r3, [pc, #500]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	4a7c      	ldr	r2, [pc, #496]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	@ 0x40
 800145e:	4b7a      	ldr	r3, [pc, #488]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800146a:	2301      	movs	r3, #1
 800146c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146e:	4b77      	ldr	r3, [pc, #476]	@ (800164c <HAL_RCC_OscConfig+0x474>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d118      	bne.n	80014ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800147a:	4b74      	ldr	r3, [pc, #464]	@ (800164c <HAL_RCC_OscConfig+0x474>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a73      	ldr	r2, [pc, #460]	@ (800164c <HAL_RCC_OscConfig+0x474>)
 8001480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001486:	f7ff fc17 	bl	8000cb8 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148e:	f7ff fc13 	bl	8000cb8 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e10c      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a0:	4b6a      	ldr	r3, [pc, #424]	@ (800164c <HAL_RCC_OscConfig+0x474>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d106      	bne.n	80014c2 <HAL_RCC_OscConfig+0x2ea>
 80014b4:	4b64      	ldr	r3, [pc, #400]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 80014b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014b8:	4a63      	ldr	r2, [pc, #396]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6713      	str	r3, [r2, #112]	@ 0x70
 80014c0:	e01c      	b.n	80014fc <HAL_RCC_OscConfig+0x324>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b05      	cmp	r3, #5
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x30c>
 80014ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ce:	4a5e      	ldr	r2, [pc, #376]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80014d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014da:	4a5b      	ldr	r2, [pc, #364]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80014e2:	e00b      	b.n	80014fc <HAL_RCC_OscConfig+0x324>
 80014e4:	4b58      	ldr	r3, [pc, #352]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 80014e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e8:	4a57      	ldr	r2, [pc, #348]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 80014ea:	f023 0301 	bic.w	r3, r3, #1
 80014ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80014f0:	4b55      	ldr	r3, [pc, #340]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 80014f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014f4:	4a54      	ldr	r2, [pc, #336]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 80014f6:	f023 0304 	bic.w	r3, r3, #4
 80014fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d015      	beq.n	8001530 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001504:	f7ff fbd8 	bl	8000cb8 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150a:	e00a      	b.n	8001522 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150c:	f7ff fbd4 	bl	8000cb8 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e0cb      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001522:	4b49      	ldr	r3, [pc, #292]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0ee      	beq.n	800150c <HAL_RCC_OscConfig+0x334>
 800152e:	e014      	b.n	800155a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001530:	f7ff fbc2 	bl	8000cb8 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001536:	e00a      	b.n	800154e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001538:	f7ff fbbe 	bl	8000cb8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e0b5      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154e:	4b3e      	ldr	r3, [pc, #248]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1ee      	bne.n	8001538 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800155a:	7dfb      	ldrb	r3, [r7, #23]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d105      	bne.n	800156c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001560:	4b39      	ldr	r3, [pc, #228]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	4a38      	ldr	r2, [pc, #224]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 8001566:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800156a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80a1 	beq.w	80016b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001576:	4b34      	ldr	r3, [pc, #208]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b08      	cmp	r3, #8
 8001580:	d05c      	beq.n	800163c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d141      	bne.n	800160e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158a:	4b31      	ldr	r3, [pc, #196]	@ (8001650 <HAL_RCC_OscConfig+0x478>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fb92 	bl	8000cb8 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001598:	f7ff fb8e 	bl	8000cb8 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e087      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015aa:	4b27      	ldr	r3, [pc, #156]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69da      	ldr	r2, [r3, #28]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c4:	019b      	lsls	r3, r3, #6
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	3b01      	subs	r3, #1
 80015d0:	041b      	lsls	r3, r3, #16
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d8:	061b      	lsls	r3, r3, #24
 80015da:	491b      	ldr	r1, [pc, #108]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <HAL_RCC_OscConfig+0x478>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fb67 	bl	8000cb8 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ee:	f7ff fb63 	bl	8000cb8 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e05c      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001600:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x416>
 800160c:	e054      	b.n	80016b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <HAL_RCC_OscConfig+0x478>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fb50 	bl	8000cb8 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161c:	f7ff fb4c 	bl	8000cb8 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e045      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_RCC_OscConfig+0x470>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x444>
 800163a:	e03d      	b.n	80016b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d107      	bne.n	8001654 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e038      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
 8001648:	40023800 	.word	0x40023800
 800164c:	40007000 	.word	0x40007000
 8001650:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001654:	4b1b      	ldr	r3, [pc, #108]	@ (80016c4 <HAL_RCC_OscConfig+0x4ec>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d028      	beq.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800166c:	429a      	cmp	r2, r3
 800166e:	d121      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167a:	429a      	cmp	r2, r3
 800167c:	d11a      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001684:	4013      	ands	r3, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800168a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800168c:	4293      	cmp	r3, r2
 800168e:	d111      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169a:	085b      	lsrs	r3, r3, #1
 800169c:	3b01      	subs	r3, #1
 800169e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800

080016c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0cc      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016dc:	4b68      	ldr	r3, [pc, #416]	@ (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d90c      	bls.n	8001704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ea:	4b65      	ldr	r3, [pc, #404]	@ (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f2:	4b63      	ldr	r3, [pc, #396]	@ (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0b8      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d020      	beq.n	8001752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800171c:	4b59      	ldr	r3, [pc, #356]	@ (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	4a58      	ldr	r2, [pc, #352]	@ (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001726:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001734:	4b53      	ldr	r3, [pc, #332]	@ (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4a52      	ldr	r2, [pc, #328]	@ (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800173e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001740:	4b50      	ldr	r3, [pc, #320]	@ (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	494d      	ldr	r1, [pc, #308]	@ (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	4313      	orrs	r3, r2
 8001750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d044      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	4b47      	ldr	r3, [pc, #284]	@ (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d119      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e07f      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d003      	beq.n	8001786 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001782:	2b03      	cmp	r3, #3
 8001784:	d107      	bne.n	8001796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001786:	4b3f      	ldr	r3, [pc, #252]	@ (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e06f      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001796:	4b3b      	ldr	r3, [pc, #236]	@ (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e067      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017a6:	4b37      	ldr	r3, [pc, #220]	@ (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f023 0203 	bic.w	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4934      	ldr	r1, [pc, #208]	@ (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b8:	f7ff fa7e 	bl	8000cb8 <HAL_GetTick>
 80017bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017be:	e00a      	b.n	80017d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c0:	f7ff fa7a 	bl	8000cb8 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e04f      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 020c 	and.w	r2, r3, #12
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d1eb      	bne.n	80017c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017e8:	4b25      	ldr	r3, [pc, #148]	@ (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d20c      	bcs.n	8001810 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b22      	ldr	r3, [pc, #136]	@ (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b20      	ldr	r3, [pc, #128]	@ (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e032      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800181c:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4916      	ldr	r1, [pc, #88]	@ (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800183a:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	490e      	ldr	r1, [pc, #56]	@ (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800184e:	f000 f821 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8001852:	4602      	mov	r2, r0
 8001854:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	490a      	ldr	r1, [pc, #40]	@ (8001888 <HAL_RCC_ClockConfig+0x1c0>)
 8001860:	5ccb      	ldrb	r3, [r1, r3]
 8001862:	fa22 f303 	lsr.w	r3, r2, r3
 8001866:	4a09      	ldr	r2, [pc, #36]	@ (800188c <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800186a:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <HAL_RCC_ClockConfig+0x1c8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff f9de 	bl	8000c30 <HAL_InitTick>

  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023c00 	.word	0x40023c00
 8001884:	40023800 	.word	0x40023800
 8001888:	08002d74 	.word	0x08002d74
 800188c:	20000000 	.word	0x20000000
 8001890:	20000004 	.word	0x20000004

08001894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001898:	b090      	sub	sp, #64	@ 0x40
 800189a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018ac:	4b59      	ldr	r3, [pc, #356]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d00d      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0x40>
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	f200 80a1 	bhi.w	8001a00 <HAL_RCC_GetSysClockFreq+0x16c>
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x34>
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d003      	beq.n	80018ce <HAL_RCC_GetSysClockFreq+0x3a>
 80018c6:	e09b      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c8:	4b53      	ldr	r3, [pc, #332]	@ (8001a18 <HAL_RCC_GetSysClockFreq+0x184>)
 80018ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018cc:	e09b      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ce:	4b53      	ldr	r3, [pc, #332]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x188>)
 80018d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018d2:	e098      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018de:	4b4d      	ldr	r3, [pc, #308]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d028      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	099b      	lsrs	r3, r3, #6
 80018f0:	2200      	movs	r2, #0
 80018f2:	623b      	str	r3, [r7, #32]
 80018f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018fc:	2100      	movs	r1, #0
 80018fe:	4b47      	ldr	r3, [pc, #284]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x188>)
 8001900:	fb03 f201 	mul.w	r2, r3, r1
 8001904:	2300      	movs	r3, #0
 8001906:	fb00 f303 	mul.w	r3, r0, r3
 800190a:	4413      	add	r3, r2
 800190c:	4a43      	ldr	r2, [pc, #268]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x188>)
 800190e:	fba0 1202 	umull	r1, r2, r0, r2
 8001912:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001914:	460a      	mov	r2, r1
 8001916:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800191a:	4413      	add	r3, r2
 800191c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800191e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001920:	2200      	movs	r2, #0
 8001922:	61bb      	str	r3, [r7, #24]
 8001924:	61fa      	str	r2, [r7, #28]
 8001926:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800192a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800192e:	f7fe fc53 	bl	80001d8 <__aeabi_uldivmod>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4613      	mov	r3, r2
 8001938:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800193a:	e053      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800193c:	4b35      	ldr	r3, [pc, #212]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x180>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	099b      	lsrs	r3, r3, #6
 8001942:	2200      	movs	r2, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	617a      	str	r2, [r7, #20]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800194e:	f04f 0b00 	mov.w	fp, #0
 8001952:	4652      	mov	r2, sl
 8001954:	465b      	mov	r3, fp
 8001956:	f04f 0000 	mov.w	r0, #0
 800195a:	f04f 0100 	mov.w	r1, #0
 800195e:	0159      	lsls	r1, r3, #5
 8001960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001964:	0150      	lsls	r0, r2, #5
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	ebb2 080a 	subs.w	r8, r2, sl
 800196e:	eb63 090b 	sbc.w	r9, r3, fp
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800197e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001982:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001986:	ebb2 0408 	subs.w	r4, r2, r8
 800198a:	eb63 0509 	sbc.w	r5, r3, r9
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	00eb      	lsls	r3, r5, #3
 8001998:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800199c:	00e2      	lsls	r2, r4, #3
 800199e:	4614      	mov	r4, r2
 80019a0:	461d      	mov	r5, r3
 80019a2:	eb14 030a 	adds.w	r3, r4, sl
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	eb45 030b 	adc.w	r3, r5, fp
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ba:	4629      	mov	r1, r5
 80019bc:	028b      	lsls	r3, r1, #10
 80019be:	4621      	mov	r1, r4
 80019c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019c4:	4621      	mov	r1, r4
 80019c6:	028a      	lsls	r2, r1, #10
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ce:	2200      	movs	r2, #0
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	60fa      	str	r2, [r7, #12]
 80019d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019d8:	f7fe fbfe 	bl	80001d8 <__aeabi_uldivmod>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4613      	mov	r3, r2
 80019e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	0c1b      	lsrs	r3, r3, #16
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	3301      	adds	r3, #1
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80019f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019fe:	e002      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3740      	adds	r7, #64	@ 0x40
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	00f42400 	.word	0x00f42400
 8001a1c:	017d7840 	.word	0x017d7840

08001a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a24:	4b03      	ldr	r3, [pc, #12]	@ (8001a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000000 	.word	0x20000000

08001a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a3c:	f7ff fff0 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a40:	4602      	mov	r2, r0
 8001a42:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	0a9b      	lsrs	r3, r3, #10
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	4903      	ldr	r1, [pc, #12]	@ (8001a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a4e:	5ccb      	ldrb	r3, [r1, r3]
 8001a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	08002d84 	.word	0x08002d84

08001a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a64:	f7ff ffdc 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	0b5b      	lsrs	r3, r3, #13
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	4903      	ldr	r1, [pc, #12]	@ (8001a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a76:	5ccb      	ldrb	r3, [r1, r3]
 8001a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	08002d84 	.word	0x08002d84

08001a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e041      	b.n	8001b1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d106      	bne.n	8001ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7fe ff56 	bl	8000960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	f000 fac0 	bl	800204c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e041      	b.n	8001bbc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d106      	bne.n	8001b52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f839 	bl	8001bc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2202      	movs	r2, #2
 8001b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3304      	adds	r3, #4
 8001b62:	4619      	mov	r1, r3
 8001b64:	4610      	mov	r0, r2
 8001b66:	f000 fa71 	bl	800204c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d109      	bne.n	8001bfc <HAL_TIM_PWM_Start+0x24>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	bf14      	ite	ne
 8001bf4:	2301      	movne	r3, #1
 8001bf6:	2300      	moveq	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	e022      	b.n	8001c42 <HAL_TIM_PWM_Start+0x6a>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d109      	bne.n	8001c16 <HAL_TIM_PWM_Start+0x3e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	bf14      	ite	ne
 8001c0e:	2301      	movne	r3, #1
 8001c10:	2300      	moveq	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	e015      	b.n	8001c42 <HAL_TIM_PWM_Start+0x6a>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d109      	bne.n	8001c30 <HAL_TIM_PWM_Start+0x58>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	bf14      	ite	ne
 8001c28:	2301      	movne	r3, #1
 8001c2a:	2300      	moveq	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	e008      	b.n	8001c42 <HAL_TIM_PWM_Start+0x6a>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	bf14      	ite	ne
 8001c3c:	2301      	movne	r3, #1
 8001c3e:	2300      	moveq	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e068      	b.n	8001d1c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d104      	bne.n	8001c5a <HAL_TIM_PWM_Start+0x82>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c58:	e013      	b.n	8001c82 <HAL_TIM_PWM_Start+0xaa>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d104      	bne.n	8001c6a <HAL_TIM_PWM_Start+0x92>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c68:	e00b      	b.n	8001c82 <HAL_TIM_PWM_Start+0xaa>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d104      	bne.n	8001c7a <HAL_TIM_PWM_Start+0xa2>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c78:	e003      	b.n	8001c82 <HAL_TIM_PWM_Start+0xaa>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2201      	movs	r2, #1
 8001c88:	6839      	ldr	r1, [r7, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 fc90 	bl	80025b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a23      	ldr	r2, [pc, #140]	@ (8001d24 <HAL_TIM_PWM_Start+0x14c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d107      	bne.n	8001caa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ca8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a1d      	ldr	r2, [pc, #116]	@ (8001d24 <HAL_TIM_PWM_Start+0x14c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d018      	beq.n	8001ce6 <HAL_TIM_PWM_Start+0x10e>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cbc:	d013      	beq.n	8001ce6 <HAL_TIM_PWM_Start+0x10e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a19      	ldr	r2, [pc, #100]	@ (8001d28 <HAL_TIM_PWM_Start+0x150>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d00e      	beq.n	8001ce6 <HAL_TIM_PWM_Start+0x10e>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a17      	ldr	r2, [pc, #92]	@ (8001d2c <HAL_TIM_PWM_Start+0x154>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d009      	beq.n	8001ce6 <HAL_TIM_PWM_Start+0x10e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a16      	ldr	r2, [pc, #88]	@ (8001d30 <HAL_TIM_PWM_Start+0x158>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d004      	beq.n	8001ce6 <HAL_TIM_PWM_Start+0x10e>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a14      	ldr	r2, [pc, #80]	@ (8001d34 <HAL_TIM_PWM_Start+0x15c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d111      	bne.n	8001d0a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2b06      	cmp	r3, #6
 8001cf6:	d010      	beq.n	8001d1a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d08:	e007      	b.n	8001d1a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0201 	orr.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	40000800 	.word	0x40000800
 8001d30:	40000c00 	.word	0x40000c00
 8001d34:	40014000 	.word	0x40014000

08001d38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e0ae      	b.n	8001eb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b0c      	cmp	r3, #12
 8001d62:	f200 809f 	bhi.w	8001ea4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001d66:	a201      	add	r2, pc, #4	@ (adr r2, 8001d6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6c:	08001da1 	.word	0x08001da1
 8001d70:	08001ea5 	.word	0x08001ea5
 8001d74:	08001ea5 	.word	0x08001ea5
 8001d78:	08001ea5 	.word	0x08001ea5
 8001d7c:	08001de1 	.word	0x08001de1
 8001d80:	08001ea5 	.word	0x08001ea5
 8001d84:	08001ea5 	.word	0x08001ea5
 8001d88:	08001ea5 	.word	0x08001ea5
 8001d8c:	08001e23 	.word	0x08001e23
 8001d90:	08001ea5 	.word	0x08001ea5
 8001d94:	08001ea5 	.word	0x08001ea5
 8001d98:	08001ea5 	.word	0x08001ea5
 8001d9c:	08001e63 	.word	0x08001e63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 f9dc 	bl	8002164 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699a      	ldr	r2, [r3, #24]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0208 	orr.w	r2, r2, #8
 8001dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	699a      	ldr	r2, [r3, #24]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0204 	bic.w	r2, r2, #4
 8001dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6999      	ldr	r1, [r3, #24]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	619a      	str	r2, [r3, #24]
      break;
 8001dde:	e064      	b.n	8001eaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 fa22 	bl	8002230 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699a      	ldr	r2, [r3, #24]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6999      	ldr	r1, [r3, #24]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	021a      	lsls	r2, r3, #8
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	619a      	str	r2, [r3, #24]
      break;
 8001e20:	e043      	b.n	8001eaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68b9      	ldr	r1, [r7, #8]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 fa6d 	bl	8002308 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	69da      	ldr	r2, [r3, #28]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0208 	orr.w	r2, r2, #8
 8001e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	69da      	ldr	r2, [r3, #28]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0204 	bic.w	r2, r2, #4
 8001e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	69d9      	ldr	r1, [r3, #28]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	61da      	str	r2, [r3, #28]
      break;
 8001e60:	e023      	b.n	8001eaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68b9      	ldr	r1, [r7, #8]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 fab7 	bl	80023dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	69da      	ldr	r2, [r3, #28]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	69da      	ldr	r2, [r3, #28]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	69d9      	ldr	r1, [r3, #28]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	021a      	lsls	r2, r3, #8
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	61da      	str	r2, [r3, #28]
      break;
 8001ea2:	e002      	b.n	8001eaa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8001ea8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_TIM_ConfigClockSource+0x1c>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e0b4      	b.n	8002042 <HAL_TIM_ConfigClockSource+0x186>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001efe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f10:	d03e      	beq.n	8001f90 <HAL_TIM_ConfigClockSource+0xd4>
 8001f12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f16:	f200 8087 	bhi.w	8002028 <HAL_TIM_ConfigClockSource+0x16c>
 8001f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f1e:	f000 8086 	beq.w	800202e <HAL_TIM_ConfigClockSource+0x172>
 8001f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f26:	d87f      	bhi.n	8002028 <HAL_TIM_ConfigClockSource+0x16c>
 8001f28:	2b70      	cmp	r3, #112	@ 0x70
 8001f2a:	d01a      	beq.n	8001f62 <HAL_TIM_ConfigClockSource+0xa6>
 8001f2c:	2b70      	cmp	r3, #112	@ 0x70
 8001f2e:	d87b      	bhi.n	8002028 <HAL_TIM_ConfigClockSource+0x16c>
 8001f30:	2b60      	cmp	r3, #96	@ 0x60
 8001f32:	d050      	beq.n	8001fd6 <HAL_TIM_ConfigClockSource+0x11a>
 8001f34:	2b60      	cmp	r3, #96	@ 0x60
 8001f36:	d877      	bhi.n	8002028 <HAL_TIM_ConfigClockSource+0x16c>
 8001f38:	2b50      	cmp	r3, #80	@ 0x50
 8001f3a:	d03c      	beq.n	8001fb6 <HAL_TIM_ConfigClockSource+0xfa>
 8001f3c:	2b50      	cmp	r3, #80	@ 0x50
 8001f3e:	d873      	bhi.n	8002028 <HAL_TIM_ConfigClockSource+0x16c>
 8001f40:	2b40      	cmp	r3, #64	@ 0x40
 8001f42:	d058      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0x13a>
 8001f44:	2b40      	cmp	r3, #64	@ 0x40
 8001f46:	d86f      	bhi.n	8002028 <HAL_TIM_ConfigClockSource+0x16c>
 8001f48:	2b30      	cmp	r3, #48	@ 0x30
 8001f4a:	d064      	beq.n	8002016 <HAL_TIM_ConfigClockSource+0x15a>
 8001f4c:	2b30      	cmp	r3, #48	@ 0x30
 8001f4e:	d86b      	bhi.n	8002028 <HAL_TIM_ConfigClockSource+0x16c>
 8001f50:	2b20      	cmp	r3, #32
 8001f52:	d060      	beq.n	8002016 <HAL_TIM_ConfigClockSource+0x15a>
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	d867      	bhi.n	8002028 <HAL_TIM_ConfigClockSource+0x16c>
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d05c      	beq.n	8002016 <HAL_TIM_ConfigClockSource+0x15a>
 8001f5c:	2b10      	cmp	r3, #16
 8001f5e:	d05a      	beq.n	8002016 <HAL_TIM_ConfigClockSource+0x15a>
 8001f60:	e062      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f72:	f000 fafd 	bl	8002570 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001f84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	609a      	str	r2, [r3, #8]
      break;
 8001f8e:	e04f      	b.n	8002030 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fa0:	f000 fae6 	bl	8002570 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001fb2:	609a      	str	r2, [r3, #8]
      break;
 8001fb4:	e03c      	b.n	8002030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	f000 fa5a 	bl	800247c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2150      	movs	r1, #80	@ 0x50
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fab3 	bl	800253a <TIM_ITRx_SetConfig>
      break;
 8001fd4:	e02c      	b.n	8002030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	f000 fa79 	bl	80024da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2160      	movs	r1, #96	@ 0x60
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 faa3 	bl	800253a <TIM_ITRx_SetConfig>
      break;
 8001ff4:	e01c      	b.n	8002030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002002:	461a      	mov	r2, r3
 8002004:	f000 fa3a 	bl	800247c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2140      	movs	r1, #64	@ 0x40
 800200e:	4618      	mov	r0, r3
 8002010:	f000 fa93 	bl	800253a <TIM_ITRx_SetConfig>
      break;
 8002014:	e00c      	b.n	8002030 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4619      	mov	r1, r3
 8002020:	4610      	mov	r0, r2
 8002022:	f000 fa8a 	bl	800253a <TIM_ITRx_SetConfig>
      break;
 8002026:	e003      	b.n	8002030 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
      break;
 800202c:	e000      	b.n	8002030 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800202e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002040:	7bfb      	ldrb	r3, [r7, #15]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a3a      	ldr	r2, [pc, #232]	@ (8002148 <TIM_Base_SetConfig+0xfc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d00f      	beq.n	8002084 <TIM_Base_SetConfig+0x38>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800206a:	d00b      	beq.n	8002084 <TIM_Base_SetConfig+0x38>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a37      	ldr	r2, [pc, #220]	@ (800214c <TIM_Base_SetConfig+0x100>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d007      	beq.n	8002084 <TIM_Base_SetConfig+0x38>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a36      	ldr	r2, [pc, #216]	@ (8002150 <TIM_Base_SetConfig+0x104>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d003      	beq.n	8002084 <TIM_Base_SetConfig+0x38>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a35      	ldr	r2, [pc, #212]	@ (8002154 <TIM_Base_SetConfig+0x108>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d108      	bne.n	8002096 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800208a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a2b      	ldr	r2, [pc, #172]	@ (8002148 <TIM_Base_SetConfig+0xfc>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d01b      	beq.n	80020d6 <TIM_Base_SetConfig+0x8a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020a4:	d017      	beq.n	80020d6 <TIM_Base_SetConfig+0x8a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a28      	ldr	r2, [pc, #160]	@ (800214c <TIM_Base_SetConfig+0x100>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <TIM_Base_SetConfig+0x8a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a27      	ldr	r2, [pc, #156]	@ (8002150 <TIM_Base_SetConfig+0x104>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00f      	beq.n	80020d6 <TIM_Base_SetConfig+0x8a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a26      	ldr	r2, [pc, #152]	@ (8002154 <TIM_Base_SetConfig+0x108>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00b      	beq.n	80020d6 <TIM_Base_SetConfig+0x8a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a25      	ldr	r2, [pc, #148]	@ (8002158 <TIM_Base_SetConfig+0x10c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d007      	beq.n	80020d6 <TIM_Base_SetConfig+0x8a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a24      	ldr	r2, [pc, #144]	@ (800215c <TIM_Base_SetConfig+0x110>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d003      	beq.n	80020d6 <TIM_Base_SetConfig+0x8a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a23      	ldr	r2, [pc, #140]	@ (8002160 <TIM_Base_SetConfig+0x114>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d108      	bne.n	80020e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a0e      	ldr	r2, [pc, #56]	@ (8002148 <TIM_Base_SetConfig+0xfc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d103      	bne.n	800211c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	d105      	bne.n	800213a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f023 0201 	bic.w	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	611a      	str	r2, [r3, #16]
  }
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40010000 	.word	0x40010000
 800214c:	40000400 	.word	0x40000400
 8002150:	40000800 	.word	0x40000800
 8002154:	40000c00 	.word	0x40000c00
 8002158:	40014000 	.word	0x40014000
 800215c:	40014400 	.word	0x40014400
 8002160:	40014800 	.word	0x40014800

08002164 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002164:	b480      	push	{r7}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	f023 0201 	bic.w	r2, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f023 0303 	bic.w	r3, r3, #3
 800219a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f023 0302 	bic.w	r3, r3, #2
 80021ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a1c      	ldr	r2, [pc, #112]	@ (800222c <TIM_OC1_SetConfig+0xc8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d10c      	bne.n	80021da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f023 0308 	bic.w	r3, r3, #8
 80021c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f023 0304 	bic.w	r3, r3, #4
 80021d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a13      	ldr	r2, [pc, #76]	@ (800222c <TIM_OC1_SetConfig+0xc8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d111      	bne.n	8002206 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80021f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	621a      	str	r2, [r3, #32]
}
 8002220:	bf00      	nop
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	40010000 	.word	0x40010000

08002230 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	f023 0210 	bic.w	r2, r3, #16
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800225e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4313      	orrs	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f023 0320 	bic.w	r3, r3, #32
 800227a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4313      	orrs	r3, r2
 8002286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a1e      	ldr	r2, [pc, #120]	@ (8002304 <TIM_OC2_SetConfig+0xd4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d10d      	bne.n	80022ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a15      	ldr	r2, [pc, #84]	@ (8002304 <TIM_OC2_SetConfig+0xd4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d113      	bne.n	80022dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80022ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80022c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	621a      	str	r2, [r3, #32]
}
 80022f6:	bf00      	nop
 80022f8:	371c      	adds	r7, #28
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40010000 	.word	0x40010000

08002308 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002308:	b480      	push	{r7}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f023 0303 	bic.w	r3, r3, #3
 800233e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	4313      	orrs	r3, r2
 800235c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a1d      	ldr	r2, [pc, #116]	@ (80023d8 <TIM_OC3_SetConfig+0xd0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d10d      	bne.n	8002382 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800236c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	4313      	orrs	r3, r2
 8002378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a14      	ldr	r2, [pc, #80]	@ (80023d8 <TIM_OC3_SetConfig+0xd0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d113      	bne.n	80023b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	621a      	str	r2, [r3, #32]
}
 80023cc:	bf00      	nop
 80023ce:	371c      	adds	r7, #28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	40010000 	.word	0x40010000

080023dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800240a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	021b      	lsls	r3, r3, #8
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4313      	orrs	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002426:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	031b      	lsls	r3, r3, #12
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a10      	ldr	r2, [pc, #64]	@ (8002478 <TIM_OC4_SetConfig+0x9c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d109      	bne.n	8002450 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002442:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	019b      	lsls	r3, r3, #6
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	4313      	orrs	r3, r2
 800244e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	621a      	str	r2, [r3, #32]
}
 800246a:	bf00      	nop
 800246c:	371c      	adds	r7, #28
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40010000 	.word	0x40010000

0800247c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	f023 0201 	bic.w	r2, r3, #1
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f023 030a 	bic.w	r3, r3, #10
 80024b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4313      	orrs	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	621a      	str	r2, [r3, #32]
}
 80024ce:	bf00      	nop
 80024d0:	371c      	adds	r7, #28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024da:	b480      	push	{r7}
 80024dc:	b087      	sub	sp, #28
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f023 0210 	bic.w	r2, r3, #16
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002504:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	031b      	lsls	r3, r3, #12
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002516:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	4313      	orrs	r3, r2
 8002520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	621a      	str	r2, [r3, #32]
}
 800252e:	bf00      	nop
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800253a:	b480      	push	{r7}
 800253c:	b085      	sub	sp, #20
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002550:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	f043 0307 	orr.w	r3, r3, #7
 800255c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	609a      	str	r2, [r3, #8]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800258a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	021a      	lsls	r2, r3, #8
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	431a      	orrs	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4313      	orrs	r3, r2
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	609a      	str	r2, [r3, #8]
}
 80025a4:	bf00      	nop
 80025a6:	371c      	adds	r7, #28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	2201      	movs	r2, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a1a      	ldr	r2, [r3, #32]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	401a      	ands	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a1a      	ldr	r2, [r3, #32]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	431a      	orrs	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	621a      	str	r2, [r3, #32]
}
 80025ee:	bf00      	nop
 80025f0:	371c      	adds	r7, #28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002610:	2302      	movs	r3, #2
 8002612:	e050      	b.n	80026b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800263a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1c      	ldr	r2, [pc, #112]	@ (80026c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d018      	beq.n	800268a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002660:	d013      	beq.n	800268a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a18      	ldr	r2, [pc, #96]	@ (80026c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d00e      	beq.n	800268a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a16      	ldr	r2, [pc, #88]	@ (80026cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d009      	beq.n	800268a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a15      	ldr	r2, [pc, #84]	@ (80026d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d004      	beq.n	800268a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a13      	ldr	r2, [pc, #76]	@ (80026d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d10c      	bne.n	80026a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002690:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	4313      	orrs	r3, r2
 800269a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40010000 	.word	0x40010000
 80026c8:	40000400 	.word	0x40000400
 80026cc:	40000800 	.word	0x40000800
 80026d0:	40000c00 	.word	0x40000c00
 80026d4:	40014000 	.word	0x40014000

080026d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e03d      	b.n	8002770 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4313      	orrs	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4313      	orrs	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	4313      	orrs	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e042      	b.n	8002814 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fe f938 	bl	8000a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2224      	movs	r2, #36	@ 0x24
 80027ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f82b 	bl	800281c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800281c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002820:	b0c0      	sub	sp, #256	@ 0x100
 8002822:	af00      	add	r7, sp, #0
 8002824:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002838:	68d9      	ldr	r1, [r3, #12]
 800283a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	ea40 0301 	orr.w	r3, r0, r1
 8002844:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	431a      	orrs	r2, r3
 8002854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	431a      	orrs	r2, r3
 800285c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002874:	f021 010c 	bic.w	r1, r1, #12
 8002878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002882:	430b      	orrs	r3, r1
 8002884:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002896:	6999      	ldr	r1, [r3, #24]
 8002898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	ea40 0301 	orr.w	r3, r0, r1
 80028a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4b8f      	ldr	r3, [pc, #572]	@ (8002ae8 <UART_SetConfig+0x2cc>)
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d005      	beq.n	80028bc <UART_SetConfig+0xa0>
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4b8d      	ldr	r3, [pc, #564]	@ (8002aec <UART_SetConfig+0x2d0>)
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d104      	bne.n	80028c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028bc:	f7ff f8d0 	bl	8001a60 <HAL_RCC_GetPCLK2Freq>
 80028c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80028c4:	e003      	b.n	80028ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028c6:	f7ff f8b7 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 80028ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028d8:	f040 810c 	bne.w	8002af4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028e0:	2200      	movs	r2, #0
 80028e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80028e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80028ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80028ee:	4622      	mov	r2, r4
 80028f0:	462b      	mov	r3, r5
 80028f2:	1891      	adds	r1, r2, r2
 80028f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80028f6:	415b      	adcs	r3, r3
 80028f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028fe:	4621      	mov	r1, r4
 8002900:	eb12 0801 	adds.w	r8, r2, r1
 8002904:	4629      	mov	r1, r5
 8002906:	eb43 0901 	adc.w	r9, r3, r1
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800291a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800291e:	4690      	mov	r8, r2
 8002920:	4699      	mov	r9, r3
 8002922:	4623      	mov	r3, r4
 8002924:	eb18 0303 	adds.w	r3, r8, r3
 8002928:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800292c:	462b      	mov	r3, r5
 800292e:	eb49 0303 	adc.w	r3, r9, r3
 8002932:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002942:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002946:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800294a:	460b      	mov	r3, r1
 800294c:	18db      	adds	r3, r3, r3
 800294e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002950:	4613      	mov	r3, r2
 8002952:	eb42 0303 	adc.w	r3, r2, r3
 8002956:	657b      	str	r3, [r7, #84]	@ 0x54
 8002958:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800295c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002960:	f7fd fc3a 	bl	80001d8 <__aeabi_uldivmod>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4b61      	ldr	r3, [pc, #388]	@ (8002af0 <UART_SetConfig+0x2d4>)
 800296a:	fba3 2302 	umull	r2, r3, r3, r2
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	011c      	lsls	r4, r3, #4
 8002972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002976:	2200      	movs	r2, #0
 8002978:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800297c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002980:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002984:	4642      	mov	r2, r8
 8002986:	464b      	mov	r3, r9
 8002988:	1891      	adds	r1, r2, r2
 800298a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800298c:	415b      	adcs	r3, r3
 800298e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002990:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002994:	4641      	mov	r1, r8
 8002996:	eb12 0a01 	adds.w	sl, r2, r1
 800299a:	4649      	mov	r1, r9
 800299c:	eb43 0b01 	adc.w	fp, r3, r1
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029b4:	4692      	mov	sl, r2
 80029b6:	469b      	mov	fp, r3
 80029b8:	4643      	mov	r3, r8
 80029ba:	eb1a 0303 	adds.w	r3, sl, r3
 80029be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80029c2:	464b      	mov	r3, r9
 80029c4:	eb4b 0303 	adc.w	r3, fp, r3
 80029c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80029cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80029dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80029e0:	460b      	mov	r3, r1
 80029e2:	18db      	adds	r3, r3, r3
 80029e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80029e6:	4613      	mov	r3, r2
 80029e8:	eb42 0303 	adc.w	r3, r2, r3
 80029ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80029ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80029f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80029f6:	f7fd fbef 	bl	80001d8 <__aeabi_uldivmod>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4611      	mov	r1, r2
 8002a00:	4b3b      	ldr	r3, [pc, #236]	@ (8002af0 <UART_SetConfig+0x2d4>)
 8002a02:	fba3 2301 	umull	r2, r3, r3, r1
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	2264      	movs	r2, #100	@ 0x64
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	1acb      	subs	r3, r1, r3
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a16:	4b36      	ldr	r3, [pc, #216]	@ (8002af0 <UART_SetConfig+0x2d4>)
 8002a18:	fba3 2302 	umull	r2, r3, r3, r2
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a24:	441c      	add	r4, r3
 8002a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a38:	4642      	mov	r2, r8
 8002a3a:	464b      	mov	r3, r9
 8002a3c:	1891      	adds	r1, r2, r2
 8002a3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a40:	415b      	adcs	r3, r3
 8002a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a48:	4641      	mov	r1, r8
 8002a4a:	1851      	adds	r1, r2, r1
 8002a4c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a4e:	4649      	mov	r1, r9
 8002a50:	414b      	adcs	r3, r1
 8002a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a60:	4659      	mov	r1, fp
 8002a62:	00cb      	lsls	r3, r1, #3
 8002a64:	4651      	mov	r1, sl
 8002a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a6a:	4651      	mov	r1, sl
 8002a6c:	00ca      	lsls	r2, r1, #3
 8002a6e:	4610      	mov	r0, r2
 8002a70:	4619      	mov	r1, r3
 8002a72:	4603      	mov	r3, r0
 8002a74:	4642      	mov	r2, r8
 8002a76:	189b      	adds	r3, r3, r2
 8002a78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a7c:	464b      	mov	r3, r9
 8002a7e:	460a      	mov	r2, r1
 8002a80:	eb42 0303 	adc.w	r3, r2, r3
 8002a84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002a98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	18db      	adds	r3, r3, r3
 8002aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	eb42 0303 	adc.w	r3, r2, r3
 8002aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002aae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002ab2:	f7fd fb91 	bl	80001d8 <__aeabi_uldivmod>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4b0d      	ldr	r3, [pc, #52]	@ (8002af0 <UART_SetConfig+0x2d4>)
 8002abc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	2164      	movs	r1, #100	@ 0x64
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	3332      	adds	r3, #50	@ 0x32
 8002ace:	4a08      	ldr	r2, [pc, #32]	@ (8002af0 <UART_SetConfig+0x2d4>)
 8002ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	f003 0207 	and.w	r2, r3, #7
 8002ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4422      	add	r2, r4
 8002ae2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ae4:	e106      	b.n	8002cf4 <UART_SetConfig+0x4d8>
 8002ae6:	bf00      	nop
 8002ae8:	40011000 	.word	0x40011000
 8002aec:	40011400 	.word	0x40011400
 8002af0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002af8:	2200      	movs	r2, #0
 8002afa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002afe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b06:	4642      	mov	r2, r8
 8002b08:	464b      	mov	r3, r9
 8002b0a:	1891      	adds	r1, r2, r2
 8002b0c:	6239      	str	r1, [r7, #32]
 8002b0e:	415b      	adcs	r3, r3
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b16:	4641      	mov	r1, r8
 8002b18:	1854      	adds	r4, r2, r1
 8002b1a:	4649      	mov	r1, r9
 8002b1c:	eb43 0501 	adc.w	r5, r3, r1
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	00eb      	lsls	r3, r5, #3
 8002b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b2e:	00e2      	lsls	r2, r4, #3
 8002b30:	4614      	mov	r4, r2
 8002b32:	461d      	mov	r5, r3
 8002b34:	4643      	mov	r3, r8
 8002b36:	18e3      	adds	r3, r4, r3
 8002b38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b3c:	464b      	mov	r3, r9
 8002b3e:	eb45 0303 	adc.w	r3, r5, r3
 8002b42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b62:	4629      	mov	r1, r5
 8002b64:	008b      	lsls	r3, r1, #2
 8002b66:	4621      	mov	r1, r4
 8002b68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	008a      	lsls	r2, r1, #2
 8002b70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002b74:	f7fd fb30 	bl	80001d8 <__aeabi_uldivmod>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4b60      	ldr	r3, [pc, #384]	@ (8002d00 <UART_SetConfig+0x4e4>)
 8002b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	011c      	lsls	r4, r3, #4
 8002b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002b98:	4642      	mov	r2, r8
 8002b9a:	464b      	mov	r3, r9
 8002b9c:	1891      	adds	r1, r2, r2
 8002b9e:	61b9      	str	r1, [r7, #24]
 8002ba0:	415b      	adcs	r3, r3
 8002ba2:	61fb      	str	r3, [r7, #28]
 8002ba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ba8:	4641      	mov	r1, r8
 8002baa:	1851      	adds	r1, r2, r1
 8002bac:	6139      	str	r1, [r7, #16]
 8002bae:	4649      	mov	r1, r9
 8002bb0:	414b      	adcs	r3, r1
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bc0:	4659      	mov	r1, fp
 8002bc2:	00cb      	lsls	r3, r1, #3
 8002bc4:	4651      	mov	r1, sl
 8002bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bca:	4651      	mov	r1, sl
 8002bcc:	00ca      	lsls	r2, r1, #3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4642      	mov	r2, r8
 8002bd6:	189b      	adds	r3, r3, r2
 8002bd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002bdc:	464b      	mov	r3, r9
 8002bde:	460a      	mov	r2, r1
 8002be0:	eb42 0303 	adc.w	r3, r2, r3
 8002be4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002bf2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c00:	4649      	mov	r1, r9
 8002c02:	008b      	lsls	r3, r1, #2
 8002c04:	4641      	mov	r1, r8
 8002c06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c0a:	4641      	mov	r1, r8
 8002c0c:	008a      	lsls	r2, r1, #2
 8002c0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c12:	f7fd fae1 	bl	80001d8 <__aeabi_uldivmod>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4b38      	ldr	r3, [pc, #224]	@ (8002d00 <UART_SetConfig+0x4e4>)
 8002c1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	2264      	movs	r2, #100	@ 0x64
 8002c26:	fb02 f303 	mul.w	r3, r2, r3
 8002c2a:	1acb      	subs	r3, r1, r3
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	3332      	adds	r3, #50	@ 0x32
 8002c30:	4a33      	ldr	r2, [pc, #204]	@ (8002d00 <UART_SetConfig+0x4e4>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c3c:	441c      	add	r4, r3
 8002c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c42:	2200      	movs	r2, #0
 8002c44:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c46:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c4c:	4642      	mov	r2, r8
 8002c4e:	464b      	mov	r3, r9
 8002c50:	1891      	adds	r1, r2, r2
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	415b      	adcs	r3, r3
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c5c:	4641      	mov	r1, r8
 8002c5e:	1851      	adds	r1, r2, r1
 8002c60:	6039      	str	r1, [r7, #0]
 8002c62:	4649      	mov	r1, r9
 8002c64:	414b      	adcs	r3, r1
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c74:	4659      	mov	r1, fp
 8002c76:	00cb      	lsls	r3, r1, #3
 8002c78:	4651      	mov	r1, sl
 8002c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c7e:	4651      	mov	r1, sl
 8002c80:	00ca      	lsls	r2, r1, #3
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	4603      	mov	r3, r0
 8002c88:	4642      	mov	r2, r8
 8002c8a:	189b      	adds	r3, r3, r2
 8002c8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c8e:	464b      	mov	r3, r9
 8002c90:	460a      	mov	r2, r1
 8002c92:	eb42 0303 	adc.w	r3, r2, r3
 8002c96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ca2:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002cb0:	4649      	mov	r1, r9
 8002cb2:	008b      	lsls	r3, r1, #2
 8002cb4:	4641      	mov	r1, r8
 8002cb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cba:	4641      	mov	r1, r8
 8002cbc:	008a      	lsls	r2, r1, #2
 8002cbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002cc2:	f7fd fa89 	bl	80001d8 <__aeabi_uldivmod>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <UART_SetConfig+0x4e4>)
 8002ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	2164      	movs	r1, #100	@ 0x64
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	3332      	adds	r3, #50	@ 0x32
 8002cde:	4a08      	ldr	r2, [pc, #32]	@ (8002d00 <UART_SetConfig+0x4e4>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	f003 020f 	and.w	r2, r3, #15
 8002cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4422      	add	r2, r4
 8002cf2:	609a      	str	r2, [r3, #8]
}
 8002cf4:	bf00      	nop
 8002cf6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d00:	51eb851f 	.word	0x51eb851f

08002d04 <memset>:
 8002d04:	4402      	add	r2, r0
 8002d06:	4603      	mov	r3, r0
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d100      	bne.n	8002d0e <memset+0xa>
 8002d0c:	4770      	bx	lr
 8002d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d12:	e7f9      	b.n	8002d08 <memset+0x4>

08002d14 <__libc_init_array>:
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	4d0d      	ldr	r5, [pc, #52]	@ (8002d4c <__libc_init_array+0x38>)
 8002d18:	4c0d      	ldr	r4, [pc, #52]	@ (8002d50 <__libc_init_array+0x3c>)
 8002d1a:	1b64      	subs	r4, r4, r5
 8002d1c:	10a4      	asrs	r4, r4, #2
 8002d1e:	2600      	movs	r6, #0
 8002d20:	42a6      	cmp	r6, r4
 8002d22:	d109      	bne.n	8002d38 <__libc_init_array+0x24>
 8002d24:	4d0b      	ldr	r5, [pc, #44]	@ (8002d54 <__libc_init_array+0x40>)
 8002d26:	4c0c      	ldr	r4, [pc, #48]	@ (8002d58 <__libc_init_array+0x44>)
 8002d28:	f000 f818 	bl	8002d5c <_init>
 8002d2c:	1b64      	subs	r4, r4, r5
 8002d2e:	10a4      	asrs	r4, r4, #2
 8002d30:	2600      	movs	r6, #0
 8002d32:	42a6      	cmp	r6, r4
 8002d34:	d105      	bne.n	8002d42 <__libc_init_array+0x2e>
 8002d36:	bd70      	pop	{r4, r5, r6, pc}
 8002d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d3c:	4798      	blx	r3
 8002d3e:	3601      	adds	r6, #1
 8002d40:	e7ee      	b.n	8002d20 <__libc_init_array+0xc>
 8002d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d46:	4798      	blx	r3
 8002d48:	3601      	adds	r6, #1
 8002d4a:	e7f2      	b.n	8002d32 <__libc_init_array+0x1e>
 8002d4c:	08002d94 	.word	0x08002d94
 8002d50:	08002d94 	.word	0x08002d94
 8002d54:	08002d94 	.word	0x08002d94
 8002d58:	08002d98 	.word	0x08002d98

08002d5c <_init>:
 8002d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5e:	bf00      	nop
 8002d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d62:	bc08      	pop	{r3}
 8002d64:	469e      	mov	lr, r3
 8002d66:	4770      	bx	lr

08002d68 <_fini>:
 8002d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6a:	bf00      	nop
 8002d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6e:	bc08      	pop	{r3}
 8002d70:	469e      	mov	lr, r3
 8002d72:	4770      	bx	lr
